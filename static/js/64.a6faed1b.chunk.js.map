{"version":3,"file":"static/js/64.a6faed1b.chunk.js","mappings":"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","sources":["utils.js","algorithms/ATNAlgorithm/SignalConversionATN.js","algorithms/ATNAlgorithm/mainSignalConversion.js","algorithms/ATNAlgorithm/detectRPeaks.js","algorithms/CMDAlgorithm/signalConversionCMD2.js","algorithms/CMDAlgorithm/signalConversionCMD3.js","algorithms/CMDAlgorithm/mainConversionCMD.js","algorithms/CMDAlgorithm/signalConversionCMD1.js","algorithms/GPTAlgorithm/utils.js","algorithms/GPTAlgorithm/signalConversionGPT.js","algorithms/GPTAlgorithm/mainConversionGPT.js","algorithms/KHOAlgorithm/utils.js","algorithms/KHOAlgorithm/SignalConversionKHO.js","algorithms/KHOAlgorithm/preprocessKHO.js","algorithms/KHOAlgorithm/mainSignalConversion.js","preprocessSignal/biggestPreprocess.js","preprocessSignal/mainConversions.js","preprocessSignal/newPreprocess.js","preprocessSignal/preprocessSignal.js","algorithms/PTAlgorithm/signalConversionPT.js","algorithms/PTAlgorithm/signalConversionPT+++.js","algorithms/PTAlgorithm/mainConversionPT.js","peaksCollection/peaks.worker.js"],"sourcesContent":["export const parseArrayData = (data) => {\r\n  data = data.map((item) => item.split(','));\r\n  if (data[0].length > 3 || data[0][0] === 'N') {\r\n    data = data.map((item) => item.slice(1));\r\n  }\r\n  const [headers, ...rows] = data;\r\n  const totalChannels = headers.filter((item) => item !== 't');\r\n  const tInd = headers.findIndex((i) => i === 't');\r\n\r\n  const series = {};\r\n  for (let i = 0; i < totalChannels.length; i++) {\r\n    series[i] = [];\r\n  }\r\n\r\n  rows.forEach((row) => {\r\n    totalChannels.forEach((item, i) => {\r\n      series[i].push([Number(row[tInd]), parseFloat(row[i])]);\r\n    });\r\n  });\r\n\r\n  const finalData = [];\r\n  for (let i = 0; i < totalChannels.length; i++) {\r\n    finalData.push({\r\n      name: headers[i],\r\n      data: series[i],\r\n    });\r\n  }\r\n\r\n  return finalData;\r\n};\r\n\r\nexport function analyzeExcitations(data) {\r\n  const dataLabels = data[0].split(',');\r\n  const labelsNames = ['v1', 'v2', 'v3'];\r\n  const timeLabelIdx = dataLabels.indexOf('t');\r\n  const labelIdxes = labelsNames.map((ch) => dataLabels.indexOf(ch));\r\n\r\n  const signals = labelIdxes.map(() => []);\r\n  const times = [];\r\n\r\n  for (let i = 1; i < data.length; i++) {\r\n    const row = data[i].split(',');\r\n    labelIdxes.forEach((idx, chNum) => {\r\n      signals[chNum].push(Number(row[idx]));\r\n    });\r\n    times.push(Number(row[timeLabelIdx]));\r\n  }\r\n\r\n  function analyzeLabel(signal) {\r\n    const mean = signal.reduce((a, b) => a + b, 0) / signal.length;\r\n    const std = Math.sqrt(signal.reduce((a, b) => a + (b - mean) ** 2, 0) / signal.length);\r\n    const threshold = mean + 0.5 * std;\r\n    const minIntervalMs = 200;\r\n    const peaks = [];\r\n\r\n    for (let i = 1; i < signal.length - 1; i++) {\r\n      if (signal[i] > signal[i - 1] && signal[i] > signal[i + 1] && signal[i] > threshold) {\r\n        if (peaks.length === 0 || times[i] - times[peaks[peaks.length - 1]] >= minIntervalMs) {\r\n          peaks.push(i);\r\n        } else {\r\n          if (signal[i] > signal[peaks[peaks.length - 1]]) {\r\n            peaks[peaks.length - 1] = i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const peakTimes = peaks.map((i) => times[i]);\r\n    const intervals = [];\r\n    for (let j = 1; j < peakTimes.length; j++) {\r\n      intervals.push(peakTimes[j] - peakTimes[j - 1]);\r\n    }\r\n\r\n    return {\r\n      count: peakTimes.length,\r\n      avgInterval: intervals.length ? intervals.reduce((a, b) => a + b, 0) / intervals.length : 0,\r\n    };\r\n  }\r\n\r\n  const result = {};\r\n  labelsNames.forEach((name, i) => {\r\n    result[name] = analyzeLabel(signals[i]);\r\n  });\r\n\r\n  const combinedSignal = [];\r\n  for (let i = 0; i < signals[0].length; i++) {\r\n    const vals = labelIdxes.map((_, chNum) => signals[chNum][i]);\r\n    const maxAbs = getTopValue(...vals.map(Math.abs), 'max');\r\n    const combinedVal = vals.find((v) => Math.abs(v) === maxAbs);\r\n    combinedSignal.push(combinedVal);\r\n  }\r\n  result.combined = analyzeLabel(combinedSignal);\r\n\r\n  return result;\r\n}\r\n\r\nexport const getCorrectYAxisMaximum = (data) => {\r\n  const isNegative = data < 0;\r\n  let currentNumber = data;\r\n  let separatorId = 0;\r\n\r\n  if (isNegative) {\r\n    currentNumber = -currentNumber;\r\n  }\r\n  for (let i = 0; i < String(currentNumber).length; i++) {\r\n    if (String(currentNumber)[i] === '.') {\r\n      separatorId = i;\r\n    }\r\n  }\r\n  let firstDigit = Number(String(currentNumber)[0]);\r\n  let digitNumber = Number('0.' + String(currentNumber).slice(1, 2));\r\n  if (digitNumber === 0) {\r\n    return isNegative ? -currentNumber : currentNumber;\r\n  }\r\n  let result = '';\r\n  if (digitNumber > 0.5) {\r\n    for (let i = 0; i < String(currentNumber).split('').length; i++) {\r\n      if (i === 0) {\r\n        result += firstDigit + 1;\r\n      } else {\r\n        if (separatorId == 0 || separatorId > i) {\r\n          result += 0;\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    result += firstDigit;\r\n    for (let i = 1; i < String(currentNumber).split('').length; i++) {\r\n      if (i === 1) {\r\n        result += 5;\r\n      } else {\r\n        if (separatorId == 0 || separatorId > i) {\r\n          result += 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return isNegative ? Number(-result) : Number(result);\r\n};\r\n\r\nexport function getTopValue(data, condition) {\r\n  let max = -Infinity;\r\n  let min = Infinity;\r\n  if (condition === 'min') {\r\n    for (let i = 0; i < data.length; i++) {\r\n      if (data[i] < min) min = data[i];\r\n    }\r\n    return min;\r\n  } else if (condition === 'max') {\r\n    for (let i = 0; i < data.length; i++) {\r\n      if (data[i] > max) max = data[i];\r\n    }\r\n    return max;\r\n  }\r\n}\r\n\r\nexport const getYAxisMainInfo = (dataValues) => {\r\n  let min = getTopValue(dataValues, 'min');\r\n  let max = getTopValue(dataValues, 'max');\r\n  if (!Math.floor(min / 100) === min) {\r\n    min = min * 100;\r\n  }\r\n  if (!Math.ceil(max / 100) === max) {\r\n    max = max * 100;\r\n  }\r\n  const step = getCorrectSteps(min, max);\r\n  let plotLines = [];\r\n  for (let i = 0; ; i++) {\r\n    const plotLine = step * i;\r\n    plotLines.push(plotLine);\r\n    if (plotLine > max) {\r\n      break;\r\n    }\r\n  }\r\n  for (let i = 1; ; i++) {\r\n    const plotLine = -(step * i);\r\n    plotLines.push(plotLine);\r\n    if (plotLine < min) {\r\n      break;\r\n    }\r\n  }\r\n  plotLines = plotLines\r\n    .sort((a, b) => a - b)\r\n    .map((item, i) => {\r\n      const isZero = item === 0;\r\n      const isMin = i === 0;\r\n      const isMax = i === plotLines.length - 1;\r\n      return {\r\n        value: item,\r\n        color: isZero ? 'black' : isMin || isMax ? 'black' : '#ccc',\r\n        width: isZero ? 1 : isMin || isMax ? 1.5 : 1,\r\n        dashStyle: 'Solid',\r\n        zIndex: 2,\r\n      };\r\n    });\r\n\r\n  return { min, max, step, plotLines };\r\n};\r\n\r\nexport const getGraphMainInfo = (series, uploadedSeriesPage) => {\r\n  const seriesLength = series[0].data.length;\r\n\r\n  const tickCount =\r\n    seriesLength > 24000\r\n      ? seriesLength > 72000\r\n        ? seriesLength > 240000\r\n          ? 5000\r\n          : 1000\r\n        : 500\r\n      : 100;\r\n  return {\r\n    chart: { zoomType: 'x', backgroundColor: 'white', spacingRight: 30 },\r\n    boost: {\r\n      useGPUTranslations: true,\r\n      usePreAllocated: true,\r\n    },\r\n    plotOptions: {\r\n      series: {\r\n        boostThreshold: 1,\r\n        turboThreshold: 0,\r\n        animation: false,\r\n        marker: { enabled: false },\r\n        lineWidth: 1,\r\n        shadow: false,\r\n        dataLabels: { enabled: false },\r\n        enableMouseTracking: true,\r\n        dataGrouping: { enabled: false, approximation: 'extremes', groupPixelWidth: 2 },\r\n      },\r\n    },\r\n    tooltip: {\r\n      enabled: true,\r\n      shared: true,\r\n      formatter: function () {\r\n        return (\r\n          `<b>Время: ${this.x} мсек</b><br/>` +\r\n          this.points.map((p) => `${p.series.name}: ${p.y}`).join('<br/>')\r\n        );\r\n      },\r\n    },\r\n    xAxis: {\r\n      type: 'datetime',\r\n      tickPixelInterval: 65,\r\n      title: { text: 'Время (сек)' },\r\n      labels: {\r\n        style: {\r\n          whiteSpace: 'nowrap',\r\n        },\r\n        formatter: function () {\r\n          return this.value / 1000;\r\n        },\r\n      },\r\n      // gridLineWidth: 1,\r\n      // minorGridLineWidth: 1,\r\n      //AUTO PLOTLINES\r\n      plotLines: Array.from({ length: (seriesLength * 2.5) / tickCount }, (_, i) => ({\r\n        color: i === 0 ? 'black' : i % 5 === 0 ? '#ddd' : '#eee',\r\n        width: i % 5 === 0 ? 1 : 0.5,\r\n        value: i * tickCount * (uploadedSeriesPage + 1),\r\n        zIndex: i === 0 ? 10 : 0,\r\n      })),\r\n    },\r\n    legend: {\r\n      enabled: false,\r\n      align: 'center',\r\n      verticalAlign: 'bottom',\r\n      layout: 'horizontal',\r\n      itemStyle: {\r\n        cursor: 'pointer',\r\n      },\r\n      itemCheckboxStyle: {\r\n        position: 'absolute',\r\n        marginTop: '1px',\r\n      },\r\n    },\r\n    credits: { enabled: false },\r\n    navigator: {\r\n      enabled: true,\r\n      xAxis: {\r\n        type: 'linear',\r\n        labels: {\r\n          formatter() {\r\n            return this.value;\r\n          },\r\n        },\r\n      },\r\n    },\r\n    rangeSelector: { enabled: false },\r\n  };\r\n};\r\n\r\nexport const getCorrectSteps = (min, max) => {\r\n  const steps = [\r\n    0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10, 25, 50, 100, 250, 500, 1000, 2500, 5000,\r\n    10000, 25000, 50000, 100000, 250000, 500000, 1000000, 2500000, 5000000, 10000000, 25000000,\r\n  ];\r\n  // const interval = max - min;\r\n  const sumStepsArr = [];\r\n  for (let i = 0; i < steps.length; i++) {\r\n    let downSteps = Math.ceil(Math.abs(min) / steps[i]);\r\n    let upSteps = Math.ceil(max / steps[i]);\r\n    let sumSteps = downSteps + upSteps;\r\n    sumStepsArr.push(sumSteps);\r\n  }\r\n  const correctStepsArr = sumStepsArr.filter((item) => item >= 4 && item <= 12);\r\n  const bestStep =\r\n    correctStepsArr.length > 1\r\n      ? correctStepsArr.length === 2\r\n        ? steps[sumStepsArr.findIndex((item) => item === correctStepsArr.sort((a, b) => a - b)[0])]\r\n        : steps[\r\n            sumStepsArr.findIndex(\r\n              (item) =>\r\n                item ===\r\n                correctStepsArr.sort((a, b) => a - b)[Math.floor(correctStepsArr.length / 2)],\r\n            )\r\n          ]\r\n      : steps[sumStepsArr.findIndex((item) => item === correctStepsArr[0])];\r\n\r\n  return bestStep;\r\n};\r\n\r\nexport const getMainOptions = (series, uploadedSeriesPage) => {\r\n  const mainGraphInfo = getGraphMainInfo(series, uploadedSeriesPage);\r\n\r\n  return {\r\n    ...mainGraphInfo,\r\n    yAxis: series.map((item, i) => singleMainYAxis(i, series)),\r\n    series: series.map((item, i) => {\r\n      return {\r\n        ...series[i],\r\n        yAxis: i,\r\n        color: 'blue',\r\n        max: singleMainYAxis(i, series).max,\r\n        min: singleMainYAxis(i, series).min,\r\n      };\r\n    }),\r\n  };\r\n};\r\n\r\nconst singleMainYAxis = (id, series) => {\r\n  const dataValues = series[id].data.map((item) => item[1]);\r\n  const { min, max, step, plotLines } = getYAxisMainInfo(dataValues);\r\n\r\n  return {\r\n    top: `${id * (100 / series.length)}%`,\r\n    height: `${100 / series.length}%`,\r\n    offset: 0,\r\n    lineWidth: 1,\r\n    labels: {\r\n      x: 5,\r\n      align: 'left',\r\n    },\r\n    tickPositioner: function () {\r\n      const positions = [];\r\n      for (let y = plotLines[0].value; y <= plotLines[plotLines.length - 1].value; y += step) {\r\n        positions.push(y);\r\n      }\r\n      return positions;\r\n    },\r\n\r\n    plotLines,\r\n    max,\r\n    min,\r\n  };\r\n};\r\n\r\nexport function saveFile(data) {\r\n  const convertToCsvData = (arr, sep) => {\r\n    const secondSep = '\\r\\n';\r\n    const escapeCell = (v) => {\r\n      if (v === null || v === undefined) return '';\r\n      const s = String(v);\r\n      const mustQuote = s.includes('\"') || s.includes('\\n') || s.includes('\\r') || s.includes(sep);\r\n      const escaped = s.replace(/\"/g, '\"\"');\r\n      return mustQuote ? `\"${escaped}\"` : escaped;\r\n    };\r\n\r\n    const csv = (arr ?? []).map((row) => (row ?? []).map(escapeCell).join(sep)).join(secondSep);\r\n    const blobParts = ['\\uFEFF', csv];\r\n    return blobParts;\r\n  };\r\n\r\n  const convertedData = convertToCsvData(data, ';');\r\n  const blob = new Blob(convertedData, { type: 'text/csv;charset=utf-8;' });\r\n  const url = URL.createObjectURL(blob);\r\n  const a = document.createElement('a');\r\n  a.href = url;\r\n  a.download = 'data.csv';\r\n  document.body.appendChild(a);\r\n  a.click();\r\n  setTimeout(() => {\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n  }, 0);\r\n}\r\n","const FIR_TAPS = 200;\nconst DECIM = 32;\nconst BANDS = [\n  [7.8, 15.7],\n  [15.7, 23.5],\n  [23.5, 31.3],\n  [31.3, 39.2],\n];\n\nconst clamp = (x, lo, hi) => Math.max(lo, Math.min(hi, x));\nconst sinc = (x) => (x === 0 ? 1 : Math.sin(Math.PI * x) / (Math.PI * x));\nfunction hamming(L) {\n  const w = new Array(L);\n  for (let n = 0; n < L; n++) w[n] = 0.54 - 0.46 * Math.cos((2 * Math.PI * n) / (L - 1));\n  return w;\n}\n\nfunction firLowpass(length, wc) {\n  wc = clamp(wc, 0, 1);\n  const M = length - 1;\n  const w = hamming(length);\n  const h = new Array(length);\n  for (let n = 0; n < length; n++) {\n    const k = n - M / 2;\n    h[n] = 2 * wc * sinc(2 * wc * k) * w[n];\n  }\n  return h;\n}\n\nfunction firBandpass(length, f1, f2, fs = 400) {\n  const w1 = clamp(f1 / (fs / 2), 0, 1);\n  const w2 = clamp(f2 / (fs / 2), 0, 1);\n  const lo = Math.min(w1, w2),\n    hi = Math.max(w1, w2);\n  const h2 = firLowpass(length, hi);\n  const h1 = lo > 0 ? firLowpass(length, lo) : new Array(length);\n  const h = new Array(length);\n  for (let i = 0; i < length; i++) h[i] = h2[i] - h1[i];\n  return h;\n}\n\nfunction convSame(x, h) {\n  const n = x.length,\n    m = h.length;\n  const y = new Array(n);\n  const pad = Math.floor(m / 2);\n  for (let i = 0; i < n; i++) {\n    let acc = 0;\n    for (let k = 0; k < m; k++) {\n      const xi = i + k - pad;\n      if (xi >= 0 && xi < n) acc += x[xi] * h[k];\n    }\n    y[i] = acc;\n  }\n  return y;\n}\n\nfunction downsample(x, M) {\n  const out = new Array(Math.ceil(x.length / M));\n  let j = 0;\n  for (let i = 0; i < x.length; i += M) out[j++] = x[i];\n  return out;\n}\n\nexport function runFilterBank(signal, fs = 400) {\n  const filters = BANDS.map(([f1, f2]) => ({\n    band: [f1, f2],\n    h: firBandpass(FIR_TAPS, f1, f2, fs),\n  }));\n\n  const filtered = filters.map(({ h }) => {\n    const y = convSame(signal, h);\n    return y;\n  });\n\n  const decimated = filtered.map((data) => {\n    const yds = downsample(data, DECIM);\n    return yds;\n  });\n\n  return {\n    filtered,\n    decimated,\n  };\n}\n","import { newDetectRPeaksATN } from './detectRPeaks';\nimport { runFilterBank } from './SignalConversionATN';\n\nexport const analyzeATN = (signal, channel) => {\n  const signalTime = signal[channel].data.map((obj) => obj[0]);\n  const signalData = signal[channel].data.map((obj) => obj[1]);\n  const signalTransform = (data) => signalTime.map((item, i) => [item, data[i]]);\n  const [filteredSignal1, filteredSignal2, filteredSignal3, filteredSignal4] =\n    runFilterBank(signalData).filtered;\n  const newPeaks = newDetectRPeaksATN(signalData, runFilterBank(signalData).filtered);\n  return {\n    filteredSignal1: signalTransform(filteredSignal1),\n    filteredSignal2: signalTransform(filteredSignal2),\n    filteredSignal3: signalTransform(filteredSignal3),\n    filteredSignal4: signalTransform(filteredSignal4),\n    peaks: {\n      series: signalTime.map((item, i) => [item, newPeaks.includes(i) ? 50 : 0]),\n      data: newPeaks,\n    },\n  };\n};\n","import { getTopValue } from '../../utils';\n\nexport function newDetectRPeaksATN(signalData, filteredSignal) {\n  const fs = 400;\n  const M = 32;\n  const lambda = 0.8;\n  const refractoryMs = 250;\n\n  const threshold1 = 0.08;\n  const threshold2 = 0.7;\n  const thresholdL4 = 0.3;\n  const rescueThresh = 0.2;\n\n  const weakDsMin = 0.1;\n  const weakDsMax = 0.15;\n  const weakAmpFracDefault = 0.03;\n  const slopeFrac = 0.4;\n\n  const eps = 1e-12;\n\n  const clamp = (x, a, b) => Math.max(a, Math.min(b, x));\n  const downsample = (v, m) => {\n    const o = [];\n    for (let i = 0; i < v.length; i += m) o.push(v[i]);\n    return o;\n  };\n  const movingAverage = (v, w) => {\n    const out = new Array(v.length).fill(0);\n    let s = 0;\n    for (let i = 0; i < v.length; i++) {\n      s += v[i];\n      if (i >= w) s -= v[i - w];\n      out[i] = s / Math.min(i + 1, w);\n    }\n    return out;\n  };\n  const history = (ynm1, x) => (1 - lambda) * x + lambda * ynm1;\n  const findPeaks = (v) => {\n    const idx = [];\n    for (let i = 1; i < v.length - 1; i++) if (v[i] >= v[i - 1] && v[i] > v[i + 1]) idx.push(i);\n    return idx;\n  };\n\n  const median = (arr) => {\n    if (!arr.length) return 0;\n    const s = [...arr].sort((a, b) => a - b);\n    const k = Math.floor(s.length / 2);\n    return s.length % 2 ? s[k] : 0.5 * (s[k - 1] + s[k]);\n  };\n  const mad = (arr) => {\n    const m = median(arr);\n    return median(arr.map((x) => Math.abs(x - m))) || 1;\n  };\n\n  const bandEnergyAt = (i, w1, w2, w3, w4) =>\n    Math.abs(w1[i]) + Math.abs(w2[i]) + Math.abs(w3[i]) + Math.abs(w4[i]);\n  function positiveMaximaIndex(raw, a, b) {\n    let best = -Infinity,\n      bestI = -1;\n    const aa = clamp(a, 1, raw.length - 2),\n      bb = clamp(b, 1, raw.length - 2);\n    for (let i = aa; i <= bb; i++) {\n      if (raw[i] > 0 && raw[i] >= raw[i - 1] && raw[i] > raw[i + 1]) {\n        if (raw[i] > best) {\n          best = raw[i];\n          bestI = i;\n        }\n      }\n    }\n    return bestI;\n  }\n\n  function otsuThreshold(arr, bins = 64) {\n    if (!arr.length) return 0.2;\n    const min = getTopValue(arr, 'min'),\n      max = getTopValue(arr, 'max');\n    if (max - min < 1e-12) return min;\n    const h = new Array(bins).fill(0);\n    for (const v of arr) {\n      const k = Math.max(\n        0,\n        Math.min(bins - 1, Math.floor(((v - min) / (max - min + 1e-12)) * bins)),\n      );\n      h[k]++;\n    }\n    const total = arr.length;\n    const w = new Array(bins).fill(0),\n      m = new Array(bins).fill(0);\n    w[0] = h[0];\n    m[0] = 0 * h[0];\n    for (let i = 1; i < bins; i++) {\n      w[i] = w[i - 1] + h[i];\n      m[i] = m[i - 1] + i * h[i];\n    }\n    const mT = m[bins - 1];\n    let bestT = 0,\n      bestVar = -1;\n    for (let t = 0; t < bins - 1; t++) {\n      const w0 = w[t],\n        w1 = total - w0;\n      if (w0 === 0 || w1 === 0) continue;\n      const m0 = m[t] / w0,\n        m1 = (mT - m[t]) / w1;\n      const vb = w0 * w1 * (m0 - m1) * (m0 - m1);\n      if (vb > bestVar) {\n        bestVar = vb;\n        bestT = t;\n      }\n    }\n    return min + ((bestT + 0.5) * (max - min)) / bins;\n  }\n\n  function slopeAround(data, i, fs) {\n    const rad = Math.max(1, Math.round(fs * 0.012));\n    let s = 0,\n      c = 0;\n    for (let k = 1; k <= rad; k++) {\n      const a = i - k,\n        b = i + k;\n      if (a >= 0 && b < data.length) {\n        s += Math.abs(data[b] - data[a]);\n        c++;\n      }\n    }\n    return c ? s / c : 0;\n  }\n\n  const [w1i, w2i, w3i, w4i] = filteredSignal || [];\n  if (!w1i || !w2i || !w3i || !w4i) return [];\n  const L = Math.min(signalData.length, w1i.length, w2i.length, w3i.length, w4i.length);\n\n  let m = 0,\n    c = 0;\n  for (let i = 0; i < L; i++) {\n    const x = signalData[i];\n    if (!Number.isNaN(x)) {\n      m += x;\n      c++;\n    }\n  }\n  const mean = c ? m / c : 0;\n  const data = Array.from({ length: L }, (_, i) =>\n    Number.isNaN(signalData[i]) ? mean : signalData[i],\n  );\n\n  const s1 = mad(w1i),\n    s2 = mad(w2i),\n    s3 = mad(w3i),\n    s4 = mad(w4i);\n  const w1 = w1i.map((x) => x / (s1 + 1e-12));\n  const w2 = w2i.map((x) => x / (s2 + 1e-12));\n  const w3 = w3i.map((x) => x / (s3 + 1e-12));\n  const w4 = w4i.map((x) => x / (s4 + 1e-12));\n\n  const y2 = downsample(w1.slice(0, L), M);\n  const y3 = downsample(w2.slice(0, L), M);\n  const y4 = downsample(w3.slice(0, L), M);\n  const y5 = downsample(w4.slice(0, L), M);\n  const Ld = Math.min(y2.length, y3.length, y4.length, y5.length);\n  y2.length = Ld;\n  y3.length = Ld;\n  y4.length = Ld;\n  y5.length = Ld;\n\n  const P1 = new Array(Ld),\n    P2 = new Array(Ld),\n    P4 = new Array(Ld);\n  for (let i = 0; i < Ld; i++) {\n    const a2 = Math.abs(y2[i]),\n      a3 = Math.abs(y3[i]),\n      a4 = Math.abs(y4[i]),\n      a5 = Math.abs(y5[i]);\n    P1[i] = a2 + a3 + a4;\n    P2[i] = a2 + a3 + a4 + a5;\n    P4[i] = a3 + a4 + a5;\n  }\n  const neighborAvg = (P) => {\n    const out = new Array(P.length + 1);\n    out[0] = P[0] / 2;\n    for (let i = 0; i < P.length - 1; i++) out[i + 1] = (P[i] + P[i + 1]) / 2;\n    out[out.length - 1] = P[P.length - 1] / 2;\n    return out;\n  };\n  const FL1 = neighborAvg(P1);\n  const FL2 = neighborAvg(P2);\n  const FL4 = neighborAvg(P4);\n\n  const allEvents = findPeaks(FL1);\n  if (!allEvents.length) return [];\n  const coarseRad = 2 * M;\n  const fineRad = Math.max(1, Math.round(fs * 0.04));\n  const EventsL1 = [];\n  for (const p of allEvents) {\n    const base = clamp(p * M, 0, L - 1);\n    if (positiveMaximaIndex(data, base - coarseRad, base + coarseRad) !== -1) EventsL1.push(p);\n  }\n  if (!EventsL1.length) return [];\n\n  const meanL1 = EventsL1.reduce((s, p) => s + FL2[p], 0) / EventsL1.length;\n  let NL = meanL1 * (1 - 0.1);\n  let SL = meanL1 * (1 + 0.1);\n  function detectionBlock(mwi, Events, NL0, SL0, thr) {\n    let NL = NL0,\n      SL = SL0,\n      sumSig = SL0,\n      sumNoi = NL0;\n    const Signal = [],\n      Noise = [],\n      VDs = [],\n      Class = [];\n    for (let i = 0; i < Events.length; i++) {\n      const P = Events[i];\n      const Ds = Math.min(1, Math.max(0, (mwi[P] - NL) / Math.max(eps, SL - NL)));\n      VDs.push(Ds);\n      if (Ds > thr) {\n        Signal.push(P);\n        Class.push(1);\n        sumSig += mwi[P];\n        SL = sumSig / (Signal.length + 1);\n      } else {\n        Noise.push(P);\n        Class.push(0);\n        sumNoi += mwi[P];\n        NL = sumNoi / (Noise.length + 1);\n      }\n    }\n    return { Signal, Noise, VDs, Class };\n  }\n  const B1 = detectionBlock(FL2, EventsL1, NL, SL, threshold1);\n  const B2 = detectionBlock(FL2, EventsL1, NL, SL, threshold2);\n\n  const ClassL3 = EventsL1.map((_, i) => {\n    const C1 = B1.Class[i],\n      C2 = B2.Class[i];\n    if (C1 === 1 && C2 === 1) return 1;\n    if (C1 === 0 && C2 === 0) return 0;\n    if (C1 === 1 && C2 === 0) {\n      const d1 = (B1.VDs[i] - threshold1) / (1 - threshold1);\n      const d2 = (threshold2 - B2.VDs[i]) / threshold2;\n      return d1 > d2 ? 1 : 0;\n    }\n    return 1;\n  });\n  const SignalL3 = [],\n    NoiseL3 = [];\n  for (let i = 0; i < EventsL1.length; i++) (ClassL3[i] ? SignalL3 : NoiseL3).push(EventsL1[i]);\n\n  let SL4 = SignalL3.length\n    ? SignalL3.reduce((s, p) => s + FL4[p], 0) / SignalL3.length\n    : EventsL1.reduce((s, p) => s + FL4[p], 0) / EventsL1.length;\n  let NL4 = NoiseL3.length\n    ? NoiseL3.reduce((s, p) => s + FL4[p], 0) / NoiseL3.length\n    : (EventsL1.reduce((s, p) => s + FL4[p], 0) / EventsL1.length) * 0.5;\n  const SignalL4 = [],\n    NoiseL4 = [];\n  for (let i = 0; i < EventsL1.length; i++) {\n    const P = EventsL1[i];\n    const Ds = Math.min(1, Math.max(0, (FL4[P] - NL4) / Math.max(eps, SL4 - NL4)));\n    if (ClassL3[i] === 1) {\n      SignalL4.push(P);\n      SL4 = history(SL4, FL4[P]);\n    } else {\n      if (Ds > thresholdL4) {\n        SignalL4.push(P);\n        SL4 = history(SL4, FL4[P]);\n      } else {\n        NoiseL4.push(P);\n        NL4 = history(NL4, FL4[P]);\n      }\n    }\n  }\n\n  const SignalL5 = SignalL4.slice();\n  const periods = [];\n  for (let i = 0; i < SignalL4.length - 1; i++) periods.push(SignalL4[i + 1] - SignalL4[i]);\n  const meanperiod = movingAverage(periods, 100);\n  for (let i = 0; i < periods.length; i++) {\n    if (periods[i] > (meanperiod[i] || periods[i]) * 1.5) {\n      const a = SignalL4[i],\n        b = SignalL4[i + 1];\n      for (const n of NoiseL4) {\n        if (n > a && n < b) {\n          const Ds = Math.min(1, Math.max(0, (FL4[n] - NL4) / Math.max(eps, SL4 - NL4)));\n          if (Ds > rescueThresh) SignalL5.push(n);\n        }\n      }\n    }\n  }\n  SignalL5.sort((x, y) => x - y);\n  const peaks0 = [];\n  for (const p of SignalL5) {\n    const base = clamp(p * M, 0, L - 1);\n    const a = clamp(base - 2 * M, 0, L - 1),\n      b = clamp(base + 2 * M, 0, L - 1);\n    let eIdx = a,\n      eBest = bandEnergyAt(a, w1, w2, w3, w4);\n    for (let i = a; i <= b; i++) {\n      const ev = bandEnergyAt(i, w1, w2, w3, w4);\n      if (ev > eBest) {\n        eBest = ev;\n        eIdx = i;\n      }\n    }\n    const posI = positiveMaximaIndex(data, eIdx - fineRad, eIdx + fineRad);\n    if (posI !== -1) peaks0.push(posI);\n  }\n  let peaks = [...new Set(peaks0)].sort((a, b) => a - b);\n  const refr = Math.round((refractoryMs / 1000) * fs);\n  if (peaks.length > 1) {\n    const keep = new Array(peaks.length).fill(true);\n    for (let i = 0; i < peaks.length - 1; i++) {\n      if (!keep[i]) continue;\n      const j = i + 1;\n      if (peaks[j] - peaks[i] < refr) {\n        if (data[peaks[i]] < data[peaks[j]]) keep[i] = false;\n        else keep[j] = false;\n      }\n    }\n    peaks = peaks.filter((_, k) => keep[k]).sort((a, b) => a - b);\n  }\n\n  const dsVal = (p) => Math.min(1, Math.max(0, (FL4[p] - NL4) / Math.max(eps, SL4 - NL4)));\n  const allDs = EventsL1.map(dsVal);\n  let weakDs = otsuThreshold(allDs);\n  weakDs = Math.max(weakDsMin, Math.min(weakDsMax, weakDs * 0.8));\n\n  const ampsStrong = peaks.map((i) => data[i]);\n  const medAmpStrong = median(ampsStrong) || 1;\n\n  const slopesStrong = peaks.map((i) => slopeAround(data, i, fs));\n  const slopeCut = slopeFrac * (median(slopesStrong) || 1);\n\n  function localAmpBaseline(idx) {\n    if (!peaks.length) return medAmpStrong;\n    let lo = 0,\n      hi = peaks.length - 1,\n      pos = peaks.length;\n    while (lo <= hi) {\n      const mid = (lo + hi) >> 1;\n      if (peaks[mid] >= idx) {\n        pos = mid;\n        hi = mid - 1;\n      } else lo = mid + 1;\n    }\n    const K = 3;\n    const from = Math.max(0, pos - K),\n      to = Math.min(peaks.length - 1, pos + K);\n    const neigh = [];\n    for (let k = from; k <= to; k++) neigh.push(data[peaks[k]]);\n    return median(neigh) || medAmpStrong;\n  }\n\n  const extra = [];\n  for (const n of NoiseL4) {\n    const base = clamp(n * M, 0, L - 1);\n    const a = clamp(base - 2 * M, 0, L - 1),\n      b = clamp(base + 2 * M, 0, L - 1);\n    let eIdx = a,\n      eBest = bandEnergyAt(a, w1, w2, w3, w4);\n    for (let i = a; i <= b; i++) {\n      const ev = bandEnergyAt(i, w1, w2, w3, w4);\n      if (ev > eBest) {\n        eBest = ev;\n        eIdx = i;\n      }\n    }\n    const posI = positiveMaximaIndex(data, eIdx - fineRad, eIdx + fineRad);\n    if (posI === -1) continue;\n\n    const Ds = dsVal(n);\n    const dsOk = Ds >= weakDs;\n\n    const baseAmp = localAmpBaseline(posI);\n    const ampOk = data[posI] >= weakAmpFracDefault * baseAmp;\n\n    const slopeOk = slopeAround(data, posI, fs) >= slopeCut;\n\n    if (!(dsOk && ampOk && slopeOk)) continue;\n\n    let nearest = Infinity;\n    let lo = 0,\n      hi = peaks.length - 1;\n    while (lo <= hi) {\n      const mid = (lo + hi) >> 1;\n      const d = posI - peaks[mid];\n      nearest = Math.min(nearest, Math.abs(d));\n      if (d < 0) hi = mid - 1;\n      else lo = mid + 1;\n    }\n    if (nearest >= Math.round(0.9 * refr)) extra.push(posI);\n  }\n\n  if (extra.length) {\n    peaks = [...new Set(peaks.concat(extra))].sort((a, b) => a - b);\n    if (peaks.length > 1) {\n      const keep = new Array(peaks.length).fill(true);\n      for (let i = 0; i < peaks.length - 1; i++) {\n        if (!keep[i]) continue;\n        const j = i + 1;\n        if (peaks[j] - peaks[i] < refr) {\n          if (data[peaks[i]] < data[peaks[j]]) keep[i] = false;\n          else keep[j] = false;\n        }\n      }\n      peaks = peaks.filter((_, k) => keep[k]);\n    }\n  }\n\n  return peaks;\n}\n","function designFIRBandpass(fs, f1, f2, taps) {\n  const M = taps;\n  const mid = (M - 1) / 2;\n  const h = new Float64Array(M);\n  for (let n = 0; n < M; n++) {\n    const k = n - mid;\n    const win = 0.54 - 0.46 * Math.cos((2 * Math.PI * n) / (M - 1));\n    const sinc = (f) =>\n      k === 0 ? (2 * f) / fs : Math.sin((2 * Math.PI * f * k) / fs) / (Math.PI * k);\n    h[n] = (sinc(f2) - sinc(f1)) * win;\n  }\n  const sum = h.reduce((a, b) => a + b, 0);\n  for (let i = 0; i < M; i++) h[i] /= sum || 1;\n  return h;\n}\n\nfunction filtfiltFIR(x, h) {\n  const nPad = Math.min(3 * (h.length - 1), x.length - 1);\n  const xPad = reflectPad(x, nPad);\n  const y1 = convFIR(xPad, h);\n  y1.reverse();\n  const y2 = convFIR(y1, h);\n  y2.reverse();\n  return y2.subarray(nPad, nPad + x.length);\n}\n\nfunction reflectPad(x, nPad) {\n  const N = x.length;\n  const out = new Float64Array(N + 2 * nPad);\n  for (let i = 0; i < nPad; i++) out[nPad - 1 - i] = x[i + 1] ?? x[0];\n  for (let i = 0; i < N; i++) out[nPad + i] = x[i];\n  for (let i = 0; i < nPad; i++) out[nPad + N + i] = x[N - 2 - i] ?? x[N - 1];\n  return out;\n}\n\nfunction convFIR(x, h) {\n  const N = x.length,\n    M = h.length,\n    y = new Float64Array(N);\n  for (let n = 0; n < N; n++) {\n    let acc = 0;\n    for (let k = 0; k < M; k++) {\n      const i = n - k;\n      if (i >= 0) acc += h[k] * x[i];\n    }\n    y[n] = acc;\n  }\n  return y;\n}\n\nexport function detectECGPeaksStages(signal, opts = {}) {\n  const {\n    fs = 400,\n    band = [5, 20],\n    firTaps = 81,\n    mwiSec = 0.12,\n    refractorySec = 0.2,\n    refineSec = 0.08,\n  } = opts;\n\n  const x = signal instanceof Float64Array ? signal : Float64Array.from(signal);\n  const N = x.length;\n  if (N === 0) return { indices: [], stages: {} };\n\n  const bpArr = new Float64Array(N);\n  const dArr = new Float64Array(N);\n  const sArr = new Float64Array(N);\n  const mArr = new Float64Array(N);\n  const thArr = new Float64Array(N).fill(NaN);\n  const h = designFIRBandpass(fs, band[0], band[1], firTaps);\n  const yBP = filtfiltFIR(x, h);\n  if (bpArr) bpArr.set(yBP);\n\n  const W = Math.max(1, Math.round(mwiSec * fs));\n\n  const dBuf = new Float64Array(5);\n  let dpos = 0,\n    dCount = 0;\n  const mwiBuf = new Float64Array(W);\n  let mpos = 0,\n    msum = 0,\n    mCount = 0;\n  const mRingLen = Math.max(W + 1, Math.round(3 * fs));\n  const mRing = new Float64Array(mRingLen);\n\n  let SPKI = 0,\n    NPKI = 0,\n    TH1 = 0;\n  let initialized = false,\n    initMax = 0,\n    initCount = 0;\n  const initNeeded = Math.round(2 * fs);\n\n  const peaks = [];\n  let lastR = -Infinity;\n  const rrHist = [];\n  const rrWin = 8;\n  let mPrev2 = 0,\n    mPrev1 = 0,\n    mCurr = 0;\n  let mValid = false;\n\n  for (let n = 0; n < N; n++) {\n    dBuf[dpos] = yBP[n];\n    dpos = (dpos + 1) % 5;\n    dCount++;\n    let d = 0;\n    if (dCount >= 5) {\n      const i0 = (dpos + 4) % 5,\n        i1 = (dpos + 3) % 5,\n        i3 = (dpos + 1) % 5,\n        i4 = (dpos + 0) % 5;\n      d = (2 * dBuf[i0] + dBuf[i1] - dBuf[i3] - 2 * dBuf[i4]) / 8;\n    }\n    if (dArr) dArr[n] = d;\n\n    const s = d * d;\n    if (sArr) sArr[n] = s;\n\n    if (mCount < W) {\n      msum += s;\n      mwiBuf[mpos] = s;\n      mpos = (mpos + 1) % W;\n      mCount++;\n    } else {\n      msum += s - mwiBuf[mpos];\n      mwiBuf[mpos] = s;\n      mpos = (mpos + 1) % W;\n    }\n    const mShow = msum / Math.min(W, mCount || 1);\n    if (mArr) mArr[n] = mShow;\n\n    if (mCount < W) {\n      continue;\n    }\n\n    const m = msum / W;\n    mRing[n % mRingLen] = m;\n    if (!mValid) {\n      mPrev2 = mPrev1 = mCurr = m;\n      mValid = true;\n      continue;\n    }\n    mPrev2 = mPrev1;\n    mPrev1 = mCurr;\n    mCurr = m;\n\n    if (!initialized) {\n      initMax = Math.max(initMax, mPrev1);\n      if (++initCount >= initNeeded) {\n        SPKI = 0.25 * initMax;\n        NPKI = 0.125 * initMax;\n        TH1 = NPKI + 0.2 * (SPKI - NPKI);\n        initialized = true;\n      }\n      if (thArr) thArr[n] = initialized ? TH1 : n > 0 ? thArr[n - 1] : 0; // <-- без NaN\n      continue;\n    }\n\n    if (thArr) thArr[n] = TH1;\n\n    if (mPrev1 > mPrev2 && mPrev1 >= mCurr) {\n      const idxM = n - 1;\n      const meanRR = rrHist.length\n        ? rrHist.reduce((a, b) => a + b, 0) / rrHist.length\n        : Math.round(0.8 * fs);\n      const missRR = Math.round(1.6 * meanRR);\n      if (idxM - lastR > missRR) {\n        const start = Math.max(lastR + Math.max(1, Math.round(0.2 * fs)), idxM - missRR);\n        const end = idxM - Math.max(1, Math.round(0.08 * fs));\n        let best = -Infinity,\n          bestI = -1;\n        for (let i = start; i < end; i++) {\n          const v = mRing[i % mRingLen];\n          if (v > best) {\n            best = v;\n            bestI = i;\n          }\n        }\n        if (bestI >= 0 && best >= 0.5 * TH1) accept(bestI, best);\n      }\n      if (mPrev1 >= TH1 && idxM - lastR >= Math.max(1, Math.round(0.2 * fs))) accept(idxM, mPrev1);\n      else {\n        NPKI = 0.125 * mPrev1 + 0.875 * NPKI;\n        TH1 = NPKI + 0.2 * (SPKI - NPKI);\n      }\n    }\n  }\n\n  return {\n    indices: peaks,\n    bandpass: bpArr,\n    differentiated: dArr,\n    squared: sArr,\n    mwi: mArr,\n  };\n\n  function accept(idxM, mVal) {\n    const delay = Math.round((W - 1) / 2 + 2);\n    const refine = Math.max(1, Math.round((opts.refineSec ?? 0.08) * fs));\n    let guess = idxM - delay;\n    if (guess < 0) guess = 0;\n    if (guess >= N) guess = N - 1;\n    const L = Math.max(0, guess - refine),\n      R = Math.min(N - 1, guess + refine);\n    let bestIdx = -1,\n      bestVal = -Infinity;\n    for (let j = L; j <= R; j++) {\n      const v = yBP[j];\n      if (v > 0 && v > bestVal) {\n        bestVal = v;\n        bestIdx = j;\n      }\n    }\n    if (bestIdx < 0) {\n      NPKI = 0.125 * mVal + 0.875 * NPKI;\n      TH1 = NPKI + 0.2 * (SPKI - NPKI);\n      return;\n    }\n    if (bestIdx > 0 && bestIdx < N - 1) {\n      const y1 = yBP[bestIdx - 1],\n        y2 = yBP[bestIdx],\n        y3 = yBP[bestIdx + 1];\n      const denom = y1 - 2 * y2 + y3;\n      if (denom !== 0) {\n        const delta = (0.5 * (y1 - y3)) / denom;\n        const cand = Math.round(bestIdx + Math.max(-1, Math.min(1, delta)));\n        if (cand >= L && cand <= R && yBP[cand] >= y2 && yBP[cand] > 0) bestIdx = cand;\n      }\n    }\n    peaks.push(bestIdx);\n    if (lastR > -Infinity) {\n      rrHist.push(bestIdx - lastR);\n      if (rrHist.length > rrWin) rrHist.shift();\n    }\n    lastR = bestIdx;\n    SPKI = 0.125 * mVal + 0.875 * SPKI;\n    TH1 = NPKI + 0.2 * (SPKI - NPKI);\n  }\n}\n","import { getTopValue } from '../../utils';\n\nexport function detectQRS_JS(inputSignal) {\n  const Fs = 400;\n  const ensembleSize = 10;\n  const noiseStdFactor = 2;\n  const maxImfs = 10;\n  const maxSiftings = 100;\n  const minPeakDistanceSec = 0.2;\n\n  const X = Array.from(inputSignal).map(Number);\n  const N = X.length;\n\n  const mean = (a) => a.reduce((s, v) => s + v, 0) / a.length;\n  const variance = (a) => {\n    const m = mean(a);\n    return a.reduce((s, v) => s + (v - m) ** 2, 0) / a.length;\n  };\n  const std = (a) => Math.sqrt(variance(a));\n  const maxAbs = (a) =>\n    getTopValue(\n      a.map((item) => Math.abs(item)),\n      'max',\n    );\n  const medianOf = (a) => {\n    const s = a.sort((x, y) => x - y);\n    const m = s.length;\n    if (!m) return 0;\n    const mid = m >> 1;\n    return m % 2 ? s[mid] : 0.5 * (s[mid - 1] + s[mid]);\n  };\n  const reflectIndex = (i, L) => {\n    if (L === 1) return 0;\n    const p = 2 * L - 2;\n    let m = ((i % p) + p) % p;\n    return m >= L ? p - m : m;\n  };\n\n  function movingMedianMirror(sig, k) {\n    if (k <= 1) return sig.slice();\n    const out = new Array(sig.length),\n      half = Math.floor((k - 1) / 2);\n    for (let i = 0; i < sig.length; i++) {\n      const w = new Array(k),\n        start = i - half;\n      for (let j = 0; j < k; j++) w[j] = sig[reflectIndex(start + j, sig.length)];\n      out[i] = medianOf(w);\n    }\n    return out;\n  }\n\n  function cubicSplineEval(xk, yk, xs) {\n    const n = xk.length;\n    if (!n) return xs.map(() => 0);\n    if (n === 1) return xs.map(() => yk[0]);\n    if (n === 2) {\n      const [x0, x1] = xk,\n        [y0, y1] = yk,\n        dy = (y1 - y0) / (x1 - x0 || 1e-12);\n      return xs.map((x) => y0 + dy * (x - x0));\n    }\n    const h = Array.from({ length: n - 1 }, (_, i) => xk[i + 1] - xk[i]),\n      alpha = new Array(n).fill(0);\n    for (let i = 1; i < n - 1; i++)\n      alpha[i] = (3 / h[i]) * (yk[i + 1] - yk[i]) - (3 / h[i - 1]) * (yk[i] - yk[i - 1]);\n    const l = new Array(n),\n      mu = new Array(n),\n      z = new Array(n);\n    l[0] = 1;\n    mu[0] = z[0] = 0;\n    for (let i = 1; i < n - 1; i++) {\n      l[i] = 2 * (xk[i + 1] - xk[i - 1]) - h[i - 1] * mu[i - 1];\n      mu[i] = h[i] / (l[i] || 1e-12);\n      z[i] = (alpha[i] - h[i - 1] * z[i - 1]) / (l[i] || 1e-12);\n    }\n    l[n - 1] = 1;\n    z[n - 1] = 0;\n    const b = new Array(n - 1),\n      c = new Array(n),\n      d = new Array(n - 1);\n    c[n - 1] = 0;\n    for (let j = n - 2; j >= 0; j--) {\n      c[j] = z[j] - mu[j] * (c[j + 1] || 0);\n      b[j] = (yk[j + 1] - yk[j]) / (h[j] || 1e-12) - (h[j] * (c[j + 1] + 2 * c[j])) / 3;\n      d[j] = (c[j + 1] - c[j]) / (3 * (h[j] || 1e-12));\n    }\n    return xs.map((x) => {\n      let j = 0;\n      if (x <= xk[0]) j = 0;\n      else if (x >= xk[n - 1]) j = n - 2;\n      else\n        for (let ii = 0; ii < n - 1; ii++)\n          if (x >= xk[ii] && x <= xk[ii + 1]) {\n            j = ii;\n            break;\n          }\n      const dx = x - xk[j];\n      return yk[j] + b[j] * dx + c[j] * dx * dx + d[j] * dx * dx * dx;\n    });\n  }\n\n  function findExtrema(sig) {\n    const maxima = [],\n      minima = [],\n      L = sig.length;\n    for (let i = 1; i < L - 1; i++) {\n      if (sig[i] > sig[i - 1] && sig[i] >= sig[i + 1]) maxima.push(i);\n      if (sig[i] < sig[i - 1] && sig[i] <= sig[i + 1]) minima.push(i);\n    }\n    if (L >= 2) {\n      if (sig[0] > sig[1]) maxima.unshift(0);\n      if (sig[0] < sig[1]) minima.unshift(0);\n      if (sig[L - 1] > sig[L - 2]) maxima.push(L - 1);\n      if (sig[L - 1] < sig[L - 2]) minima.push(L - 1);\n    }\n    return { maxima, minima };\n  }\n\n  function emd(signal, _maxImfs = 10, _maxSiftings = 100) {\n    const imfs = [],\n      N = signal.length;\n    let residue = signal.slice();\n    const tol = 0.05 * Math.max(1e-12, std(signal));\n    while (imfs.length < _maxImfs) {\n      const ex = findExtrema(residue);\n      if (ex.maxima.length + ex.minima.length < 2) break;\n      let h = residue.slice(),\n        it = 0;\n      while (it < _maxSiftings) {\n        const ex2 = findExtrema(h);\n        if (ex2.maxima.length + ex2.minima.length < 2) break;\n        const upper =\n          ex2.maxima.length >= 2\n            ? cubicSplineEval(\n                ex2.maxima,\n                ex2.maxima.map((i) => h[i]),\n                Array.from({ length: N }, (_, i) => i),\n              )\n            : Array(N).fill(ex2.maxima.length ? h[ex2.maxima[0]] : 0);\n        const lower =\n          ex2.minima.length >= 2\n            ? cubicSplineEval(\n                ex2.minima,\n                ex2.minima.map((i) => h[i]),\n                Array.from({ length: N }, (_, i) => i),\n              )\n            : Array(N).fill(ex2.minima.length ? h[ex2.minima[0]] : 0);\n        const m = new Array(N);\n        for (let i = 0; i < N; i++) m[i] = 0.5 * (upper[i] + lower[i]);\n        const hNext = new Array(N);\n        for (let i = 0; i < N; i++) hNext[i] = h[i] - m[i];\n        if (mean(m.map(Math.abs)) < tol) {\n          h = hNext;\n          break;\n        }\n        h = hNext;\n        it++;\n      }\n      imfs.push(h.slice());\n      for (let i = 0; i < N; i++) residue[i] -= h[i];\n      const exA = findExtrema(residue);\n      if (exA.maxima.length + exA.minima.length < 2) break;\n    }\n    imfs.push(residue.slice());\n    return imfs;\n  }\n\n  function gaussianRandomArray(n, s = 1) {\n    const out = new Array(n);\n    for (let i = 0; i < n; i += 2) {\n      const u1 = Math.random() || 1e-12,\n        u2 = Math.random(),\n        mag = Math.sqrt(-2 * Math.log(u1));\n      const z0 = mag * Math.cos(2 * Math.PI * u2),\n        z1 = mag * Math.sin(2 * Math.PI * u2);\n      out[i] = z0 * s;\n      if (i + 1 < n) out[i + 1] = z1 * s;\n    }\n    return out;\n  }\n\n  function ensembleEMD(signal, noiseStd, ensembleSize, _maxImfs, _maxSiftings) {\n    const N = signal.length,\n      runs = [];\n    let maxCount = 0;\n    for (let e = 0; e < ensembleSize; e++) {\n      const noise = gaussianRandomArray(N, noiseStd),\n        noisy = new Array(N);\n      for (let i = 0; i < N; i++) noisy[i] = signal[i] + noise[i];\n      const imfs = emd(noisy, _maxImfs, _maxSiftings);\n      runs.push(imfs);\n      if (imfs.length > maxCount) maxCount = imfs.length;\n    }\n    const modes = [];\n    for (let k = 0; k < maxCount; k++) {\n      const avg = new Array(N).fill(0);\n      let c = 0;\n      for (let r = 0; r < ensembleSize; r++) {\n        const imfs = runs[r];\n        if (k < imfs.length) {\n          const m = imfs[k];\n          for (let i = 0; i < N; i++) avg[i] += m[i];\n          c++;\n        }\n      }\n      if (c) for (let i = 0; i < N; i++) avg[i] /= c;\n      modes.push(avg);\n    }\n    return modes;\n  }\n\n  let X1 = X.slice();\n  const Xmean = mean(X1);\n  for (let i = 0; i < N; i++) X1[i] -= Xmean;\n  const maxabs = maxAbs(X1) || 1e-12;\n  for (let i = 0; i < N; i++) X1[i] /= maxabs;\n\n  const y1 = movingMedianMirror(X1, Math.max(1, Math.round(0.6 * Fs)));\n  const y2 = movingMedianMirror(X1, Math.max(1, Math.round(0.2 * Fs)));\n  const yy_pre = new Array(N);\n  for (let i = 0; i < N; i++) yy_pre[i] = X1[i] - 0.5 * y1[i] - 0.5 * y2[i];\n\n  const idxs = [],\n    thrIdx = 0.2 * (Math.max(yy_pre.map(Math.abs)) || 1e-12);\n  for (let i = 0; i < N; i++) if (Math.abs(yy_pre[i]) > thrIdx) idxs.push(yy_pre[i]);\n  const signProbe = idxs.length ? medianOf(idxs) : mean(yy_pre);\n  const yy = signProbe < 0 ? yy_pre.map((v) => -v) : yy_pre.slice();\n\n  const sd_val = Math.sqrt(variance(yy));\n  const modes = ensembleEMD(yy, noiseStdFactor * sd_val, ensembleSize, maxImfs, maxSiftings);\n  const K = Math.min(4, modes.length);\n  const y_signal = new Array(N).fill(0);\n  for (let m = 0; m < K; m++) for (let i = 0; i < N; i++) y_signal[i] += modes[m][i];\n\n  const y_pos = y_signal.map((v) => (v > 0 ? v : 0));\n  const posVals = y_pos.filter((v) => v > 0);\n  const mu = posVals.length ? mean(posVals) : 0;\n  const sig = posVals.length ? Math.sqrt(variance(posVals)) : 0;\n  const minPeakHeight = mu + 2 * sig;\n  const minPeakDistance = Math.round(minPeakDistanceSec * Fs);\n  const minProminence = 0.5 * sig;\n\n  function findPositivePeaks(y, minH, minD, minProm, promWin = minD) {\n    const N = y.length,\n      cand = [];\n    for (let i = 1; i < N - 1; i++)\n      if (y[i] > 0 && y[i] > y[i - 1] && y[i] >= y[i + 1] && y[i] >= minH)\n        cand.push({ idx: i, val: y[i] });\n    cand.sort((a, b) => b.val - a.val);\n    const kept = [];\n    for (const c of cand) if (!kept.some((t) => Math.abs(t - c.idx) < minD)) kept.push(c.idx);\n    const filtered = [];\n    for (const i of kept) {\n      const L = Math.max(0, i - promWin),\n        R = Math.min(N - 1, i + promWin);\n      let leftMin = y[i],\n        rightMin = y[i];\n      for (let k = L; k <= i; k++) if (y[k] < leftMin) leftMin = y[k];\n      for (let k = i; k <= R; k++) if (y[k] < rightMin) rightMin = y[k];\n      const prom = y[i] - Math.max(leftMin, rightMin);\n      if (prom >= (minProm || 0)) filtered.push({ idx: i, val: y[i], prom });\n    }\n    return filtered.sort((a, b) => a.idx - b.idx);\n  }\n\n  const peakObjs = findPositivePeaks(y_pos, minPeakHeight, minPeakDistance, minProminence);\n  const locs = peakObjs.map((p) => p.idx);\n\n  return { locs, y_signal, y_pos };\n}\n","import { detectRPeaks } from './signalConversionCMD1';\nimport { detectECGPeaksStages } from './signalConversionCMD2';\nimport { detectQRS_JS } from './signalConversionCMD3';\nexport const analyzeCMD = (signal, type, channel) => {\n  const signalTime = signal[channel].data.map((obj) => obj[0]);\n  const signalData = signal[channel].data.map((obj) => obj[1]);\n  const transformPeaks = (data) => signalTime.map((item, i) => [item, data.includes(i) ? 100 : 0]);\n  let result;\n  if (type === 1) {\n    const tempResult = detectRPeaks(signalData, 400);\n    result = { peaks: transformPeaks(tempResult), data: tempResult };\n  } else if (type === 2) {\n    const tempResult = detectECGPeaksStages(signalData);\n    result = { peaks: transformPeaks(tempResult.indices), data: tempResult.indices };\n  } else if (type === 3) {\n    const tempResult = detectQRS_JS(signalData, { Fs: 400, ensembleSize: 4, noiseStdFactor: 2 });\n    result = { peaks: transformPeaks(tempResult.locs), data: tempResult.locs };\n  }\n  return result;\n};\n","export function detectRPeaks(signal, fs) {\n  const MAX_IMFS = 10;\n  const MAX_SIFTS = 8;\n  const SD_STOP = 0.2;\n  const EPS = 1e-12;\n  const MIN_GAP = Math.max(1, Math.floor(0.1 * fs));\n  const REFINE_WIN = 3;\n  const DROP_FIRST_NOISY = 1;\n  const CAP_USE_IMFS_UPTO = 5;\n\n  const N = signal.length | 0;\n  if (N < 3) return [];\n  const x = signal instanceof Float32Array ? signal : new Float32Array(signal);\n\n  const newF32 = (n) => new Float32Array(n);\n\n  function countZeroCrossings(arr) {\n    let c = 0,\n      prev = arr[0];\n    for (let i = 1; i < N; i++) {\n      const v = arr[i];\n      if ((prev >= 0 && v < 0) || (prev < 0 && v >= 0)) c++;\n      prev = v;\n    }\n    return c;\n  }\n\n  function countExtrema(arr) {\n    let c = 0;\n    for (let i = 1; i < N - 1; i++) {\n      const a = arr[i - 1],\n        b = arr[i],\n        c0 = arr[i + 1];\n      if ((b > a && b > c0) || (b < a && b < c0)) c++;\n    }\n    return c;\n  }\n\n  function buildEnvelope(h, indices, outEnv) {\n    if (indices.length === 0) {\n      outEnv.fill(h[0]);\n      return;\n    }\n    const firstIdx = indices[0];\n    const firstVal = h[firstIdx];\n    for (let i = 0; i < firstIdx; i++) outEnv[i] = firstVal;\n    for (let k = 0; k < indices.length - 1; k++) {\n      const i1 = indices[k],\n        i2 = indices[k + 1];\n      const v1 = h[i1],\n        v2 = h[i2];\n      const len = i2 - i1;\n      const slope = (v2 - v1) / len;\n      let acc = v1;\n      outEnv[i1] = v1;\n      for (let i = i1 + 1; i < i2; i++) {\n        acc += slope;\n        outEnv[i] = acc;\n      }\n      outEnv[i2] = v2;\n    }\n    const lastIdx = indices[indices.length - 1];\n    const lastVal = h[lastIdx];\n    for (let i = lastIdx + 1; i < N; i++) outEnv[i] = lastVal;\n  }\n\n  function siftOnce(h, upperEnv, lowerEnv, meanEnv) {\n    const maxIdx = [];\n    const minIdx = [];\n    for (let i = 1; i < N - 1; i++) {\n      const a = h[i - 1],\n        b = h[i],\n        c = h[i + 1];\n      if (b > a && b > c) maxIdx.push(i);\n      else if (b < a && b < c) minIdx.push(i);\n    }\n    if (maxIdx.length + minIdx.length < 2) return false;\n\n    if (h[0] > h[1]) maxIdx.unshift(0);\n    else if (h[0] < h[1]) minIdx.unshift(0);\n    if (h[N - 1] > h[N - 2]) maxIdx.push(N - 1);\n    else if (h[N - 1] < h[N - 2]) minIdx.push(N - 1);\n\n    buildEnvelope(h, maxIdx, upperEnv);\n    buildEnvelope(h, minIdx, lowerEnv);\n    for (let i = 0; i < N; i++) {\n      meanEnv[i] = 0.5 * (upperEnv[i] + lowerEnv[i]);\n      h[i] = h[i] - meanEnv[i];\n    }\n    return true;\n  }\n\n  function sdChange(prev, curr) {\n    let s = 0.0;\n    for (let i = 0; i < N; i++) {\n      const num = prev[i] - curr[i];\n      const den = prev[i] * prev[i] + EPS;\n      s += (num * num) / den;\n    }\n    return s;\n  }\n\n  function extractIMF(residue, upperEnv, lowerEnv, meanEnv, work) {\n    work.set(residue);\n    let h = work;\n    let prev = newF32(N);\n    let okSift = true;\n\n    for (let s = 0; s < MAX_SIFTS; s++) {\n      prev.set(h);\n      okSift = siftOnce(h, upperEnv, lowerEnv, meanEnv);\n      if (!okSift) break;\n      const sd = sdChange(prev, h);\n      const ext = countExtrema(h);\n      const zc = countZeroCrossings(h);\n      const isIMFshape = Math.abs(ext - zc) <= 1;\n\n      if (sd < SD_STOP && isIMFshape) break;\n    }\n    if (!okSift) return { imf: null, residue };\n    const imf = newF32(N);\n    for (let i = 0; i < N; i++) {\n      imf[i] = h[i];\n      residue[i] = residue[i] - imf[i];\n    }\n    return { imf, residue };\n  }\n  const upperEnv = newF32(N),\n    lowerEnv = newF32(N),\n    meanEnv = newF32(N),\n    work = newF32(N);\n  let residue = newF32(N);\n  residue.set(x);\n  const imfs = [];\n\n  for (let k = 0; k < MAX_IMFS; k++) {\n    const { imf, residue: newResidue } = extractIMF(residue, upperEnv, lowerEnv, meanEnv, work);\n    residue = newResidue;\n    if (!imf) break;\n    imfs.push(imf);\n    if (countExtrema(residue) < 2) break;\n  }\n\n  if (imfs.length === 0) return [];\n\n  const K = imfs.length;\n  const useStart = Math.min(DROP_FIRST_NOISY, K - 1);\n  const useEndExclusive = Math.max(K - 1, useStart + 1);\n  const y = newF32(N);\n  let used = 0;\n  for (let idx = useStart; idx < useEndExclusive; idx++) {\n    y.set(imfs[idx], 0);\n    used = 1;\n    break;\n  }\n  for (let idx = useStart + 1; idx < useEndExclusive && used < CAP_USE_IMFS_UPTO; idx++, used++) {\n    const c = imfs[idx];\n    for (let i = 0; i < N; i++) y[i] += c[i];\n  }\n  if (used === 0) y.set(imfs[0]);\n  const candIdx = [];\n  const candAmp = [];\n  for (let i = 1; i < N - 1; i++) {\n    const a = y[i - 1],\n      b = y[i],\n      c = y[i + 1];\n    if (b > a && b > c && b > 0) {\n      candIdx.push(i);\n      candAmp.push(b);\n    }\n  }\n  if (candIdx.length === 0) return [];\n\n  let maxAmp = -Infinity;\n  for (let i = 0; i < candAmp.length; i++) if (candAmp[i] > maxAmp) maxAmp = candAmp[i];\n  const tmp = candAmp.slice().sort((u, v) => u - v);\n  const med =\n    tmp.length % 2\n      ? tmp[(tmp.length - 1) >> 1]\n      : 0.5 * (tmp[tmp.length / 2 - 1] + tmp[tmp.length / 2]);\n  const thr = Math.max(0.3 * maxAmp, 0.6 * med);\n\n  const fIdx = [];\n  const fAmp = [];\n  for (let i = 0; i < candIdx.length; i++) {\n    if (candAmp[i] >= thr) {\n      fIdx.push(candIdx[i]);\n      fAmp.push(candAmp[i]);\n    }\n  }\n  if (fIdx.length === 0) return [];\n\n  const keepIdx = [];\n  const keepAmp = [];\n  let curIdx = fIdx[0],\n    curAmp = fAmp[0];\n  for (let i = 1; i < fIdx.length; i++) {\n    const idx = fIdx[i],\n      amp = fAmp[i];\n    if (idx - curIdx < MIN_GAP) {\n      if (amp > curAmp) {\n        curIdx = idx;\n        curAmp = amp;\n      }\n    } else {\n      keepIdx.push(curIdx);\n      keepAmp.push(curAmp);\n      curIdx = idx;\n      curAmp = amp;\n    }\n  }\n  keepIdx.push(curIdx);\n  keepAmp.push(curAmp);\n  const result = [];\n  for (let k2 = 0; k2 < keepIdx.length; k2++) {\n    const center = keepIdx[k2];\n    let bestI = center;\n    let bestV = x[center];\n    const i0 = Math.max(0, center - REFINE_WIN);\n    const i1 = Math.min(N - 1, center + REFINE_WIN);\n    for (let i = i0; i <= i1; i++) {\n      const v = x[i];\n      if (v > bestV) {\n        bestV = v;\n        bestI = i;\n      }\n    }\n    if (bestV > 0) result.push(bestI);\n  }\n  result.sort((a, b) => a - b);\n  const dedup = [];\n  for (let i = 0; i < result.length; i++) {\n    if (i === 0 || result[i] !== result[i - 1]) dedup.push(result[i]);\n  }\n  return dedup;\n}\n","export function toFloat32(arr) {\n  return arr instanceof Float32Array ? arr : Float32Array.from(arr);\n}\nexport function ensureOdd(n) {\n  return n % 2 === 0 ? n + 1 : n;\n}\n\nexport function designHPBiquad(fc, fs, Q) {\n  const w0 = (2 * Math.PI * fc) / fs,\n    cosw0 = Math.cos(w0),\n    sinw0 = Math.sin(w0),\n    alpha = sinw0 / (2 * Q);\n  let b0 = (1 + cosw0) / 2,\n    b1 = -(1 + cosw0),\n    b2 = (1 + cosw0) / 2,\n    a0 = 1 + alpha,\n    a1 = -2 * cosw0,\n    a2 = 1 - alpha;\n  b0 /= a0;\n  b1 /= a0;\n  b2 /= a0;\n  a1 /= a0;\n  a2 /= a0;\n  return { b0, b1, b2, a1, a2 };\n}\nexport function designButterworthHP_SOS(fc, fs, order) {\n  if (order === 2) return [designHPBiquad(fc, fs, 1 / Math.SQRT2)];\n  const Qs = [0.5411961, 1.30656296];\n  return Qs.map((Q) => designHPBiquad(fc, fs, Q));\n}\n\nexport function biquadCascade(x, sos) {\n  let y = new Float32Array(x.length);\n  x = toFloat32(x);\n  for (let s = 0; s < sos.length; s++) {\n    const { b0, b1, b2, a1, a2 } = sos[s];\n    let z1 = 0.0,\n      z2 = 0.0;\n    for (let n = 0; n < x.length; n++) {\n      const xn = x[n];\n      const yn = b0 * xn + z1;\n      z1 = b1 * xn - a1 * yn + z2;\n      z2 = b2 * xn - a2 * yn;\n      y[n] = yn;\n    }\n    if (s < sos.length - 1) {\n      x = y;\n      y = new Float32Array(x.length);\n    }\n  }\n  return y;\n}\n\nexport function reflectPad(x, nPad) {\n  const N = x.length;\n  const out = new Float32Array(N + 2 * nPad);\n  for (let i = 0; i < nPad; i++) out[i] = 2 * x[0] - x[nPad - i];\n  out.set(x, nPad);\n  for (let i = 0; i < nPad; i++) out[nPad + N + i] = 2 * x[N - 1] - x[N - 2 - i];\n  return out;\n}\n\nexport function filtfiltBiquad(x, sos) {\n  const N = x.length;\n  const pad = Math.max(1, Math.min(3 * 2 * sos.length, N - 1));\n  const xp = reflectPad(x, pad);\n  let y = biquadCascade(xp, sos);\n  y.reverse();\n  y = biquadCascade(y, sos);\n  y.reverse();\n  return y.subarray(pad, pad + N).slice();\n}\n\nexport function designLPBiquad(fc, fs, Q) {\n  const w0 = (2 * Math.PI * fc) / fs,\n    cosw0 = Math.cos(w0),\n    sinw0 = Math.sin(w0),\n    alpha = sinw0 / (2 * Q);\n  let b0 = (1 - cosw0) / 2,\n    b1 = 1 - cosw0,\n    b2 = (1 - cosw0) / 2,\n    a0 = 1 + alpha,\n    a1 = -2 * cosw0,\n    a2 = 1 - alpha;\n  b0 /= a0;\n  b1 /= a0;\n  b2 /= a0;\n  a1 /= a0;\n  a2 /= a0;\n  return { b0, b1, b2, a1, a2 };\n}\nexport function designButterworthLP_SOS(fc, fs, order) {\n  if (order === 2) return [designLPBiquad(fc, fs, 1 / Math.SQRT2)];\n  const Qs = [0.5411961, 1.30656296];\n  return Qs.map((Q) => designLPBiquad(fc, fs, Q));\n}\n\nexport function mean(arr) {\n  let s = 0,\n    n = arr.length;\n  for (let i = 0; i < n; i++) s += arr[i];\n  return s / Math.max(1, n);\n}\nexport function stdDev(arr, center) {\n  let s2 = 0,\n    n = arr.length;\n  for (let i = 0; i < n; i++) {\n    const d = arr[i] - center;\n    s2 += d * d;\n  }\n  return Math.sqrt(s2 / Math.max(1, n));\n}\nexport function mapAbsMinus(arr, center) {\n  const out = new Float32Array(arr.length);\n  for (let i = 0; i < arr.length; i++) out[i] = Math.abs(arr[i] - center);\n  return out;\n}\n\nexport function quantile(arr, q) {\n  const n = arr.length;\n  if (n === 0) return NaN;\n  if (q <= 0) return minOf(arr);\n  if (q >= 1) return maxOf(arr);\n  const a = Float32Array.from(arr);\n  const pos = (n - 1) * q;\n  const k = Math.floor(pos);\n  const frac = pos - k;\n  const vK = selectKthInPlace(a, k);\n  if (frac === 0) return vK;\n  const vK1 = selectKthInPlace(a, k + 1);\n  return vK + (vK1 - vK) * frac;\n}\nexport function selectKthInPlace(a, k, left = 0, right = a.length - 1) {\n  while (true) {\n    if (left === right) return a[left];\n    const mid = left + ((right - left) >> 1);\n    if (a[right] < a[left]) swap(a, left, right);\n    if (a[mid] < a[left]) swap(a, mid, left);\n    if (a[right] < a[mid]) swap(a, right, mid);\n    let pivot = a[mid];\n    let i = left,\n      j = right;\n    while (i <= j) {\n      while (a[i] < pivot) i++;\n      while (a[j] > pivot) j--;\n      if (i <= j) {\n        swap(a, i, j);\n        i++;\n        j--;\n      }\n    }\n    if (k <= j) right = j;\n    else if (k >= i) left = i;\n    else return a[k];\n  }\n}\nexport function swap(a, i, j) {\n  const t = a[i];\n  a[i] = a[j];\n  a[j] = t;\n}\nexport function minOf(arr) {\n  let m = +Infinity;\n  for (let i = 0; i < arr.length; i++) if (arr[i] < m) m = arr[i];\n  return m;\n}\nexport function maxOf(arr) {\n  let m = -Infinity;\n  for (let i = 0; i < arr.length; i++) if (arr[i] > m) m = arr[i];\n  return m;\n}\n\nexport function makeSampleView(x, maxSample) {\n  const N = x.length;\n  if (N <= maxSample) return toFloat32(x);\n  const stride = Math.max(1, Math.floor(N / maxSample));\n  const start = (Math.random() * stride) | 0;\n  const M = Math.ceil((N - start) / stride);\n  const out = new Float32Array(Math.min(maxSample, M));\n  for (let i = start, j = 0; i < N && j < out.length; i += stride, j++) out[j] = x[i];\n  return out;\n}\n\nexport function diff5Symmetric(x) {\n  const N = x.length,\n    xp = reflectPad(x, 2),\n    out = new Float32Array(N);\n  for (let n = 0; n < N; n++) {\n    const i = n + 2;\n    out[n] = (-xp[i - 2] - 2 * xp[i - 1] + 2 * xp[i + 1] + xp[i + 2]) * 0.125;\n  }\n  return out;\n}\nexport function diff1Central(x) {\n  const N = x.length,\n    xp = reflectPad(x, 1),\n    out = new Float32Array(N);\n  for (let n = 0; n < N; n++) {\n    const i = n + 1;\n    out[n] = 0.5 * (xp[i + 1] - xp[i - 1]);\n  }\n  return out;\n}\n\nexport function centeredMovingAverage(x, W) {\n  if (W < 3) return toFloat32(x).slice();\n  W = ensureOdd(W);\n  const L = (W - 1) >> 1,\n    xp = reflectPad(x, L),\n    N = x.length;\n  const ps = new Float64Array(xp.length + 1);\n  for (let i = 0; i < xp.length; i++) ps[i + 1] = ps[i] + xp[i];\n  const out = new Float32Array(N);\n  for (let n = 0; n < N; n++) {\n    const s = ps[n + W] - ps[n];\n    out[n] = s / W;\n  }\n  return out;\n}\n\nexport function msToSamples(fs, ms) {\n  return Math.max(1, Math.round((ms * fs) / 1000));\n}\nexport function rrMedian(rrBuf) {\n  if (!rrBuf.length) return 0;\n  return quantile(Float32Array.from(rrBuf), 0.5);\n}\nexport function rrBufPush(rrBuf, rr) {\n  rrBuf.push(rr);\n  if (rrBuf.length > 8) rrBuf.shift();\n}\nexport function clamp(v, lo, hi) {\n  return v < lo ? lo : v > hi ? hi : v;\n}\nexport function toInt32Array(a) {\n  if (a instanceof Int32Array) return a;\n  const out = new Int32Array(a.length);\n  for (let i = 0; i < a.length; i++) out[i] = a[i] | 0;\n  return out;\n}\n\nexport function argmaxAbsInRange(arr, l, r, center) {\n  let bestIdx = l,\n    bestVal = Math.abs(arr[l]);\n  for (let j = l + 1; j <= r; j++) {\n    const v = Math.abs(arr[j]);\n    if (v > bestVal) {\n      bestVal = v;\n      bestIdx = j;\n    } else if (v === bestVal) {\n      const dj = Math.abs(j - center),\n        db = Math.abs(bestIdx - center);\n      if (dj < db || (dj === db && j < bestIdx)) bestIdx = j;\n    }\n  }\n  return bestIdx;\n}\nexport function strength(arr, i) {\n  return Math.abs(arr[i] || 0);\n}\nexport function preSlopeMag(x, idx, preW) {\n  const l = Math.max(1, idx - preW),\n    r = idx;\n  let maxd = 0;\n  for (let i = l; i <= r; i++) {\n    const d = Math.abs(x[i] - x[i - 1]);\n    if (d > maxd) maxd = d;\n  }\n  return maxd;\n}\nexport function absSlice(arr, L, R) {\n  const out = new Float32Array(R - L + 1);\n  for (let i = L, j = 0; i <= R; i++, j++) out[j] = Math.abs(arr[i]);\n  return out;\n}\nexport function sortUniqueInt32(a) {\n  const tmp = Array.from(a);\n  tmp.sort((u, v) => u - v);\n  const out = [];\n  let last = null;\n  for (let i = 0; i < tmp.length; i++) {\n    const v = tmp[i] | 0;\n    if (last === null || v !== last) {\n      out.push(v);\n      last = v;\n    }\n  }\n  return Int32Array.from(out);\n}\n\nexport function absMinus(arr, c) {\n  const o = new Float32Array(arr.length);\n  for (let i = 0; i < arr.length; i++) o[i] = Math.abs(arr[i] - c);\n  return o;\n}\nexport function argmaxInRange(arr, L, R, center) {\n  let bi = L,\n    bv = arr[L];\n  for (let j = L + 1; j <= R; j++) {\n    const v = arr[j];\n    if (\n      v > bv ||\n      (v === bv && Math.abs(j - center) < Math.abs(bi - center)) ||\n      (v === bv && Math.abs(j - center) === Math.abs(bi - center) && j < bi)\n    ) {\n      bv = v;\n      bi = j;\n    }\n  }\n  return bi;\n}\nexport function snapToHillZeroCross(arr, i0, rad) {\n  const L = Math.max(1, i0 - rad),\n    R = Math.min(arr.length - 2, i0 + rad);\n  let best = -1,\n    bestD = 1e9;\n  for (let j = L; j <= R; j++) {\n    const dL = arr[j] - arr[j - 1],\n      dR = arr[j + 1] - arr[j],\n      s2 = arr[j + 1] - 2 * arr[j] + arr[j - 1];\n    if (dL > 0 && dR <= 0 && s2 < 0) {\n      const D = Math.abs(j - i0);\n      if (D < bestD) {\n        best = j;\n        bestD = D;\n      }\n    }\n  }\n  return best >= 0 ? best : i0;\n}\nexport function positiveProminence(sig, i, W) {\n  const half = (W - 1) >> 1;\n  const L = Math.max(0, i - half),\n    R = Math.min(sig.length - 1, i + half);\n  const seg = sig.subarray ? sig.subarray(L, R + 1) : sig.slice(L, R + 1);\n  const med = quantile(seg, 0.5);\n  const mad = quantile(absMinus(seg, med), 0.5) || 0;\n  const thr = Math.max(0.03, 1.5 * mad);\n  const mid = i - L;\n  const leftMed = quantile(\n    seg.subarray ? seg.subarray(0, Math.max(1, mid)) : seg.slice(0, Math.max(1, mid)),\n    0.5,\n  );\n  const rightMed = quantile(\n    seg.subarray\n      ? seg.subarray(Math.min(seg.length - 1, mid + 1))\n      : seg.slice(Math.min(seg.length - 1, mid + 1)),\n    0.5,\n  );\n  const base = Math.max(leftMed, rightMed);\n  return sig[i] >= base + thr;\n}\nexport function sidedSlopeCheck(arr, i, preW, postW) {\n  const L = Math.max(1, i - preW),\n    R = Math.min(arr.length - 1, i + postW);\n  let up = 0,\n    nL = 0;\n  for (let j = L; j <= i; j++) {\n    const dj = arr[j] - arr[j - 1];\n    if (dj !== 0) {\n      nL++;\n      if (dj > 0) up++;\n    }\n  }\n  let dn = 0,\n    nR = 0;\n  for (let j = i + 1; j <= R; j++) {\n    const dj = arr[j] - arr[j - 1];\n    if (dj !== 0) {\n      nR++;\n      if (dj < 0) dn++;\n    }\n  }\n  return (nL ? up / nL : 0) >= 0.55 && (nR ? dn / nR : 0) >= 0.55;\n}\n","import {\n  absMinus,\n  absSlice,\n  argmaxAbsInRange,\n  argmaxInRange,\n  centeredMovingAverage,\n  clamp,\n  designButterworthHP_SOS,\n  designButterworthLP_SOS,\n  diff1Central,\n  diff5Symmetric,\n  ensureOdd,\n  filtfiltBiquad,\n  makeSampleView,\n  mapAbsMinus,\n  mean,\n  msToSamples,\n  positiveProminence,\n  preSlopeMag,\n  quantile,\n  reflectPad,\n  rrBufPush,\n  rrMedian,\n  sidedSlopeCheck,\n  snapToHillZeroCross,\n  sortUniqueInt32,\n  stdDev,\n  toFloat32,\n  toInt32Array,\n} from './utils';\n\nexport function removeBaseline(ecg, fs, opts = {}) {\n  const method = opts.method || 'hp';\n  const x = toFloat32(ecg);\n  if (x.length < 4) {\n    return opts.returnBaseline\n      ? { signal: x.slice(), baseline: new Float32Array(x.length) }\n      : x.slice();\n  }\n  if (method === 'median') {\n    const win1 = ensureOdd(\n      Math.max(3, Math.round(opts.win1Ms ? (opts.win1Ms * fs) / 1000 : 0.2 * fs)),\n    );\n    const win2 = ensureOdd(\n      Math.max(3, Math.round(opts.win2Ms ? (opts.win2Ms * fs) / 1000 : 0.6 * fs)),\n    );\n    const base1 = centeredSlidingMedian(x, win1);\n    const base2 = centeredSlidingMedian(base1, win2);\n    const y = new Float32Array(x.length);\n    for (let i = 0; i < x.length; i++) y[i] = x[i] - base2[i];\n    return opts.returnBaseline ? { signal: y, baseline: base2 } : y;\n  }\n  const fc = opts.hpHz != null ? opts.hpHz : 0.7;\n  const order = opts.order === 2 ? 2 : 4;\n  const sos = designButterworthHP_SOS(fc, fs, order);\n  const y = filtfiltBiquad(x, sos);\n  if (opts.returnBaseline) {\n    const base = new Float32Array(x.length);\n    for (let i = 0; i < x.length; i++) base[i] = x[i] - y[i];\n    return { signal: y, baseline: base };\n  }\n  return y;\n}\n\nfunction centeredSlidingMedian(x, W) {\n  if (W < 3) return x.slice();\n  W = ensureOdd(W);\n  const L = (W - 1) >> 1;\n  const xp = reflectPad(x, L);\n  const med = slidingMedianCausal(xp, W);\n  return med.subarray(0, x.length).slice();\n}\n\nfunction slidingMedianCausal(arr, W) {\n  W = ensureOdd(W);\n  const nOut = arr.length - W + 1;\n  if (nOut <= 0) return new Float32Array(0);\n  function Heap(cmp) {\n    this.cmp = cmp;\n    this.a = [];\n  }\n  Heap.prototype.size = function () {\n    return this.a.length;\n  };\n  Heap.prototype.peek = function () {\n    return this.a[0];\n  };\n  Heap.prototype.push = function (v) {\n    const a = this.a;\n    a.push(v);\n    let i = a.length - 1;\n    while (i > 0) {\n      const p = (i - 1) >> 1;\n      if (!this.cmp(a[i], a[p])) break;\n      const t = a[i];\n      a[i] = a[p];\n      a[p] = t;\n      i = p;\n    }\n  };\n  Heap.prototype.pop = function () {\n    const a = this.a;\n    const top = a[0];\n    const last = a.pop();\n    if (a.length) {\n      a[0] = last;\n      let i = 0;\n      while (true) {\n        let l = 2 * i + 1,\n          r = l + 1,\n          m = i;\n        if (l < a.length && this.cmp(a[l], a[m])) m = l;\n        if (r < a.length && this.cmp(a[r], a[m])) m = r;\n        if (m === i) break;\n        const t = a[i];\n        a[i] = a[m];\n        a[m] = t;\n        i = m;\n      }\n    }\n    return top;\n  };\n  const lower = new Heap((x, y) => x.val > y.val || (x.val === y.val && x.idx > y.idx));\n  const upper = new Heap((x, y) => x.val < y.val || (x.val === y.val && x.idx < y.idx));\n  const delayed = new Map();\n  let loSize = 0,\n    hiSize = 0;\n  function prune(heap) {\n    while (heap.size()) {\n      const top = heap.peek();\n      const cnt = delayed.get(top.idx);\n      if (!cnt) break;\n      if (cnt === 1) delayed.delete(top.idx);\n      else delayed.set(top.idx, cnt - 1);\n      heap.pop();\n    }\n  }\n  function rebalance() {\n    if (loSize > hiSize + 1) {\n      prune(lower);\n      upper.push(lower.pop());\n      loSize--;\n      hiSize++;\n      prune(lower);\n    } else if (loSize < hiSize) {\n      prune(upper);\n      lower.push(upper.pop());\n      loSize++;\n      hiSize--;\n      prune(upper);\n    }\n  }\n  function add(val, idx) {\n    if (!lower.size() || val <= lower.peek().val) {\n      lower.push({ val, idx });\n      loSize++;\n    } else {\n      upper.push({ val, idx });\n      hiSize++;\n    }\n    rebalance();\n  }\n  function remove(val, idx) {\n    delayed.set(idx, (delayed.get(idx) || 0) + 1);\n    if (lower.size() && val <= lower.peek().val) loSize--;\n    else hiSize--;\n    prune(lower);\n    prune(upper);\n    rebalance();\n  }\n  const out = new Float32Array(nOut);\n  for (let i = 0; i < W; i++) add(arr[i], i);\n  prune(lower);\n  out[0] = lower.peek().val;\n  for (let i = W; i < arr.length; i++) {\n    add(arr[i], i);\n    const outIdx = i - W;\n    remove(arr[outIdx], outIdx);\n    prune(lower);\n    out[i - W + 1] = lower.peek().val;\n  }\n  return out;\n}\n\nexport function bandpassQRS(ecg, fs, opts = {}) {\n  const hp = opts.hp != null ? opts.hp : 8;\n  const lp = opts.lp != null ? opts.lp : 40;\n  const orderHP = opts.orderHP === 2 ? 2 : 4;\n  const orderLP = opts.orderLP === 2 ? 2 : 4;\n  const x = toFloat32(ecg);\n  if (x.length < 4) return x.slice();\n  const sosHP = designButterworthHP_SOS(hp, fs, orderHP);\n  const sosLP = designButterworthLP_SOS(lp, fs, orderLP);\n  const sos = sosHP.concat(sosLP);\n  return filtfiltBiquad(x, sos);\n}\n\nexport function robustNormalize(ecg, opts = {}) {\n  const x = toFloat32(ecg);\n  const N = x.length;\n  if (!N)\n    return opts.returnStats ? { signal: new Float32Array(0), stats: {} } : new Float32Array(0);\n  const centerMode = opts.center || 'median';\n  const scaleMode = opts.scale || 'mad';\n  const maxSample = opts.maxSample != null ? opts.maxSample : 200000;\n  const sample = makeSampleView(x, maxSample);\n  const center = centerMode === 'mean' ? mean(sample) : quantile(sample, 0.5);\n  let scale,\n    stats = { centerMode, scaleMode, center };\n  if (scaleMode === 'none') scale = 1.0;\n  else if (scaleMode === 'std') scale = stdDev(sample, center);\n  else if (scaleMode === 'iqr') {\n    const q1 = quantile(sample, 0.25),\n      q3 = quantile(sample, 0.75);\n    stats.q1 = q1;\n    stats.q3 = q3;\n    scale = Math.max(1e-12, (q3 - q1) / 1.349);\n  } else if (scaleMode === 'p95') {\n    const p95 = quantile(mapAbsMinus(sample, center), 0.95);\n    stats.p95abs = p95;\n    scale = Math.max(1e-12, p95);\n  } else {\n    const mad = quantile(mapAbsMinus(sample, center), 0.5);\n    stats.mad = mad;\n    scale = Math.max(1e-12, mad * 1.4826);\n  }\n  const invS = 1.0 / (scale || 1.0);\n  const y = new Float32Array(N);\n  if (opts.clipNsigma != null && isFinite(opts.clipNsigma)) {\n    const C = Math.abs(opts.clipNsigma);\n    for (let i = 0; i < N; i++) {\n      let v = (x[i] - center) * invS;\n      if (v > C) v = C;\n      if (v < -C) v = -C;\n      y[i] = v;\n    }\n    stats.clipNsigma = C;\n  } else for (let i = 0; i < N; i++) y[i] = (x[i] - center) * invS;\n  stats.scale = scale;\n  return opts.returnStats ? { signal: y, stats } : y;\n}\n\nexport function ptFeature(xIn, fs, opts = {}) {\n  const x = toFloat32(xIn);\n  const N = x.length;\n  if (!N) return new Float32Array(0);\n  const deriv = opts.deriv || 'diff5';\n  const d = deriv === 'diff1' ? diff1Central(x) : diff5Symmetric(x);\n  for (let i = 0; i < N; i++) d[i] = d[i] * d[i];\n  const W = ensureOdd(\n    Math.max(3, Math.round(((opts.mwiMs != null ? opts.mwiMs : 150) * fs) / 1000)),\n  );\n  return centeredMovingAverage(d, W);\n}\n\nexport function adaptivePeakPick(wIn, fs, opts = {}) {\n  const w = toFloat32(wIn);\n  const N = w.length;\n  if (N < 3) return new Int32Array(0);\n  const refrSamp = msToSamples(fs, opts.refractoryMs != null ? opts.refractoryMs : 200);\n  const initLen = Math.min(\n    N,\n    Math.max(1, Math.round((opts.initWinSec != null ? opts.initWinSec : 2.0) * fs)),\n  );\n  const alpha = opts.thrAlpha != null ? opts.thrAlpha : 0.25;\n  const sbFactor = opts.searchBackFactor != null ? opts.searchBackFactor : 1.66;\n  const initSeg = w.subarray(0, initLen);\n  let NPKI = quantile(initSeg, 0.2);\n  let SPKI = quantile(initSeg, 0.9);\n  let THR = NPKI + alpha * (SPKI - NPKI);\n  const peaks = [],\n    peakVals = [];\n  let lastR = -1;\n  let subMaxIdx = -1,\n    subMaxVal = -Infinity;\n  const rrBuf = [];\n  for (let i = 1; i < N - 1; i++) {\n    if (!(w[i] > w[i - 1] && w[i] >= w[i + 1])) continue;\n    const pIdx = i,\n      pVal = w[i];\n    if (peaks.length) {\n      const rr = pIdx - lastR,\n        rrMed = rrMedian(rrBuf);\n      if (rrMed > 0 && rr > Math.round(sbFactor * rrMed)) {\n        if (subMaxIdx > lastR + refrSamp) {\n          peaks.push(subMaxIdx);\n          peakVals.push(subMaxVal);\n          rrBufPush(rrBuf, subMaxIdx - lastR);\n          lastR = subMaxIdx;\n          SPKI = 0.125 * subMaxVal + 0.875 * SPKI;\n          THR = NPKI + alpha * (SPKI - NPKI);\n          subMaxIdx = -1;\n          subMaxVal = -Infinity;\n        }\n      }\n    }\n    if (pVal > THR) {\n      if (lastR >= 0 && pIdx - lastR <= refrSamp) {\n        if (pVal > peakVals[peakVals.length - 1]) {\n          peaks[peaks.length - 1] = pIdx;\n          peakVals[peakVals.length - 1] = pVal;\n          lastR = pIdx;\n        }\n      } else {\n        peaks.push(pIdx);\n        peakVals.push(pVal);\n        if (lastR >= 0) rrBufPush(rrBuf, pIdx - lastR);\n        lastR = pIdx;\n      }\n      SPKI = 0.125 * pVal + 0.875 * SPKI;\n      THR = NPKI + alpha * (SPKI - NPKI);\n      subMaxIdx = -1;\n      subMaxVal = -Infinity;\n    } else {\n      NPKI = 0.125 * pVal + 0.875 * NPKI;\n      THR = NPKI + alpha * (SPKI - NPKI);\n      if (pVal > subMaxVal) {\n        subMaxVal = pVal;\n        subMaxIdx = pIdx;\n      }\n    }\n  }\n  return Int32Array.from(peaks);\n}\n\nexport function refineOnRaw(xRaw, candIdx, fs, opts = {}) {\n  const x = toFloat32(xRaw);\n  const N = x.length;\n  const idxIn = toInt32Array(candIdx);\n  const HALF = msToSamples(fs, opts.winMs != null ? opts.winMs : 75);\n  const MICRO = Math.max(1, opts.microWin != null ? opts.microWin : 3);\n  const PRE = msToSamples(fs, 40);\n  const POST = msToSamples(fs, 40);\n  const MADW = Math.max(21, msToSamples(fs, 200) | 1);\n  const ZC_WIN = Math.max(2, msToSamples(fs, 12));\n  const hasBP = opts.xBandpass && opts.xBandpass.length === N;\n  const ref = hasBP ? opts.xBandpass : x;\n  const out = [];\n  for (let k = 0; k < idxIn.length; k++) {\n    const c = clamp(idxIn[k], 0, N - 1);\n    const L = Math.max(0, c - HALF),\n      R = Math.min(N - 1, c + HALF);\n    const rough = argmaxInRange(ref, L, R, c);\n    const l2 = Math.max(L, rough - MICRO),\n      r2 = Math.min(R, rough + MICRO);\n    let i = argmaxInRange(x, l2, r2, rough);\n    i = snapToHillZeroCross(ref, i, ZC_WIN);\n    if (i < 1 || i > N - 2) continue;\n    if (!positiveProminence(x, i, MADW)) continue;\n    if (!sidedSlopeCheck(ref, i, PRE, POST)) continue;\n    out.push(i);\n  }\n  return Int32Array.from(out);\n}\n\nexport function rrPostprocess(xRef, rIdxIn, fs, opts = {}) {\n  const x = xRef instanceof Float32Array ? xRef : Float32Array.from(xRef);\n  let r = sortUniqueInt32(rIdxIn);\n  const N = x.length;\n  if (!r.length) return r;\n  const feat = opts.feat && opts.feat.length === N ? opts.feat : null;\n  const refr = msToSamples(fs, opts.refractoryMs != null ? opts.refractoryMs : 200);\n  const minRR = msToSamples(fs, opts.minRRMs != null ? opts.minRRMs : 240);\n  const tWin = msToSamples(fs, opts.tSuppressMs != null ? opts.tSuppressMs : 200);\n  const preW = msToSamples(fs, opts.preSlopeMs != null ? opts.preSlopeMs : 40);\n  const frac = opts.tSlopeFrac != null ? opts.tSlopeFrac : 0.4;\n  const sbF = opts.sbFactor != null ? opts.sbFactor : 1.5;\n  const sbK = opts.sbK != null ? opts.sbK : 3.0;\n\n  {\n    const kept = [];\n    const base = feat || x;\n    let last = r[0];\n    for (let i = 1; i < r.length; i++) {\n      const cur = r[i];\n      if (cur - last < minRR) last = base[last] >= base[cur] ? last : cur;\n      else {\n        kept.push(last);\n        last = cur;\n      }\n    }\n    kept.push(last);\n    r = Int32Array.from(kept);\n  }\n  if (r.length <= 1) return r;\n\n  {\n    const kept = [r[0]];\n    for (let i = 1; i < r.length; i++) {\n      const prev = kept[kept.length - 1],\n        cur = r[i];\n      if (cur - prev <= tWin) {\n        const sPrev = preSlopeMag(x, prev, preW),\n          sCur = preSlopeMag(x, cur, preW);\n        if (sCur < frac * sPrev) continue;\n      }\n      kept.push(cur);\n    }\n    r = Int32Array.from(kept);\n  }\n  if (r.length <= 1) return r;\n\n  {\n    const base = feat || x;\n    const out = [r[0]];\n    const rrBuf = [];\n    for (let i = 1; i < r.length; i++) {\n      const prev = out[out.length - 1],\n        cur = r[i],\n        rr = cur - prev;\n      const rrMed = rrMedian(rrBuf),\n        needSB = rrMed > 0 && rr > Math.round(sbF * rrMed);\n      if (needSB) {\n        const L = Math.max(prev + refr, prev + 1),\n          R = Math.min(cur - refr, cur - 1);\n        if (R > L + 2) {\n          const mid = (L + R) >> 1;\n          let ins = argmaxInRange(base, L, R, mid);\n          ins = snapToHillZeroCross(base, ins, Math.max(2, msToSamples(fs, 12)));\n          if (positiveProminence(base, ins, Math.max(21, msToSamples(fs, 200) | 1))) {\n            const seg = base.subarray ? base.subarray(L, R + 1) : base.slice(L, R + 1);\n            const med = quantile(seg, 0.5);\n            const mad = quantile(absMinus(seg, med), 0.5);\n            const thr = med + sbK * (mad || 0);\n            if (base[ins] > thr) {\n              out.push(ins);\n              rrBufPush(rrBuf, ins - prev);\n              rrBufPush(rrBuf, cur - ins);\n              out.push(cur);\n              continue;\n            }\n          }\n        }\n      }\n      rrBufPush(rrBuf, rr);\n      out.push(cur);\n    }\n    r = sortUniqueInt32(out);\n  }\n  return r;\n}\n\nexport function tkeoFeature(xIn, fs, opts = {}) {\n  const x = toFloat32(xIn);\n  const N = x.length;\n  if (!N) return new Float32Array(0);\n  const xp = reflectPad(x, 1);\n  const u = new Float32Array(N);\n  for (let n = 0; n < N; n++) {\n    const a = xp[n + 1],\n      prev = xp[n],\n      next = xp[n + 2];\n    u[n] = Math.abs(a * a - prev * next);\n  }\n  const W = ensureOdd(\n    Math.max(3, Math.round(((opts.winMs != null ? opts.winMs : 120) * fs) / 1000)),\n  );\n  return centeredMovingAverage(u, W);\n}\n\nexport function tkeoCandidatePeaks(xIn, fs, opts = {}) {\n  const s = tkeoFeature(xIn, fs, { winMs: opts.winMs });\n  const sample = makeSampleView(s, opts.maxSample != null ? opts.maxSample : 200000);\n  const med = quantile(sample, 0.5);\n  const mad = quantile(mapAbsMinus(sample, med), 0.5);\n  const thr = med + (opts.k != null ? opts.k : 4.0) * (mad || 0);\n  const N = s.length,\n    refr = msToSamples(fs, opts.refractoryMs != null ? opts.refractoryMs : 200);\n  const peaks = [],\n    peakVals = [];\n  let last = -1;\n  for (let i = 1; i < N - 1; i++) {\n    if (!(s[i] > s[i - 1] && s[i] >= s[i + 1])) continue;\n    if (s[i] < thr) continue;\n    if (last >= 0 && i - last <= refr) {\n      if (s[i] > peakVals[peakVals.length - 1]) {\n        peaks[peaks.length - 1] = i;\n        peakVals[peakVals.length - 1] = s[i];\n        last = i;\n      }\n    } else {\n      peaks.push(i);\n      peakVals.push(s[i]);\n      last = i;\n    }\n  }\n  const idx = Int32Array.from(peaks);\n  return opts.returnFeature ? { indices: idx, feature: s, thr } : idx;\n}\n\nexport function fuseCandidates(lists, fs, opts = {}) {\n  const tol = msToSamples(fs, opts.mergeTolMs != null ? opts.mergeTolMs : 100);\n  const feats = Array.isArray(opts.feats) ? opts.feats : null;\n  const xRef = opts.xRef || null;\n  const all = [];\n  for (let s = 0; s < lists.length; s++) {\n    const arr = sortUniqueInt32(lists[s] || []);\n    for (let k = 0; k < arr.length; k++) {\n      const idx = arr[k];\n      const score =\n        feats && feats[s] && feats[s].length > idx\n          ? Math.abs(feats[s][idx])\n          : xRef && xRef.length > idx\n          ? Math.abs(xRef[idx])\n          : 0;\n      all.push({ idx, src: s, score });\n    }\n  }\n  if (!all.length)\n    return opts.returnMeta ? { indices: new Int32Array(0), meta: [] } : new Int32Array(0);\n  all.sort((a, b) => a.idx - b.idx);\n  const out = [],\n    meta = [];\n  let group = [all[0]];\n  for (let i = 1; i < all.length; i++) {\n    const prev = group[group.length - 1],\n      cur = all[i];\n    if (cur.idx - prev.idx <= tol) group.push(cur);\n    else {\n      flushGroup(group, out, meta);\n      group = [cur];\n    }\n  }\n  flushGroup(group, out, meta);\n  const indices = Int32Array.from(out);\n  return opts.returnMeta ? { indices, meta } : indices;\n\n  function flushGroup(g, out, meta) {\n    if (!g || !g.length) return;\n    let best = g[0];\n    for (let j = 1; j < g.length; j++) if (g[j].score > best.score) best = g[j];\n    out.push(best.idx);\n    if (opts.returnMeta) {\n      const sources = new Set();\n      for (const e of g) sources.add(e.src);\n      meta.push({\n        i: best.idx,\n        votes: Array.from(sources).length,\n        sources: Array.from(sources).sort((a, b) => a - b),\n      });\n    }\n  }\n}\n\nexport function scoreConfidence(rIdxIn, ctx, fs, opts = {}) {\n  const r = sortUniqueInt32(rIdxIn);\n  const M = r.length;\n  const xRef = toFloat32(ctx.xRef || []);\n  const wPT = ctx.wPT ? toFloat32(ctx.wPT) : null;\n  const sTK = ctx.sTKEO ? toFloat32(ctx.sTKEO) : null;\n  const meta = Array.isArray(ctx.meta) ? ctx.meta : null;\n  const N = xRef.length;\n  if (!M) return [];\n  const featWin = msToSamples(fs, opts.featWinMs != null ? opts.featWinMs : 800);\n  const ampWin = msToSamples(fs, opts.ampWinMs != null ? opts.ampWinMs : 800);\n  const voteTol = msToSamples(fs, opts.voteTolMs != null ? opts.voteTolMs : 60);\n  const kVote = opts.kVote != null ? opts.kVote : 3.0;\n  const W = Object.assign({ energy: 0.5, votes: 0.25, rr: 0.25 }, opts.weights || {});\n  const wsum = Math.max(1e-12, W.energy + W.votes + W.rr);\n  W.energy /= wsum;\n  W.votes /= wsum;\n  W.rr /= wsum;\n  const Z = Object.assign({ z0: 2.0, zMax: 8.0, tauRR: 1.0 }, opts.z || {});\n  const eps = 1e-12;\n\n  const rr = [];\n  for (let i = 1; i < M; i++) rr.push(r[i] - r[i - 1]);\n  const rrArr = Float32Array.from(rr);\n  const rrMed = rrArr.length ? quantile(rrArr, 0.5) : 0;\n  const rrMAD = rrArr.length ? quantile(mapAbsMinus(rrArr, rrMed), 0.5) : 0;\n  const rrMADs = rrMAD * 1.4826 || (10 * fs) / 1000;\n\n  function clip01(v) {\n    return v < 0 ? 0 : v > 1 ? 1 : v;\n  }\n  function zToScoreLinear(z, z0, zMax) {\n    return clip01((z - z0) / Math.max(1e-6, zMax - z0));\n  }\n  function devToScoreGaussian(zdev, tau) {\n    return Math.exp(-0.5 * Math.pow(zdev / Math.max(1e-6, tau), 2));\n  }\n  function nearestMetaVotes(meta, idx, tolSamp) {\n    if (!meta) return -1;\n    let best = -1,\n      bestD = tolSamp + 1;\n    for (let j = 0; j < meta.length; j++) {\n      const d = Math.abs((meta[j].i | 0) - idx);\n      if (d <= tolSamp && d < bestD) {\n        bestD = d;\n        best = j;\n      }\n    }\n    return best >= 0 ? Math.min(2, Math.max(0, meta[best].votes | 0)) : -1;\n  }\n  function localZAt(arr, idx, halfWin, useAbs) {\n    if (!arr || !arr.length) return 0;\n    const L = Math.max(0, idx - halfWin),\n      R = Math.min(arr.length - 1, idx + halfWin);\n    if (R <= L) return 0;\n    const seg = useAbs\n      ? absSlice(arr, L, R)\n      : Float32Array.from(arr.subarray ? arr.subarray(L, R + 1) : arr.slice(L, R + 1));\n    const med = quantile(seg, 0.5);\n    const mad = quantile(mapAbsMinus(seg, med), 0.5) * 1.4826 || 1e-9;\n    const val = useAbs ? Math.abs(arr[idx]) : arr[idx];\n    return (val - med) / mad;\n  }\n  function voteFromFeat(feat, idx, halfWin, k) {\n    if (!feat || !feat.length) return 0;\n    const L = Math.max(0, idx - halfWin),\n      R = Math.min(feat.length - 1, idx + halfWin);\n    const j = argmaxAbsInRange(feat, L, R, idx);\n    const seg = absSlice(feat, L, R);\n    const med = quantile(seg, 0.5);\n    const mad = quantile(mapAbsMinus(seg, med), 0.5);\n    const thr = med + k * (mad || 0);\n    return Math.abs(feat[j]) > thr ? 1 : 0;\n  }\n\n  const out = new Array(M);\n  for (let k = 0; k < M; k++) {\n    const idx = r[k];\n    let ptScore = 0,\n      tkScore = 0;\n    const featHalf = Math.max(1, Math.floor(featWin / 2));\n    if (wPT && wPT.length) {\n      const j = argmaxAbsInRange(\n        wPT,\n        Math.max(0, idx - featHalf),\n        Math.min(wPT.length - 1, idx + featHalf),\n        idx,\n      );\n      const z = localZAt(wPT, j, featHalf, false);\n      ptScore = zToScoreLinear(Math.abs(z), Z.z0, Z.zMax);\n    }\n    if (sTK && sTK.length) {\n      const j = argmaxAbsInRange(\n        sTK,\n        Math.max(0, idx - featHalf),\n        Math.min(sTK.length - 1, idx + featHalf),\n        idx,\n      );\n      const z = localZAt(sTK, j, featHalf, false);\n      tkScore = zToScoreLinear(Math.abs(z), Z.z0, Z.zMax);\n    }\n    const featScore = Math.max(ptScore, tkScore);\n    const ampHalf = Math.max(1, Math.floor(ampWin / 2));\n    const zAmp = localZAt(xRef, idx, ampHalf, true);\n    const ampScore = zToScoreLinear(Math.abs(zAmp), Z.z0, Z.zMax);\n    const energy = 0.7 * featScore + 0.3 * ampScore;\n\n    let votes = -1;\n    if (meta) {\n      const v = nearestMetaVotes(meta, idx, voteTol);\n      if (v >= 0) votes = v;\n    }\n    if (votes < 0) {\n      const half = Math.max(1, Math.floor(msToSamples(fs, 60) / 2));\n      let v = 0;\n      if (wPT) v += voteFromFeat(wPT, idx, half, kVote);\n      if (sTK) v += voteFromFeat(sTK, idx, half, kVote);\n      votes = Math.min(2, v);\n    }\n    const voteScore = votes / 2;\n    const rrPrev = k > 0 ? r[k] - r[k - 1] : NaN;\n    const rrNext = k < M - 1 ? r[k + 1] - r[k] : NaN;\n    const devPrev = isFinite(rrPrev) ? Math.abs(rrPrev - rrMed) / (rrMADs + eps) : Infinity;\n    const devNext = isFinite(rrNext) ? Math.abs(rrNext - rrMed) / (rrMADs + eps) : Infinity;\n    const devZ = Math.min(devPrev, devNext);\n    const rrScore = isFinite(devZ) ? devToScoreGaussian(devZ, Z.tauRR) : 0.7;\n    const conf = Math.max(0, Math.min(1, W.energy * energy + W.votes * voteScore + W.rr * rrScore));\n    out[k] = {\n      i: idx,\n      tMs: (idx * 1000) / fs,\n      conf,\n      parts: { energy, votes: voteScore, rr: rrScore },\n      votes,\n    };\n  }\n  return out;\n}\n\nexport function notch(ecg, fs, opts = {}) {\n  const f0 = opts.f0 != null ? opts.f0 : 50;\n  const Q = opts.Q != null ? opts.Q : 30;\n  const order = opts.order === 4 ? 4 : 2;\n  if (!(fs > 0)) throw new Error('notch: fs must be > 0');\n  if (!(f0 > 0 && f0 < fs * 0.5)) throw new Error('notch: f0 must be in (0, Nyquist)');\n  const x = toFloat32(ecg);\n  if (x.length < 4) return x.slice();\n  const sos = designNotch_SOS(f0, fs, Q, order);\n  return filtfiltBiquad(x, sos);\n}\n\nfunction designNotchBiquad(f0, fs, Q) {\n  const w0 = (2 * Math.PI * f0) / fs,\n    cosw0 = Math.cos(w0),\n    sinw0 = Math.sin(w0);\n  const alpha = sinw0 / (2 * Q);\n  let b0 = 1,\n    b1 = -2 * cosw0,\n    b2 = 1,\n    a0 = 1 + alpha,\n    a1 = -2 * cosw0,\n    a2 = 1 - alpha;\n  b0 /= a0;\n  b1 /= a0;\n  b2 /= a0;\n  a1 /= a0;\n  a2 /= a0;\n  return { b0, b1, b2, a1, a2 };\n}\nfunction designNotch_SOS(f0, fs, Q, order) {\n  if (order === 4) return [designNotchBiquad(f0, fs, Q), designNotchBiquad(f0, fs, Q)];\n  return [designNotchBiquad(f0, fs, Q)];\n}\n\nexport function keepHillsOnlyV2(xRefIn, rIdxIn, fs) {\n  const LOCAL_MS = 8,\n    PRE_MS = 40,\n    POST_MS = 40,\n    DER_MS = 12,\n    MAD_MS = 200;\n  const RISE_RATIO = 0.55,\n    FALL_RATIO = 0.55,\n    PROM_FLOOR = 0.03,\n    PROM_KMAD = 1.5;\n  const x = toFloat32(xRefIn);\n  const idx = sortUniqueInt32(rIdxIn);\n  const N = x.length;\n  if (!N || !idx.length) return new Int32Array(0);\n  const Wloc = Math.max(1, msToSamples(fs, LOCAL_MS));\n  const Lpre = Math.max(1, msToSamples(fs, PRE_MS));\n  const Rpost = Math.max(1, msToSamples(fs, POST_MS));\n  const Wder = Math.max(3, ensureOdd(msToSamples(fs, DER_MS)));\n  const Wmad = Math.max(21, ensureOdd(msToSamples(fs, MAD_MS)));\n  const d = smoothDiff(x, Wder);\n  const out = [];\n  for (let k = 0; k < idx.length; k++) {\n    const i = idx[k] | 0;\n    if (i <= 0 || i >= N - 1) continue;\n    const Lm = Math.max(0, i - Wloc),\n      Rm = Math.min(N - 1, i + Wloc);\n    if (!isLocalMax(x, i, Lm, Rm)) continue;\n    const Ll = Math.max(1, i - Lpre),\n      Rr = Math.min(N - 1, i + Rpost);\n    let upPos = 0,\n      upTot = 0;\n    for (let j = Ll; j <= i; j++) {\n      const dj = d[j];\n      if (dj !== 0) {\n        upTot++;\n        if (dj > 0) upPos++;\n      }\n    }\n    let dnNeg = 0,\n      dnTot = 0;\n    for (let j = i + 1; j <= Rr; j++) {\n      const dj = d[j];\n      if (dj !== 0) {\n        dnTot++;\n        if (dj < 0) dnNeg++;\n      }\n    }\n    const fracUp = upTot ? upPos / upTot : 0,\n      fracDn = dnTot ? dnNeg / dnTot : 0;\n    if (fracUp < RISE_RATIO || fracDn < FALL_RATIO) continue;\n    const Lm2 = Math.max(0, i - ((Wmad - 1) >> 1)),\n      Rm2 = Math.min(N - 1, i + ((Wmad - 1) >> 1));\n    const seg = x.subarray ? x.subarray(Lm2, Rm2 + 1) : x.slice(Lm2, Rm2 + 1);\n    const med = quantile(seg, 0.5);\n    const mad = quantile(absMinus(seg, med), 0.5);\n    const promThr = Math.max(PROM_FLOOR, PROM_KMAD * (mad || 0));\n    const mid = i - Lm2;\n    const leftMed = quantile(\n      seg.subarray ? seg.subarray(0, Math.max(1, mid)) : seg.slice(0, Math.max(1, mid)),\n      0.5,\n    );\n    const rightMed = quantile(\n      seg.subarray\n        ? seg.subarray(Math.min(seg.length - 1, mid + 1))\n        : seg.slice(Math.min(seg.length - 1, mid + 1)),\n      0.5,\n    );\n    const base = Math.max(leftMed, rightMed);\n    if (x[i] - base < promThr) continue;\n    out.push(i);\n  }\n  return Int32Array.from(out);\n\n  function isLocalMax(arr, i, L, R) {\n    const v = arr[i];\n    for (let j = L; j <= R; j++) if (arr[j] > v) return false;\n    return true;\n  }\n  function smoothDiff(x, W) {\n    const N = x.length,\n      L = (W - 1) >> 1,\n      xp = reflectPad(x, L),\n      out = new Float32Array(N);\n    for (let n = 0; n < N; n++) {\n      const i = n + L;\n      let s = 0;\n      for (let k = 1; k <= L; k++) s += xp[i + k] - xp[i - k];\n      out[n] = s / W;\n    }\n    return out;\n  }\n}\n","import {\n  adaptivePeakPick,\n  bandpassQRS,\n  fuseCandidates,\n  keepHillsOnlyV2,\n  ptFeature,\n  refineOnRaw,\n  removeBaseline,\n  robustNormalize,\n  rrPostprocess,\n  tkeoCandidatePeaks,\n  tkeoFeature,\n} from './signalConversionGPT';\nimport { toFloat32 } from './utils';\n\nexport function detectRPeaks(signal, channel) {\n  const fs = 400;\n  const signalData = signal[channel].data.map((item) => item[1]);\n  const signalTime = signal[channel].data.map((item) => item[0]);\n  const x0 = toFloat32(signalData);\n  const xBaseRemoved = removeBaseline(x0, fs, { method: 'hp' });\n  const xBP = bandpassQRS(xBaseRemoved, fs, { hp: 8, lp: 40 });\n  const xNR = robustNormalize(xBP, {}).signal || robustNormalize(xBP, {});\n  const wPT = ptFeature(xNR, fs, {});\n  const sTKEO = tkeoFeature(xNR, fs, {});\n  const candPT = adaptivePeakPick(wPT, fs, {});\n  const candTK = tkeoCandidatePeaks(xNR, fs, Object.assign({ returnFeature: false }, {}));\n  const fusedMeta = fuseCandidates([candPT, candTK], fs, {\n    feats: [wPT, sTKEO],\n    xRef: xNR,\n    mergeTolMs: 100,\n    returnMeta: true,\n  });\n  const fusedIdx = fusedMeta.indices;\n  const refined = refineOnRaw(x0, fusedIdx, fs, { xBandpass: xBP, ...{} });\n  const rr = rrPostprocess(xNR, refined, fs, { feat: wPT, ...{} });\n  const rClean = keepHillsOnlyV2(xNR, rr, fs);\n  return {\n    series: signalTime.map((item, i) => [item, rClean.includes(i) ? 100 : 0]),\n    data: Array.from(rClean),\n  };\n}\n","export function zeros(n) {\n  return new Array(n).fill(0);\n}\n\nexport function sign(x) {\n  if (x === 0) return 0;\n  return x > 0 ? 1 : -1;\n}\n\nexport function find(arr, predicate) {\n  const idx = [];\n  if (typeof predicate === 'function') {\n    for (let i = 0; i < arr.length; i++) if (predicate(arr[i], i, arr)) idx.push(i);\n  } else {\n    for (let i = 0; i < arr.length; i++) if (arr[i]) idx.push(i);\n  }\n  return idx;\n}\n\nexport function diff(arr) {\n  if (!Array.isArray(arr) || arr.length === 0) return [];\n  const out = new Array(arr.length - 1);\n  for (let i = 0; i < arr.length - 1; i++) out[i] = arr[i + 1] - arr[i];\n  return out;\n}\n\nexport function conv(x, h) {\n  const N = x.length,\n    M = h.length;\n  const y = zeros(N + M - 1);\n  for (let n = 0; n < y.length; n++) {\n    let acc = 0;\n    const kmin = Math.max(0, n - (M - 1));\n    const kmax = Math.min(n, N - 1);\n    for (let k = kmin; k <= kmax; k++) {\n      acc += x[k] * h[n - k];\n    }\n    y[n] = acc;\n  }\n  return y;\n}\n\nfunction hamming(N) {\n  const win = new Array(N);\n  for (let n = 0; n < N; n++) {\n    win[n] = 0.54 - 0.46 * Math.cos((2 * Math.PI * n) / (N - 1));\n  }\n  return win;\n}\n\nfunction sinc(x) {\n  if (x === 0) return 1;\n  const pix = Math.PI * x;\n  return Math.sin(pix) / pix;\n}\n\nexport function fir1Bandpass(order, wl, wh, window = 'hamming') {\n  if (!Array.isArray(wl)) {\n    wh = arguments[2];\n    window = arguments[3] ?? 'hamming';\n  }\n  const Wl = Array.isArray(wl) ? wl[0] : wl;\n  const Wh = Array.isArray(wl) ? wl[1] : wh;\n\n  const N = order + 1;\n  const M = order / 2;\n  const win = window === 'hamming' ? hamming(N) : hamming(N);\n  const h = new Array(N);\n  for (let n = 0; n < N; n++) {\n    const k = n - M;\n    const ideal = 2 * Wh * sinc(2 * Wh * k) - 2 * Wl * sinc(2 * Wl * k);\n    h[n] = ideal * win[n];\n  }\n  return h;\n}\n\nexport function designBandpassForECG({ A = 26, fs = 400, f1 = 5, f2 = 30 } = {}) {\n  const nyq = fs / 2;\n  const wl = f1 / nyq;\n  const wh = f2 / nyq;\n  return fir1Bandpass(A, [wl, wh]);\n}\n\nconst A = 26;\nconst fs = 400;\nexport const bp = designBandpassForECG({ A, fs, f1: 5, f2: 30 });\n\nexport function removeGroupDelayAfterConv(fullConv, A_even_order) {\n  const delay = A_even_order / 2;\n  return fullConv.slice(delay, fullConv.length - delay);\n}\n","import { getTopValue } from '../../utils';\r\nimport { conv, designBandpassForECG, removeGroupDelayAfterConv, sign, zeros } from './utils';\r\n\r\nexport function processSignal(ecg, fs = 400) {\r\n  const A = 26;\r\n  const gain = 4;\r\n  const lambda = 0.99;\r\n  const bp = designBandpassForECG({ A, fs, f1: 5, f2: 30 });\r\n  const filter_signal_delay = conv(bp, ecg);\r\n  const filter_signal = removeGroupDelayAfterConv(filter_signal_delay, A);\r\n  const nonlinear = filter_signal.map((v) => sign(v) * v ** 2);\r\n  const K = zeros(nonlinear.length);\r\n  for (let j = 0; j < nonlinear.length - 1; j++) {\r\n    K[j + 1] = lambda * K[j] + (1 - lambda) * gain * Math.abs(nonlinear[j + 1]);\r\n  }\r\n  const b = K.map((v, j) => (j % 2 === 0 ? 1 : -1) * v);\r\n  const new_signal = nonlinear.map((v, i) => v + b[i]);\r\n  return {\r\n    filter_signal: filter_signal,\r\n    nonlinear: nonlinear,\r\n    new_signal: new_signal,\r\n  };\r\n}\r\n\r\nexport function getFinalResult(new_signal, nonlinear) {\r\n  const d = new Array(new_signal.length).fill(0);\r\n\r\n  for (let j = 0; j < new_signal.length - 1; j++) {\r\n    d[j + 1] = 0.5 * Math.abs(Math.sign(new_signal[j + 1]) - Math.sign(new_signal[j]));\r\n  }\r\n\r\n  const lambda2 = 0.99;\r\n  const D = new Array(new_signal.length).fill(0);\r\n\r\n  for (let j = 0; j < new_signal.length - 1; j++) {\r\n    D[j + 1] = lambda2 * D[j] + (1 - lambda2) * d[j + 1];\r\n  }\r\n\r\n  const lambda3 = 0.97;\r\n  const threshold = new Array(new_signal.length).fill(0);\r\n\r\n  for (let j = 0; j < new_signal.length - 1; j++) {\r\n    threshold[j + 1] = lambda3 * threshold[j] + (1 - lambda3) * D[j + 1];\r\n  }\r\n\r\n  const positive = new Array(D.length).fill(0);\r\n  const negative = new Array(D.length).fill(0);\r\n\r\n  for (let j = 0; j < d.length; j++) {\r\n    if (d[j] < threshold[j]) {\r\n      positive[j] = 1;\r\n    } else {\r\n      negative[j] = 1;\r\n    }\r\n  }\r\n  const locs_pos = [];\r\n  const locs_neg = [];\r\n  for (let j = 0; j < positive.length; j++) {\r\n    if (positive[j] === 1) locs_pos.push(j);\r\n    if (negative[j] === 1) locs_neg.push(j);\r\n  }\r\n\r\n  const difference_pos = [];\r\n  for (let i = 1; i < locs_pos.length; i++) {\r\n    difference_pos.push(locs_pos[i] - locs_pos[i - 1]);\r\n  }\r\n\r\n  const difference_neg = [];\r\n  for (let i = 1; i < locs_neg.length; i++) {\r\n    difference_neg.push(locs_neg[i] - locs_neg[i - 1]);\r\n  }\r\n\r\n  const ind_pos = [];\r\n  difference_pos.forEach((diff, i) => {\r\n    if (diff > 1) ind_pos.push(i);\r\n  });\r\n\r\n  const ind_neg = [];\r\n\r\n  difference_neg.forEach((diff, i) => {\r\n    if (diff > 1) ind_neg.push(i);\r\n  });\r\n\r\n  const upper_limit = ind_pos.map((i) => locs_pos[i + 1]);\r\n  const lower_limit = ind_neg.map((i) => locs_neg[i + 1]);\r\n\r\n  const event = [];\r\n\r\n  for (let j = 0; j < upper_limit.length; j++) {\r\n    event.push([lower_limit[j], upper_limit[j]]);\r\n  }\r\n  const new_event = [];\r\n  const dist_event = [];\r\n\r\n  for (let j = 0; j < event.length - 1; j++) {\r\n    dist_event.push(event[j + 1][0] - event[j][1]);\r\n\r\n    if (dist_event[j] <= 30) {\r\n      new_event.push([event[j][0], event[j + 1][1]]);\r\n    } else {\r\n      new_event.push(event[j]);\r\n      if (j === event.length - 2) {\r\n        new_event.push(event[event.length - 1]);\r\n      }\r\n    }\r\n  }\r\n\r\n  const new_new_event = [];\r\n  const new_dist_event = [];\r\n  for (let j = 0; j < new_event.length - 1; j++) {\r\n    new_dist_event.push(new_event[j + 1][0] - new_event[j][1]);\r\n\r\n    new_new_event.push(new_event[j]);\r\n    if (j === new_event.length - 2) {\r\n      new_new_event.push(new_event[new_event.length - 1]);\r\n    }\r\n  }\r\n  const new_new_event_filtered = new_new_event.filter((item) => item !== null);\r\n  for (let j = 0; j < new_new_event.length - 1; j++) {\r\n    if (new_new_event_filtered[j][1] === new_new_event_filtered[j + 1][1]) {\r\n      new_new_event[j + 1] = null;\r\n    }\r\n  }\r\n\r\n  const filtered_events = new_new_event.filter((e) => e !== null);\r\n\r\n  const final_event = [];\r\n  for (let j = 0; j < filtered_events.length; j++) {\r\n    const start = filtered_events[j][0];\r\n    const end = filtered_events[j][1];\r\n    const event_size = end - start;\r\n\r\n    if (event_size >= 30) {\r\n      final_event.push([start, end]);\r\n    }\r\n  }\r\n\r\n  const abs_max = [];\r\n  const abs_min = [];\r\n  for (let j = 0; j < final_event.length; j++) {\r\n    const [start, end] = final_event[j];\r\n    const segment = nonlinear.slice(start, end + 1).filter((item) => item > 0);\r\n    abs_max.push(getTopValue(segment, 'max'));\r\n    abs_min.push(getTopValue(segment, 'min'));\r\n  }\r\n\r\n  const RR_amp = [];\r\n  for (let j = 0; j < final_event.length; j++) {\r\n    if (abs_min[j] - abs_max[j] > 10) {\r\n      RR_amp.push(abs_min[j]);\r\n    } else {\r\n      RR_amp.push(abs_max[j]);\r\n    }\r\n  }\r\n\r\n  // const abs_nonlinear = nonlinear.map(Math.abs);  !!!!!!\r\n  const abs_nonlinear = nonlinear.map((item) => (item > 0 ? item : 0));\r\n  const RR_location = [];\r\n\r\n  for (let j = 0; j < final_event.length; j++) {\r\n    const [start, end] = final_event[j];\r\n    const segment = abs_nonlinear.slice(start, end + 1);\r\n    const idx = segment.findIndex((value) => value === RR_amp[j]);\r\n    RR_location.push(start + idx);\r\n  }\r\n\r\n  const RR_amp_values = RR_location.map((idx) => abs_nonlinear[idx]);\r\n\r\n  let RR_time = [...RR_location];\r\n\r\n  for (let j = 0; j < RR_time.length - 1; j++) {\r\n    const minDistance = 100;\r\n    if (RR_time[j + 1] - RR_time[j] < minDistance) {\r\n      if (RR_amp_values[j] < RR_amp_values[j + 1]) {\r\n        RR_time[j] = null;\r\n      } else {\r\n        RR_time[j + 1] = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  return { finalPeaks: (RR_time = RR_time.filter((v) => v !== null)), d, D, threshold };\r\n}\r\n","export const preprocessKHO = (signal) => {\n  const signalData = signal[0].data.map((obj) => obj[1]);\n  const MWMFiltered = mwmFilter(signalData);\n  return MWMFiltered;\n};\n\nfunction mwmFilter(signal, fs = 400) {\n  const L1 = Math.round(0.1 * fs);\n  const L2 = Math.round(0.4 * fs);\n  const flen1 = Math.floor(L1 / 2);\n  const flen2 = Math.floor(L2 / 2);\n  const N = signal.length;\n\n  const ch = Array.from(signal, Number);\n\n  const x1 = movingMedian(ch, flen1);\n  const x2 = movingMedian(x1, flen2);\n  const filtered = new Array(N);\n  for (let i = 0; i < N; i++) filtered[i] = ch[i] - x2[i];\n\n  return filtered;\n  function movingMedian(arr, half) {\n    const out = new Array(arr.length);\n    for (let j = 0; j < arr.length; j++) {\n      const start = Math.max(0, j - half);\n      const end = Math.min(arr.length - 1, j + half);\n      const win = arr.slice(start, end + 1).sort((a, b) => a - b);\n      const m = Math.floor(win.length / 2);\n      out[j] = win.length % 2 === 1 ? win[m] : 0.5 * (win[m - 1] + win[m]);\n    }\n    return out;\n  }\n}\n","import { getFinalResult, processSignal } from './SignalConversionKHO';\r\nimport { preprocessKHO } from './preprocessKHO';\r\n\r\nexport function analyzeECGKHO(signal, channel) {\r\n  const fs = 400;\r\n  const signalTime = signal[channel].data.map((obj) => obj[0]);\r\n  const signalData = signal[channel].data.map((obj) => obj[1]);\r\n  const transformSignal = (filtered) => signalTime.map((item, i) => [item, filtered[i]]);\r\n  const preFiltered = preprocessKHO(signal);\r\n  const { filter_signal, nonlinear, new_signal } = processSignal(preFiltered, fs);\r\n  const { finalPeaks, D } = getFinalResult(new_signal, nonlinear, preFiltered);\r\n  return {\r\n    filteredSignal: transformSignal(filter_signal),\r\n    nonlinearizedSignal: transformSignal(nonlinear),\r\n    HFSignal: transformSignal(new_signal),\r\n    zeroCrossingSignal: transformSignal(D),\r\n    preFiltered: transformSignal(preFiltered),\r\n    peaks: {\r\n      series: signalTime.map((item, i) => [\r\n        item,\r\n        finalPeaks.includes(i) && signalData[i] > 0 ? 50 : 0,\r\n      ]),\r\n      data: finalPeaks,\r\n    },\r\n  };\r\n}\r\n","function toF64(arr) {\n  if (arr instanceof Float64Array) return arr.slice();\n  const out = new Float64Array(arr.length);\n  for (let i = 0; i < arr.length; i++) out[i] = arr[i];\n  return out;\n}\n\nfunction reflectIndex(i, N) {\n  if (N === 1) return 0;\n  while (i < 0 || i >= N) {\n    if (i < 0) i = -i - 1;\n    if (i >= N) i = 2 * N - i - 1;\n  }\n  return i;\n}\n\nfunction oddWindowSize(samples) {\n  const s = Math.max(1, Math.round(samples));\n  return s % 2 === 0 ? s + 1 : s;\n}\n\nfunction highPassOnePole(x, fs, fc = 0.5) {\n  const dt = 1 / fs;\n  const RC = 1 / (2 * Math.PI * fc);\n  const alpha = RC / (RC + dt);\n\n  const N = x.length;\n  const xin = toF64(x);\n  const y = new Float64Array(N);\n  y[0] = 0;\n  for (let n = 1; n < N; n++) {\n    y[n] = alpha * (y[n - 1] + xin[n] - xin[n - 1]);\n  }\n  return y;\n}\n\nfunction medianFilter(x, windowSamples) {\n  const N = x.length;\n  const xin = toF64(x);\n  const W = oddWindowSize(windowSamples);\n  const half = (W - 1) >> 1;\n  const y = new Float64Array(N);\n  const buf = new Float64Array(W);\n\n  for (let n = 0; n < N; n++) {\n    for (let k = -half, j = 0; k <= half; k++, j++) {\n      buf[j] = xin[reflectIndex(n + k, N)];\n    }\n\n    const arr = Array.from(buf);\n    arr.sort((a, b) => a - b);\n    y[n] = arr[half];\n  }\n  return y;\n}\n\nfunction doubleMedianBaselineSubtract(x, fs, win1_ms = 200, win2_ms = 600) {\n  const w1 = Math.round((win1_ms / 1000) * fs);\n  const w2 = Math.round((win2_ms / 1000) * fs);\n\n  const m1 = medianFilter(x, w1);\n  const baseline = medianFilter(m1, w2);\n\n  const N = baseline.length;\n  const xin = toF64(x);\n  const corrected = new Float64Array(N);\n  for (let i = 0; i < N; i++) corrected[i] = xin[i] - baseline[i];\n\n  return { baseline, corrected };\n}\n\nfunction stage1_preprocess(ecg, fs = 400) {\n  const hpf = highPassOnePole(ecg, fs, 0.5);\n  const { baseline, corrected } = doubleMedianBaselineSubtract(hpf, fs, 200, 600);\n  return {\n    hpf,\n    baseline,\n    detrended: corrected,\n  };\n}\nfunction reflectPad(x, pad) {\n  const N = x.length;\n  const out = new Float64Array(N + 2 * pad);\n  for (let i = 0; i < pad; i++) {\n    out[i] = x[reflectIndex(pad - i - 1, N)];\n  }\n  for (let i = 0; i < N; i++) out[pad + i] = x[i];\n  for (let i = 0; i < pad; i++) {\n    out[pad + N + i] = x[reflectIndex(N - 2 - i, N)];\n  }\n  return out;\n}\n\nfunction biquadFilter(x, coeffs) {\n  const { b0, b1, b2, a1, a2 } = coeffs;\n  const N = x.length;\n  const xin = toF64(x);\n  const y = new Float64Array(N);\n\n  let x1 = 0,\n    x2 = 0;\n  let y1 = 0,\n    y2 = 0;\n\n  for (let n = 0; n < N; n++) {\n    const xn = xin[n];\n    const yn = b0 * xn + b1 * x1 + b2 * x2 - a1 * y1 - a2 * y2;\n    y[n] = yn;\n    x2 = x1;\n    x1 = xn;\n    y2 = y1;\n    y1 = yn;\n  }\n  return y;\n}\n\nfunction rbjLowpassCoeffs(fs, fc, Q = 1 / Math.SQRT2) {\n  const w0 = 2 * Math.PI * (fc / fs);\n  const cosw0 = Math.cos(w0);\n  const sinw0 = Math.sin(w0);\n  const alpha = sinw0 / (2 * Q);\n\n  let b0 = (1 - cosw0) / 2;\n  let b1 = 1 - cosw0;\n  let b2 = (1 - cosw0) / 2;\n  let a0 = 1 + alpha;\n  let a1 = -2 * cosw0;\n  let a2 = 1 - alpha;\n  b0 /= a0;\n  b1 /= a0;\n  b2 /= a0;\n  a1 /= a0;\n  a2 /= a0;\n\n  return { b0, b1, b2, a1, a2 };\n}\n\nfunction biquadCascadeForward(x, sections) {\n  let y = toF64(x);\n  for (const s of sections) y = biquadFilter(y, s);\n  return y;\n}\n\nfunction filtfiltCascade(x, sections, fs = 400, padSeconds = 0.25) {\n  const N = x.length;\n  if (N < 3) return toF64(x);\n\n  const pad = Math.min(N - 1, Math.max(12, Math.round(fs * padSeconds)));\n  const padded = reflectPad(x, pad);\n  let y = biquadCascadeForward(padded, sections);\n  y = y.reverse();\n  y = biquadCascadeForward(y, sections);\n  y = y.reverse();\n  const out = new Float64Array(N);\n  for (let i = 0; i < N; i++) out[i] = y[pad + i];\n  return out;\n}\n\nfunction rbjHighpassCoeffs(fs, fc, Q = 1 / Math.SQRT2) {\n  const w0 = 2 * Math.PI * (fc / fs);\n  const cosw0 = Math.cos(w0);\n  const sinw0 = Math.sin(w0);\n  const alpha = sinw0 / (2 * Q);\n\n  let b0 = (1 + cosw0) / 2;\n  let b1 = -(1 + cosw0);\n  let b2 = (1 + cosw0) / 2;\n  let a0 = 1 + alpha;\n  let a1 = -2 * cosw0;\n  let a2 = 1 - alpha;\n\n  b0 /= a0;\n  b1 /= a0;\n  b2 /= a0;\n  a1 /= a0;\n  a2 /= a0;\n  return { b0, b1, b2, a1, a2 };\n}\n\nconst BUTTER_QS_4 = [0.541196100146197, 1.3065629648763766];\n\nfunction hpSections(fs, fc, order = 2) {\n  if (order === 2) return [rbjHighpassCoeffs(fs, fc, 1 / Math.SQRT2)];\n  if (order === 4) return BUTTER_QS_4.map((q) => rbjHighpassCoeffs(fs, fc, q));\n}\n\nfunction lpSections(fs, fc, order = 4) {\n  if (order === 2) return [rbjLowpassCoeffs(fs, fc, 1 / Math.SQRT2)];\n  if (order === 4) return BUTTER_QS_4.map((q) => rbjLowpassCoeffs(fs, fc, q));\n}\n\nfunction bandpass5to18(\n  ecg,\n  fs = 400,\n  { hpOrder = 2, lpOrder = 4, zeroPhase = true, padSeconds = 0.25 } = {},\n) {\n  const sections = [...hpSections(fs, 5, hpOrder), ...lpSections(fs, 18, lpOrder)];\n  if (zeroPhase) {\n    return filtfiltCascade(ecg, sections, fs, padSeconds);\n  } else {\n    return sections.reduce((sig, sec) => biquadFilter(sig, sec), toF64(ecg));\n  }\n}\n\nexport function biggestPreprocessFilter(signal, fs = 400) {\n  const { detrended } = stage1_preprocess(signal, fs);\n  let bp = bandpass5to18(detrended, fs, { hpOrder: 4, lpOrder: 4, zeroPhase: true });\n\n  return {\n    bp,\n    detrended,\n  };\n}\n","export function mwmFilter(ecg) {\n  const N = ecg.length;\n  const L1 = 40;\n  const L2 = 160;\n  const flen1 = Math.floor(L1 / 2);\n  const flen2 = Math.floor(L2 / 2);\n  const x1 = new Array(N);\n  for (let j = 0; j < N; j++) {\n    const start = Math.max(0, j - flen1);\n    const end = Math.min(N - 1, j + flen1);\n    x1[j] = medianOfRange(ecg, start, end);\n  }\n  const baseline = new Array(N);\n  for (let j = 0; j < N; j++) {\n    const start = Math.max(0, j - flen2);\n    const end = Math.min(N - 1, j + flen2);\n    baseline[j] = medianOfRange(x1, start, end);\n  }\n\n  const corrected = new Array(N);\n  for (let i = 0; i < N; i++) {\n    const x = ecg[i];\n    const b = baseline[i];\n    corrected[i] = Number.isNaN(x) || Number.isNaN(b) ? NaN : x - b;\n  }\n\n  return corrected;\n\n  function medianOfRange(arr, start, end) {\n    const k = end - start + 1;\n    const tmp = new Array(k);\n    for (let i = 0; i < k; i++) tmp[i] = arr[start + i];\n    tmp.sort((a, b) => a - b);\n    const mid = Math.floor(k / 2);\n    if (k % 2 === 1) {\n      return tmp[mid];\n    } else {\n      return 0.5 * (tmp[mid - 1] + tmp[mid]);\n    }\n  }\n}\nexport function lpFilterMatlab(sig) {\n  const N = sig.length;\n  if (N === 0) return [];\n  const b = [1, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, 0, 1];\n  const a = [1, -2, 1];\n  const h = impulseResponse13(b, a);\n  const yc = conv(sig, h);\n  const start = 6;\n  const out = yc.slice(start, start + N);\n  return out;\n\n  function impulseResponse13(b, a) {\n    const M = 13;\n    const y = new Array(M).fill(0);\n    const a1 = a[1],\n      a2 = a[2];\n\n    for (let n = 0; n < M; n++) {\n      let acc = n === 0 ? b[0] : 0;\n      for (let k = 1; k < b.length; k++) {\n        const idx = n - k;\n        if (idx === 0) acc += b[k];\n      }\n      const yn1 = n - 1 >= 0 ? y[n - 1] : 0;\n      const yn2 = n - 2 >= 0 ? y[n - 2] : 0;\n      y[n] = acc - a1 * yn1 - a2 * yn2;\n    }\n    return y;\n  }\n\n  function conv(x, h) {\n    const Nx = x.length,\n      Nh = h.length;\n    const Ny = Nx + Nh - 1;\n    const y = new Array(Ny).fill(0);\n    for (let n = 0; n < Ny; n++) {\n      let s = 0;\n      const kmin = Math.max(0, n - (Nx - 1));\n      const kmax = Math.min(n, Nh - 1);\n      for (let k = kmin; k <= kmax; k++) {\n        s += h[k] * x[n - k];\n      }\n      y[n] = s;\n    }\n    return y;\n  }\n}\n\nexport function hpFilterMatlab(sig) {\n  const N = sig.length;\n\n  const b = (() => {\n    const arr = new Array(33).fill(0);\n    arr[0] = -1;\n    arr[16] = 32;\n    arr[17] = -32;\n    arr[32] = 1;\n    return arr;\n  })();\n  const a = [1, -1];\n  const h = impulseResponse(b, a, 33);\n\n  const yc = conv(sig, h);\n  const out = yc.slice(16, 16 + N);\n  return out;\n  function impulseResponse(b, a, M) {\n    const y = new Array(M).fill(0);\n    const a1 = a[1];\n    for (let n = 0; n < M; n++) {\n      let acc = n < b.length ? b[n] : 0;\n      const yn1 = n > 0 ? y[n - 1] : 0;\n      y[n] = acc - a1 * yn1;\n    }\n    return y;\n  }\n\n  function conv(x, h) {\n    const Nx = x.length,\n      Nh = h.length;\n    const Ny = Nx + Nh - 1;\n    const y = new Array(Ny).fill(0);\n    for (let n = 0; n < Ny; n++) {\n      let s = 0;\n      const kmin = Math.max(0, n - (Nx - 1));\n      const kmax = Math.min(n, Nh - 1);\n      for (let k = kmin; k <= kmax; k++) s += h[k] * x[n - k];\n      y[n] = s;\n    }\n    return y;\n  }\n}\n\nexport function notch50HzCombFILT(x) {\n  const fs = 400;\n  const Fo = 50;\n  const Q = 35;\n  const doNorm = false;\n  const Nf = fs / Fo;\n  const N = Math.max(2, Math.round(Nf));\n  const BW = Fo / (fs / 2) / Q;\n  const r = clamp(1 - BW, 0.0, 0.999999);\n  const a1 = Math.pow(r, 1 / N);\n  const b = new Array(N).fill(1);\n  const a = Array.from({ length: N }, (_, k) => Math.pow(a1, k));\n  const y = filtfiltIIR(b, a, x);\n\n  if (!doNorm) return y;\n  const m = y.reduce((M, v) => Math.max(M, Math.abs(v)), 0) || 1;\n  return y.map((v) => v / m);\n\n  function clamp(v, lo, hi) {\n    return Math.max(lo, Math.min(hi, v));\n  }\n  function lfilter(b, a, x) {\n    const nb = b.length,\n      na = a.length;\n    const y = new Array(x.length).fill(0);\n    for (let n = 0; n < x.length; n++) {\n      let acc = 0;\n      for (let k = 0; k < nb; k++) {\n        const xn = n - k;\n        if (xn >= 0) acc += b[k] * x[xn];\n      }\n      for (let k = 1; k < na; k++) {\n        const yn = n - k;\n        if (yn >= 0) acc -= a[k] * y[yn];\n      }\n      y[n] = acc;\n    }\n    return y;\n  }\n  function filtfiltIIR(b, a, x) {\n    const nfact = 3 * (Math.max(b.length, a.length) - 1);\n    const N = x.length;\n    if (N <= nfact + 1) {\n      const y1 = lfilter(b, a, x);\n      return lfilter(b, a, y1.slice().reverse()).reverse();\n    }\n    const pre = reflectPad(x, nfact, true);\n    const post = reflectPad(x, nfact, false);\n    const xx = pre.concat(x, post);\n    const y1 = lfilter(b, a, xx);\n    const y2 = lfilter(b, a, y1.slice().reverse()).reverse();\n    return y2.slice(nfact, nfact + N);\n\n    function reflectPad(arr, L, atStart) {\n      const out = new Array(L);\n      if (atStart) {\n        for (let i = 0; i < L; i++) out[i] = 2 * arr[0] - arr[1 + i];\n        return out.reverse();\n      } else {\n        for (let i = 0; i < L; i++) out[i] = 2 * arr[N - 1] - arr[N - 2 - i];\n        return out;\n      }\n    }\n  }\n}\n\nexport function savGolayFilter(data, mode) {\n  let K, F, dt, deriv, nl, nr, M;\n  if (mode === 'centered') {\n    K = 2;\n    F = 25;\n    dt = 0.05;\n    deriv = 0;\n  } else if (mode === 'asymmetric') {\n    nl = 16;\n    nr = 16;\n    M = 4;\n    deriv = 0;\n    dt = 0.05;\n  }\n  function transpose(M) {\n    const r = M.length,\n      c = M[0].length;\n    const T = Array.from({ length: c }, () => Array(r));\n    for (let i = 0; i < r; i++) for (let j = 0; j < c; j++) T[j][i] = M[i][j];\n    return T;\n  }\n\n  function matMul(A, B) {\n    const aR = A.length,\n      aC = A[0].length;\n    const bR = B.length,\n      bC = B[0].length;\n    const C = Array.from({ length: aR }, () => Array(bC).fill(0));\n    for (let i = 0; i < aR; i++) {\n      for (let k = 0; k < aC; k++) {\n        const aik = A[i][k];\n        for (let j = 0; j < bC; j++) C[i][j] += aik * B[k][j];\n      }\n    }\n    return C;\n  }\n\n  function invertMatrix(M) {\n    const n = M.length;\n    const A = M.map((r) => r.slice());\n    const I = Array.from({ length: n }, (_, i) =>\n      Array.from({ length: n }, (_, j) => (i === j ? 1 : 0)),\n    );\n    for (let col = 0; col < n; col++) {\n      let piv = col;\n      for (let r = col + 1; r < n; r++) if (Math.abs(A[r][col]) > Math.abs(A[piv][col])) piv = r;\n      const pivotVal = A[piv][col];\n      if (piv !== col) {\n        [A[col], A[piv]] = [A[piv], A[col]];\n        [I[col], I[piv]] = [I[piv], I[col]];\n      }\n      for (let j = 0; j < n; j++) {\n        A[col][j] /= pivotVal;\n        I[col][j] /= pivotVal;\n      }\n      for (let r = 0; r < n; r++) {\n        if (r === col) continue;\n        const factor = A[r][col];\n        if (factor === 0) continue;\n        for (let j = 0; j < n; j++) {\n          A[r][j] -= factor * A[col][j];\n          I[r][j] -= factor * I[col][j];\n        }\n      }\n    }\n    return I;\n  }\n  const factorial = (n) => {\n    let r = 1;\n    for (let i = 2; i <= n; i++) r *= i;\n    return r;\n  };\n  function designMatrixCentered(K, F) {\n    const m = (F - 1) >> 1;\n    const A = Array.from({ length: F }, () => Array(K + 1).fill(0));\n    for (let i = 0; i < F; i++) {\n      const n = i - m;\n      let p = 1;\n      for (let j = 0; j <= K; j++) {\n        A[i][j] = p;\n        p *= n;\n      }\n    }\n    return A;\n  }\n  function designMatrixAsym(M, nl, nr) {\n    const F = nl + nr + 1;\n    const A = Array.from({ length: F }, () => Array(M + 1).fill(0));\n    for (let i = 0; i < F; i++) {\n      const n = i - nl;\n      let p = 1;\n      for (let j = 0; j <= M; j++) {\n        A[i][j] = p;\n        p *= n;\n      }\n    }\n    return A;\n  }\n  function sgDesign(K, F) {\n    const A = designMatrixCentered(K, F);\n    const AT = transpose(A);\n    const ATA = matMul(AT, A);\n    const ATA_inv = invertMatrix(ATA);\n    const pinv = matMul(ATA_inv, AT);\n\n    const G = Array.from({ length: F }, () => Array(K + 1).fill(0));\n    for (let d = 0; d <= K; d++) {\n      const scale = factorial(d);\n      for (let j = 0; j < F; j++) G[j][d] = scale * pinv[d][j];\n    }\n    return G;\n  }\n  function sgDesignAsym(M, nl, nr) {\n    const F = nl + nr + 1;\n    const A = designMatrixAsym(M, nl, nr);\n    const AT = transpose(A);\n    const ATA = matMul(AT, A);\n    const ATA_inv = invertMatrix(ATA);\n    const pinv = matMul(ATA_inv, AT);\n\n    const GA = Array.from({ length: F }, () => Array(M + 1).fill(0));\n    for (let d = 0; d <= M; d++) {\n      const scale = factorial(d);\n      for (let j = 0; j < F; j++) GA[j][d] = scale * pinv[d][j];\n    }\n    return GA;\n  }\n  function convSame(signal, kernel) {\n    const N = signal.length;\n    const F = kernel.length;\n    const m = Math.floor(F / 2);\n    const y = new Array(N).fill(0);\n    for (let i = 0; i < N; i++) {\n      let acc = 0;\n      for (let j = 0; j < F; j++) {\n        const idx = i + j - m;\n        if (idx >= 0 && idx < N) acc += signal[idx] * kernel[j];\n      }\n      y[i] = acc;\n    }\n    return y;\n  }\n  function convAlign(signal, kernel, centerIndex) {\n    const N = signal.length,\n      F = kernel.length;\n    const y = new Array(N).fill(0);\n    for (let i = 0; i < N; i++) {\n      let acc = 0;\n      for (let j = 0; j < F; j++) {\n        const idx = i + j - centerIndex;\n        if (idx >= 0 && idx < N) acc += signal[idx] * kernel[j];\n      }\n      y[i] = acc;\n    }\n    return y;\n  }\n\n  function sgApply(signal, K, F, opts = {}) {\n    const { dt = 1, deriv = 0 } = opts;\n    const G = sgDesign(K, F);\n    const h = getColumn(G, deriv);\n    const y = convSame(signal, h);\n    if (deriv === 0) return y;\n    const scale = Math.pow(dt, deriv);\n    return y.map((v) => v / scale);\n  }\n  function savGolSmooth(f, nl, nr, M) {\n    const GA = sgDesignAsym(M, nl, nr);\n    const c = getColumn(GA, 0);\n    const n = f.length;\n    const y = convAlign(f, c, nl);\n    const g = y.slice();\n    const F = nl + nr + 1;\n    for (let i = nl; i <= n - nr - 1; i++) g[i] = y[i + nr];\n    for (let i = 0; i < nl && i < n; i++) g[i] = f[i];\n    for (let i = Math.max(n - nr, 0); i < n; i++) g[i] = f[i];\n    return g;\n  }\n  function getColumn(M, j) {\n    return M.map((row) => row[j]);\n  }\n  function scaleArray(a, s) {\n    return a.map((v) => v * s);\n  }\n\n  if (mode === 'centered') {\n    return sgApply(data, K, F, { dt, deriv });\n  }\n\n  if (mode === 'asymmetric') {\n    if (deriv === 0) {\n      return savGolSmooth(data, nl, nr, M);\n    }\n    const GA = sgDesignAsym(M, nl, nr);\n    const h = GA.map((r) => r[deriv]);\n    const y = convAlign(data, h, nl);\n    const scale = Math.pow(dt, deriv);\n    return y.map((v) => v / scale);\n  }\n}\n","export function removeBaselineMedianCascade(\n  x,\n  fs = 400,\n  {\n    // window lengths in seconds; tuned for fs=400\n    win1Sec = 0.2,\n    win2Sec = 0.6,\n    // if true, remove any tiny DC leftover after subtraction\n    removeResidualDC = false,\n    // replace NaN/Inf via linear interpolation\n    fixNonFinite = true,\n  } = {},\n) {\n  if (!Array.isArray(x) && !(x instanceof Float64Array)) {\n    throw new TypeError('x must be an array-like of numbers');\n  }\n  const N = x.length;\n  if (N === 0) return [];\n\n  // Prepare working copy in float64 for numerical stability\n  let xWork = toFloat64Array(x);\n\n  // Sanitize non-finite values\n  if (fixNonFinite) {\n    xWork = fixNonFiniteLinear(xWork);\n  }\n\n  // Compute odd window sizes, clamp to valid range\n  let w1 = makeOdd(Math.max(3, Math.round(win1Sec * fs)));\n  let w2 = makeOdd(Math.max(3, Math.round(win2Sec * fs)));\n  w1 = clampOdd(w1, N);\n  w2 = clampOdd(w2, N);\n\n  // First median (suppresses QRS)\n  const m1 = medianFilterReflect(xWork, w1);\n\n  // Second median (suppresses T waves) -> baseline estimate\n  const baseline = medianFilterReflect(m1, w2);\n\n  // Subtract baseline\n  const y = new Float64Array(N);\n  for (let i = 0; i < N; i++) y[i] = xWork[i] - baseline[i];\n\n  // Optional tiny DC removal (robust)\n  if (removeResidualDC) {\n    const med = robustMedian(y);\n    for (let i = 0; i < N; i++) y[i] -= med;\n  }\n\n  return Array.from(y);\n}\nfunction makeOdd(n) {\n  return n % 2 === 0 ? n + 1 : n;\n}\nfunction clampOdd(w, N) {\n  if (w <= 3) return 3;\n  if (w > N) return N % 2 === 1 ? N : N - 1;\n  return w % 2 === 1 ? w : w - 1;\n}\n\nfunction toFloat64Array(arr) {\n  if (arr instanceof Float64Array) return arr.slice();\n  const out = new Float64Array(arr.length);\n  for (let i = 0; i < arr.length; i++) out[i] = Number(arr[i]);\n  return out;\n}\n\nfunction robustMedian(a) {\n  const tmp = Array.from(a);\n  tmp.sort((u, v) => u - v);\n  const mid = Math.floor(tmp.length / 2);\n  return tmp.length % 2 ? tmp[mid] : 0.5 * (tmp[mid - 1] + tmp[mid]);\n}\n\nfunction fixNonFiniteLinear(x) {\n  const N = x.length;\n  const y = new Float64Array(N);\n  // Copy and mark finite\n  const finite = new Array(N);\n  for (let i = 0; i < N; i++) {\n    const v = x[i];\n    const isFin = Number.isFinite(v);\n    y[i] = isFin ? v : 0;\n    finite[i] = isFin;\n  }\n\n  // Find first finite\n  let firstFin = 0;\n  while (firstFin < N && !finite[firstFin]) firstFin++;\n  if (firstFin === N) {\n    // All non-finite -> return zeros\n    return y;\n  }\n  // Fill leading\n  for (let i = 0; i < firstFin; i++) y[i] = y[firstFin];\n\n  // Interpolate interior gaps\n  let i = firstFin;\n  while (i < N) {\n    if (finite[i]) {\n      i++;\n      continue;\n    }\n    const start = i - 1;\n    // Find end of gap\n    let j = i + 1;\n    while (j < N && !finite[j]) j++;\n    const end = j < N ? j : N - 1;\n    const y0 = y[start];\n    const y1 = y[end];\n    const len = end - start;\n    for (let k = 1; k < len; k++) {\n      y[start + k] = y0 + (y1 - y0) * (k / len);\n    }\n    // If trailing to end with no finite, fill with last known\n    if (j === N) {\n      for (let t = start + 1; t < N; t++) y[t] = y0;\n      break;\n    }\n    i = j + 1;\n  }\n  return y;\n}\n\nfunction medianFilterReflect(x, w) {\n  const N = x.length;\n  if (w <= 1 || N === 0) return Array.from(x);\n  const r = (w - 1) >> 1;\n\n  // Build reflected padded array: [leftPad | x | rightPad]\n  const leftPad = reflectLeft(x, r);\n  const rightPad = reflectRight(x, r);\n  const padded = new Float64Array(r + N + r);\n  padded.set(leftPad, 0);\n  padded.set(x, r);\n  padded.set(rightPad, r + N);\n\n  // Initial window (over padded indices [0 .. w-1])\n  const window = Array(w);\n  for (let i = 0; i < w; i++) window[i] = padded[i];\n  window.sort((a, b) => a - b);\n\n  const out = new Float64Array(N);\n  const mid = (w - 1) >> 1;\n\n  // For each output i, window covers padded [i .. i + w - 1]\n  for (let i = 0; i < N; i++) {\n    // Median for current window\n    out[i] = window[mid];\n\n    // Slide window: remove padded[i], add padded[i + w]\n    if (i < N - 1) {\n      const outVal = padded[i];\n      const inVal = padded[i + w];\n\n      // Remove one occurrence of outVal\n      let idx = lowerBound(window, outVal);\n      // lowerBound should point to a value >= outVal; ensure we remove matching one\n      while (idx < window.length && window[idx] !== outVal) idx++;\n      if (idx < window.length) window.splice(idx, 1);\n      else {\n        // Fallback: if not found due to FP quirks, remove closest\n        idx = lowerBound(window, outVal);\n        window.splice(Math.min(idx, window.length - 1), 1);\n      }\n\n      // Insert inVal keeping sorted order\n      const ins = lowerBound(window, inVal);\n      window.splice(ins, 0, inVal);\n    }\n  }\n\n  return Array.from(out);\n}\nfunction reflectLeft(x, r) {\n  // Take first r samples and mirror them\n  const out = new Float64Array(r);\n  for (let i = 0; i < r; i++) out[i] = x[r - 1 - i];\n  return out;\n}\nfunction reflectRight(x, r) {\n  // Take last r samples and mirror them\n  const out = new Float64Array(r);\n  const N = x.length;\n  for (let i = 0; i < r; i++) out[i] = x[N - 1 - i];\n  return out;\n}\nfunction lowerBound(arr, value) {\n  let lo = 0,\n    hi = arr.length;\n  while (lo < hi) {\n    const mid = (lo + hi) >>> 1;\n    if (arr[mid] < value) lo = mid + 1;\n    else hi = mid;\n  }\n  return lo;\n}\nexport function applyNotch50Hz(\n  x,\n  fs = 400,\n  { f0 = 50, Q = 35, zeroPhase = true, padMult = 3, fixNonFinite = true } = {},\n) {\n  let xWork = toFloat64Array(x);\n  if (fixNonFinite) xWork = fixNonFiniteLinear(xWork);\n\n  const nyq = fs / 2;\n  if (!(f0 > 0 && f0 < nyq)) {\n    return Array.from(xWork);\n  }\n  if (!Number.isFinite(Q) || Q < 5) Q = 5;\n  if (Q > 1000) Q = 1000;\n\n  // --- Design biquad\n  const { b, a } = designNotchBiquad(f0, fs, Q);\n\n  // --- Filtering\n  let y;\n  if (zeroPhase) {\n    y = filtfiltBiquad(xWork, b, a, padMult);\n  } else {\n    y = iirBiquadDF2T(xWork, b, a); // causal only (phase shift!)\n  }\n  return Array.from(y);\n}\n\nfunction designNotchBiquad(f0, fs, Q) {\n  const w0 = 2 * Math.PI * (f0 / fs);\n  const cosw0 = Math.cos(w0);\n  const sinw0 = Math.sin(w0);\n  const alpha = sinw0 / (2 * Q);\n\n  // Notch: zeros on unit circle at ±w0, poles set by alpha\n  let b0 = 1;\n  let b1 = -2 * cosw0;\n  let b2 = 1;\n  let a0 = 1 + alpha;\n  let a1 = -2 * cosw0;\n  let a2 = 1 - alpha;\n\n  // Normalize so a0 = 1\n  b0 /= a0;\n  b1 /= a0;\n  b2 /= a0;\n  a1 /= a0;\n  a2 /= a0;\n  a0 = 1;\n\n  return { b: [b0, b1, b2], a: [a0, a1, a2] };\n}\n\nfunction iirBiquadDF2T(x, b, a) {\n  const N = x.length;\n  const y = new Float64Array(N);\n  const b0 = b[0],\n    b1 = b[1],\n    b2 = b[2];\n  const a1 = a[1],\n    a2 = a[2];\n  let s1 = 0,\n    s2 = 0; // states\n\n  for (let n = 0; n < N; n++) {\n    const in_n = x[n];\n    const out = b0 * in_n + s1;\n    s1 = b1 * in_n + s2 - a1 * out;\n    s2 = b2 * in_n - a2 * out;\n    y[n] = out;\n  }\n  return y;\n}\n\nfunction filtfiltBiquad(x, b, a, padMult = 3) {\n  const N = x.length;\n  if (N === 0) return new Float64Array(0);\n\n  // For biquad, filter order = 2; transient len ~ 3*(order)\n  const basePad = Math.max(b.length, a.length) - 1;\n  const padLen = Math.max(6, Math.min(padMult * basePad, Math.floor(N / 2))); // never exceed N/2\n\n  // Build reflected padded signal\n  const left = reflectLeft(x, padLen);\n  const right = reflectRight(x, padLen);\n  const padded = new Float64Array(padLen + N + padLen);\n  padded.set(left, 0);\n  padded.set(x, padLen);\n  padded.set(right, padLen + N);\n\n  // Forward filter\n  let y = iirBiquadDF2T(padded, b, a);\n\n  // Reverse\n  y = reverseFloat64(y);\n\n  // Backward filter (same coefficients)\n  y = iirBiquadDF2T(y, b, a);\n\n  // Reverse back\n  y = reverseFloat64(y);\n\n  // Remove padding\n  return y.subarray(padLen, padLen + N);\n}\n\nfunction reverseFloat64(arr) {\n  const N = arr.length;\n  const out = new Float64Array(N);\n  for (let i = 0; i < N; i++) out[i] = arr[N - 1 - i];\n  return out;\n}\n\nexport function applyLowpassButterworth(\n  x,\n  fs = 400,\n  {\n    fc = 40, // cutoff frequency (Hz)\n    order = 4, // even order (2, 4, 6, ...)\n    zeroPhase = true, // filtfilt\n    padMult = 6, // padding multiplier for filtfilt\n    fixNonFinite = true,\n  } = {},\n) {\n  if (!Array.isArray(x) && !(x instanceof Float64Array)) {\n    throw new TypeError('x must be an array-like of numbers');\n  }\n  const N = x.length;\n  if (N === 0) return [];\n\n  let xWork = toFloat64Array(x);\n  if (fixNonFinite) xWork = fixNonFiniteLinear(xWork);\n\n  // Sanity checks\n  if (order < 2) order = 2;\n  if (order % 2 !== 0) order += 1; // enforce even\n  const nyq = fs / 2;\n  if (!(fc > 0 && fc < nyq)) {\n    // out of range -> return copy\n    return Array.from(xWork);\n  }\n\n  // Build Butterworth cascade (SOS) as array of {b:[b0,b1,b2], a:[1,a1,a2]}\n  const sos = designButterworthLPSOS(fc, fs, order);\n\n  // Filter\n  const y = zeroPhase ? filtfiltCascadeSOS(xWork, sos, padMult) : iirCascadeDF2T(xWork, sos); // causal (has phase shift)\n\n  return Array.from(y);\n}\n\nfunction designButterworthLPSOS(fc, fs, orderEven) {\n  const m = orderEven / 2;\n  const Qs = butterworthQs(orderEven); // length m\n  const sos = [];\n  for (let k = 0; k < m; k++) {\n    sos.push(designLowpassBiquadRBJ(fc, fs, Qs[k]));\n  }\n  return sos;\n}\n\nfunction butterworthQs(N) {\n  const m = Math.floor(N / 2);\n  const Qs = new Array(m);\n  for (let k = 1; k <= m; k++) {\n    const zeta = Math.sin(((2 * k - 1) * Math.PI) / (2 * N));\n    Qs[k - 1] = 1 / (2 * zeta);\n  }\n  // Sorting ascending Q can slightly improve numerical robustness in cascade\n  Qs.sort((a, b) => a - b);\n  return Qs;\n}\n\nfunction designLowpassBiquadRBJ(fc, fs, Q) {\n  const w0 = 2 * Math.PI * (fc / fs);\n  const cosw0 = Math.cos(w0);\n  const sinw0 = Math.sin(w0);\n  const alpha = sinw0 / (2 * Q);\n\n  let b0 = (1 - cosw0) / 2;\n  let b1 = 1 - cosw0;\n  let b2 = (1 - cosw0) / 2;\n\n  let a0 = 1 + alpha;\n  let a1 = -2 * cosw0;\n  let a2 = 1 - alpha;\n\n  // Normalize so a0 = 1\n  b0 /= a0;\n  b1 /= a0;\n  b2 /= a0;\n  a1 /= a0;\n  a2 /= a0;\n  a0 = 1;\n\n  return { b: [b0, b1, b2], a: [a0, a1, a2] };\n}\n\nfunction iirCascadeDF2T(x, sos) {\n  let y = toFloat64Array(x);\n  for (let i = 0; i < sos.length; i++) {\n    const { b, a } = sos[i];\n    y = iirBiquadDF2T(y, b, a);\n  }\n  return y;\n}\n\nfunction filtfiltCascadeSOS(x, sos, padMult = 6) {\n  const N = x.length;\n  if (N === 0) return new Float64Array(0);\n\n  // Estimate transient length ~ 3 samples per biquad (rough heuristic)\n  const padLen = Math.max(12, Math.min(padMult * 3 * sos.length, Math.floor(N / 2)));\n\n  // Build reflected padded signal\n  const left = reflectLeft(x, padLen);\n  const right = reflectRight(x, padLen);\n  const padded = new Float64Array(padLen + N + padLen);\n  padded.set(left, 0);\n  padded.set(x, padLen);\n  padded.set(right, padLen + N);\n\n  // Forward cascade\n  let y = iirCascadeDF2T(padded, sos);\n\n  // Reverse\n  y = reverseFloat64(y);\n\n  // Backward cascade (same direction through the cascade)\n  y = iirCascadeDF2T(y, sos);\n\n  // Reverse back and unpad\n  y = reverseFloat64(y);\n  return y.subarray(padLen, padLen + N);\n}\n\nexport function applyBandpassButterworth(\n  x,\n  fs = 400,\n  {\n    f1 = 5, // нижняя граница полосы (Hz)\n    f2 = 15, // верхняя граница полосы (Hz)\n    orderHP = 2, // чётный порядок HP (2,4,6,...)\n    orderLP = 2, // чётный порядок LP (2,4,6,...)\n    zeroPhase = true, // filtfilt по всему каскаду\n    padMult = 6, // множитель паддинга для filtfilt\n    fixNonFinite = true,\n  } = {},\n) {\n  if (!Array.isArray(x) && !(x instanceof Float64Array)) {\n    throw new TypeError('x must be an array-like of numbers');\n  }\n  const N = x.length;\n  if (N === 0) return [];\n\n  // Подготовка данных\n  let xWork = toFloat64Array(x);\n  if (fixNonFinite) xWork = fixNonFiniteLinear(xWork);\n\n  // Проверки частот / порядков\n  const nyq = fs / 2;\n  if (!(f1 > 0) || !(f2 > 0) || !(f1 < f2) || !(f2 < nyq)) {\n    // Некорректные частоты — вернём копию без изменений\n    return Array.from(xWork);\n  }\n  if (orderHP < 2) orderHP = 2;\n  if (orderLP < 2) orderLP = 2;\n  if (orderHP % 2 !== 0) orderHP += 1;\n  if (orderLP % 2 !== 0) orderLP += 1;\n\n  // Конструируем каскад SOS: сначала HP(f1), затем LP(f2)\n  const sosHP = designButterworthHPSOS(f1, fs, orderHP);\n  const sosLP = designButterworthLPSOS(f2, fs, orderLP); // из шага 3\n  const sos = sosHP.concat(sosLP);\n\n  // Фильтрация\n  const y = zeroPhase\n    ? filtfiltCascadeSOS(xWork, sos, padMult) // нулевая фаза\n    : iirCascadeDF2T(xWork, sos); // причинная (со сдвигом фазы)\n\n  return Array.from(y);\n}\n\nfunction designButterworthHPSOS(fc, fs, orderEven) {\n  const m = orderEven / 2;\n  const Qs = butterworthQs(orderEven); // из шага 3\n  const sos = [];\n  for (let k = 0; k < m; k++) {\n    sos.push(designHighpassBiquadRBJ(fc, fs, Qs[k]));\n  }\n  return sos;\n}\n\nfunction designHighpassBiquadRBJ(fc, fs, Q) {\n  const w0 = 2 * Math.PI * (fc / fs);\n  const cosw0 = Math.cos(w0);\n  const sinw0 = Math.sin(w0);\n  const alpha = sinw0 / (2 * Q);\n\n  let b0 = (1 + cosw0) / 2;\n  let b1 = -(1 + cosw0);\n  let b2 = (1 + cosw0) / 2;\n\n  let a0 = 1 + alpha;\n  let a1 = -2 * cosw0;\n  let a2 = 1 - alpha;\n\n  // Нормализация так, чтобы a0 = 1\n  b0 /= a0;\n  b1 /= a0;\n  b2 /= a0;\n  a1 /= a0;\n  a2 /= a0;\n  a0 = 1;\n\n  return { b: [b0, b1, b2], a: [a0, a1, a2] };\n}\n","import { biggestPreprocessFilter } from './biggestPreprocess';\nimport {\n  hpFilterMatlab,\n  lpFilterMatlab,\n  mwmFilter,\n  notch50HzCombFILT,\n  savGolayFilter,\n} from './mainConversions';\nimport {\n  applyBandpassButterworth,\n  applyLowpassButterworth,\n  applyNotch50Hz,\n  normalizeAmplitude,\n  removeBaselineMedianCascade,\n  suppressOutliersHampel,\n} from './newPreprocess';\n\nexport const preprocessSignal = (signal, channel) => {\n  const signalData = signal[channel].data.map((item) => item[1]);\n  const signalTime = signal[channel].data.map((item) => item[0]);\n  const transformData = (data) => signalTime.map((item, i) => [item, data[i]]);\n  const mvmFiltered = mwmFilter(signalData);\n  const lowPassFilteredML = lpFilterMatlab(mvmFiltered);\n  const highPassFilteredML = hpFilterMatlab(lowPassFilteredML);\n  const notchFilteredML = notch50HzCombFILT(highPassFilteredML);\n  const savGolayFilteredMLC = savGolayFilter(lowPassFilteredML, 'centered');\n  const biggestPreprocess = biggestPreprocessFilter(signalData);\n  const newFirst = removeBaselineMedianCascade(signalData);\n  const newSecond = applyNotch50Hz(newFirst);\n  const newThird = applyLowpassButterworth(newSecond);\n  const newFourth = applyBandpassButterworth(newThird);\n\n  return {\n    mvmFiltered: transformData(mvmFiltered),\n    lowPassFilteredML: transformData(lowPassFilteredML),\n    highPassFilteredML: transformData(highPassFilteredML),\n    notchFilteredML: transformData(notchFilteredML),\n    savGolayFilteredMLC: transformData(savGolayFilteredMLC),\n    biggestPreprocess: {\n      bp: transformData(biggestPreprocess.bp),\n      detrended: transformData(biggestPreprocess.detrended),\n    },\n    newPreprocess: {\n      newFirst: transformData(newFirst),\n      newSecond: transformData(newSecond),\n      newThird: transformData(newThird),\n      newFourth: transformData(newFourth),\n    },\n  };\n};\n","import { getTopValue } from '../../utils';\n\nfunction filter(b, a, x) {\n  const y = new Array(x.length).fill(0);\n  for (let n = 0; n < x.length; n++) {\n    for (let i = 0; i < b.length; i++) {\n      if (n - i >= 0) y[n] += b[i] * x[n - i];\n    }\n    for (let i = 1; i < a.length; i++) {\n      if (n - i >= 0) y[n] -= a[i] * y[n - i];\n    }\n    y[n] /= a[0];\n  }\n  return y;\n}\n\nfunction normalize(signal) {\n  const maxVal = getTopValue(signal, 'max') || 1;\n  const minVal = getTopValue(signal, 'min') || 1;\n  const correctVal = Math.abs(maxVal) > Math.abs(minVal) ? maxVal : minVal;\n  return signal.map((val) => val / correctVal);\n}\n\nexport function getLowPassFilterSignal(signal) {\n  const a1 = [1, -2, 1];\n  const b1 = [1, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, 0, 1];\n  let lowPassFilterSignal = filter(b1, a1, signal);\n  lowPassFilterSignal = normalize(lowPassFilterSignal);\n  return lowPassFilterSignal;\n}\n\nexport function getHighPassFilterSignal(signal) {\n  const a2 = [1, -1];\n  const b2 = [\n    -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, -32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 1,\n  ];\n\n  let highPassFilterSignal = filter(b2, a2, signal);\n  highPassFilterSignal = normalize(highPassFilterSignal);\n  return highPassFilterSignal;\n}\n\nexport function getDifferentiatedSignal(signal) {\n  const h = [-1, -2, 0, 2, 1].map((v) => v / 8);\n  const half = Math.floor(h.length / 2);\n  let differentiatedSignal = [];\n  for (let i = 0; i < signal.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < h.length; j++) {\n      const idx = i + j - half;\n      const x = idx >= 0 && idx < signal.length ? signal[idx] : 0;\n      sum += h[j] * x;\n    }\n    differentiatedSignal.push(sum);\n  }\n\n  differentiatedSignal = normalize(differentiatedSignal);\n  return differentiatedSignal;\n}\n\nexport function getSquaredSignal(signal) {\n  let squaredSignal = signal.map((x) => x * x);\n  squaredSignal = normalize(squaredSignal);\n  return squaredSignal;\n}\n\nexport function getMovingWindowSignal(signal) {\n  let movedWindowSignal = [];\n  const windowSize = 51;\n  let sum = 0;\n  for (let i = 0; i < signal.length; i++) {\n    sum += signal[i];\n    if (i >= windowSize) {\n      sum -= signal[i - windowSize];\n    }\n    if (i >= windowSize - 1) {\n      movedWindowSignal.push(sum / windowSize);\n    } else {\n      movedWindowSignal.push(0);\n    }\n  }\n  movedWindowSignal = normalize(movedWindowSignal);\n  return movedWindowSignal;\n}\n\nexport function getRPeaks(signal, dataSignal) {\n  const maxValue = getTopValue(signal, 'max');\n  const avgValue = signal.reduce((sum, val) => sum + val, 0) / signal.length;\n  const threshold = avgValue * maxValue;\n  const binary = signal.map((val) => (val > threshold ? 1 : 0));\n  const left = [];\n  const right = [];\n  for (let i = 1; i < binary.length; i++) {\n    if (binary[i - 1] === 0 && binary[i] === 1) {\n      left.push(i);\n    } else if (binary[i - 1] === 1 && binary[i] === 0) {\n      right.push(i);\n    }\n  }\n  const shift = 21;\n  for (let i = 0; i < left.length; i++) {\n    left[i] = Math.max(0, left[i] - shift);\n    right[i] = Math.min(dataSignal.length - 1, right[i] - shift);\n  }\n\n  const R_locs = [];\n\n  for (let i = 0; i < left.length; i++) {\n    const start = left[i];\n    const end = right[i];\n    let maxVal = -Infinity;\n    let maxIdx = start;\n\n    for (let j = start; j <= end; j++) {\n      if (dataSignal[j] > maxVal) {\n        maxVal = dataSignal[j];\n        maxIdx = j;\n      }\n    }\n\n    R_locs.push(maxIdx);\n  }\n\n  const fs = 400;\n  const minDistance = 0.25 * fs;\n\n  const filteredRLocs = [];\n\n  for (let i = 0; i < R_locs.length; i++) {\n    if (filteredRLocs.length === 0) {\n      filteredRLocs.push(R_locs[i]);\n    } else {\n      const lastAccepted = filteredRLocs[filteredRLocs.length - 1];\n      if (R_locs[i] - lastAccepted >= minDistance) {\n        filteredRLocs.push(R_locs[i]);\n      }\n    }\n  }\n  return filteredRLocs;\n}\n","const MIN_DIST_SEC = 0.1,\r\n  SEARCH_WIN_SEC = 0.15,\r\n  T_WAVE_SLOPE_RATIO = 0.6;\r\nconst RESCUE_SCALE = 0.5,\r\n  GAPFILL_LONG_SEC = 0.9,\r\n  GAPFILL_RR_FACTOR = 0.95,\r\n  GAPFILL_LOW_SCALE = 0.18,\r\n  DEDUP_SEC = 0.22;\r\nconst ABS_REFRACT_SEC = 0.2,\r\n  REL_REFRACT_FRAC = 0.27;\r\nconst RR_GUIDE_ENABLE = true,\r\n  RR_GUIDE_MIN_FRAC = 0.55,\r\n  RR_GUIDE_STRONG_MULT = 1.6;\r\nconst RS_DROP_WIN_SEC = 0.05,\r\n  RS_DROP_FRAC = 0.12;\r\nconst MICRO_R_ENABLE = true,\r\n  MICRO_R_LO_SEC = 0.28,\r\n  MICRO_R_HI_SEC = 0.52,\r\n  MICRO_R_PROM_FRAC = 0.33,\r\n  MICRO_R_MIN_POS_FRAC = 0.2,\r\n  MICRO_R_SIDE_SEC = 0.06;\r\nconst SHAPE_FILTER = true,\r\n  SHAPE_WIDTH_MAX_SEC = 0.12,\r\n  SHAPE_WIDTH_MIN_SEC = 0.012,\r\n  SHAPE_SLOPE_MIN_FRAC = 0.06,\r\n  SHAPE_PROM_FRAC = 0.12,\r\n  SHAPE_CURV_MIN_FRAC = 0.03;\r\n\r\nconst R = Math.round;\r\nconst mean = (a) => (a.length ? a.reduce((s, v) => s + v, 0) / a.length : 0);\r\nconst median = (a) => {\r\n  if (!a.length) return 0;\r\n  const s = [...a].sort((x, y) => x - y),\r\n    m = s.length >> 1;\r\n  return s.length & 1 ? s[m] : (s[m - 1] + s[m]) / 2;\r\n};\r\nconst maxAbs = (a) =>\r\n  a.reduce((m, v) => {\r\n    v = Math.abs(v);\r\n    return v > m ? v : m;\r\n  }, 0);\r\nconst convolveFull = (x, h) => {\r\n  const n = x.length,\r\n    m = h.length,\r\n    y = Array(n + m - 1).fill(0);\r\n  for (let i = 0; i < n; i++) {\r\n    const xi = x[i];\r\n    for (let j = 0; j < m; j++) y[i + j] += xi * h[j];\r\n  }\r\n  return y;\r\n};\r\nfunction lfilter(b, a, x) {\r\n  const y = Array(x.length).fill(0);\r\n  for (let n = 0; n < x.length; n++) {\r\n    let acc = 0;\r\n    for (let i = 0; i < b.length; i++) if (n - i >= 0) acc += b[i] * x[n - i];\r\n    for (let j = 1; j < a.length; j++) if (n - j >= 0) acc -= a[j] * y[n - j];\r\n    y[n] = acc / a[0];\r\n  }\r\n  return y;\r\n}\r\nfunction filtfilt(b, a, x, padlen = null) {\r\n  const edge = Math.max(b.length, a.length) - 1,\r\n    pl = padlen == null ? 3 * edge : padlen,\r\n    n = x.length,\r\n    left = Array(pl),\r\n    right = Array(pl);\r\n  for (let i = 0; i < pl; i++) {\r\n    left[i] = 2 * x[0] - x[Math.min(pl - i, n - 1)];\r\n    right[i] = 2 * x[n - 1] - x[Math.max(n - 2 - i, 0)];\r\n  }\r\n  const xp = left.concat(x, right),\r\n    y1 = lfilter(b, a, xp),\r\n    y2 = lfilter(b, a, [...y1].reverse()).reverse();\r\n  return y2.slice(pl, pl + n);\r\n}\r\nconst flattop = (M) => {\r\n  const a0 = 1,\r\n    a1 = 1.93,\r\n    a2 = 1.29,\r\n    a3 = 0.388,\r\n    a4 = 0.028,\r\n    N = M - 1,\r\n    w = Array(M);\r\n  for (let n = 0; n < M; n++) {\r\n    const p = (2 * Math.PI * n) / N;\r\n    w[n] =\r\n      a0 - a1 * Math.cos(p) + a2 * Math.cos(2 * p) - a3 * Math.cos(3 * p) + a4 * Math.cos(4 * p);\r\n  }\r\n  return w;\r\n};\r\nfunction smoother({ signal, size = 10, mirror = true }) {\r\n  size = Math.max(1, Math.min(size, signal.length - 1));\r\n  const win = flattop(size),\r\n    sumw = win.reduce((a, b) => a + b, 0),\r\n    w = win.map((v) => v / sumw);\r\n  const pad = mirror ? [Array(size).fill(signal[0]), Array(size).fill(signal.at(-1))] : [[], []];\r\n  const src = pad[0].concat(signal, pad[1]),\r\n    y = convolveFull(src, w);\r\n  return mirror\r\n    ? y.slice(size, size + signal.length)\r\n    : y.slice(((w.length - 1) / 2) | 0, ((w.length - 1) / 2) | (0 + signal.length));\r\n}\r\nfunction peakIndexes(y, thres = 0, min_dist = 1) {\r\n  if (!y.length) return [];\r\n  const ymin = Math.min(...y),\r\n    ymax = Math.max(...y),\r\n    absThres = ymin + thres * (ymax - ymin);\r\n  const cand = [];\r\n  for (let i = 1; i < y.length - 1; i++)\r\n    if (y[i] > absThres && y[i] > y[i - 1] && y[i] > y[i + 1]) cand.push(i);\r\n  if (!cand.length) return [];\r\n  cand.sort((i, j) => y[j] - y[i]);\r\n  const taken = [],\r\n    bad = Array(y.length).fill(false);\r\n  for (const idx of cand) {\r\n    if (bad[idx]) continue;\r\n    taken.push(idx);\r\n    const s = Math.max(0, idx - min_dist),\r\n      e = Math.min(y.length - 1, idx + min_dist);\r\n    for (let k = s; k <= e; k++) bad[k] = true;\r\n  }\r\n  return taken.sort((a, b) => a - b);\r\n}\r\nfunction argmaxRange(x, s, e) {\r\n  s = Math.max(0, s);\r\n  e = Math.min(e, x.length);\r\n  if (e <= s) return { idx: -1, val: -Infinity };\r\n  let im = s,\r\n    vm = x[s];\r\n  for (let i = s + 1; i < e; i++)\r\n    if (x[i] > vm) {\r\n      vm = x[i];\r\n      im = i;\r\n    }\r\n  return { idx: im, val: vm };\r\n}\r\nfunction dedupPeaks(idxs, minDist) {\r\n  if (!idxs.length) return [];\r\n  const out = [idxs[0]];\r\n  for (let i = 1; i < idxs.length; i++) if (idxs[i] - out.at(-1) >= minDist) out.push(idxs[i]);\r\n  return out;\r\n}\r\nfunction isUphillPeak(sig, idx, pre = 4, post = 4) {\r\n  const i0 = Math.max(0, idx - pre),\r\n    i1 = Math.min(sig.length - 1, idx + post);\r\n  if (i1 - i0 < 3) return true;\r\n  return sig[idx] - sig[i0] > 0 && sig[i1] - sig[idx] < 0;\r\n}\r\nfunction localProminence(sig, idx, side) {\r\n  const L = Math.max(0, idx - side),\r\n    R = Math.min(sig.length - 1, idx + side);\r\n  let ml = +Infinity,\r\n    mr = +Infinity;\r\n  for (let i = L; i <= idx; i++) if (sig[i] < ml) ml = sig[i];\r\n  for (let i = idx; i <= R; i++) if (sig[i] < mr) mr = sig[i];\r\n  return sig[idx] - Math.max(ml, mr);\r\n}\r\nfunction localRange(sig, idx, side) {\r\n  const L = Math.max(0, idx - side),\r\n    R = Math.min(sig.length - 1, idx + side);\r\n  let mn = +Infinity,\r\n    mx = -Infinity;\r\n  for (let i = L; i <= R; i++) {\r\n    if (sig[i] < mn) mn = sig[i];\r\n    if (sig[i] > mx) mx = sig[i];\r\n  }\r\n  return Math.max(1e-9, mx - mn);\r\n}\r\nfunction widthAtHalfProm(sig, idx, side) {\r\n  const thr = sig[idx] - 0.5 * localProminence(sig, idx, side),\r\n    L0 = Math.max(0, idx - side),\r\n    R0 = Math.min(sig.length - 1, idx + side);\r\n  let L = idx,\r\n    Ri = idx;\r\n  while (L > L0 && sig[L] >= thr) L--;\r\n  while (Ri < R0 && sig[Ri] >= thr) Ri++;\r\n  return Ri - L;\r\n}\r\nfunction maxSlopesAround(sig, idx, side) {\r\n  const L0 = Math.max(0, idx - side),\r\n    R0 = Math.min(sig.length - 2, idx + side);\r\n  let up = 0,\r\n    down = 0;\r\n  for (let i = L0; i < idx; i++) up = Math.max(up, sig[i + 1] - sig[i]);\r\n  for (let i = idx; i <= R0; i++) down = Math.min(down, sig[i + 1] - sig[i]);\r\n  return { up, down };\r\n}\r\nfunction passesQRSShape(sig, idx, fs, SIG_LEV1, NOISE_LEV1) {\r\n  const side = R(0.12 * fs),\r\n    sideSlope = R(0.02 * fs),\r\n    prom = localProminence(sig, idx, side),\r\n    rng = localRange(sig, idx, side),\r\n    w = widthAtHalfProm(sig, idx, side);\r\n  const curv =\r\n    -(sig[Math.max(1, idx - 1)] - 2 * sig[idx] + sig[Math.min(sig.length - 2, idx + 1)]) / rng;\r\n  const { up, down } = maxSlopesAround(sig, idx, sideSlope);\r\n  const promThr = Math.max(\r\n    SHAPE_PROM_FRAC * Math.max(1e-9, SIG_LEV1 - NOISE_LEV1),\r\n    0.06 * Math.max(1e-9, SIG_LEV1),\r\n  );\r\n  const wMin = R(SHAPE_WIDTH_MIN_SEC * fs),\r\n    wMax = R(SHAPE_WIDTH_MAX_SEC * fs),\r\n    slopeThr = SHAPE_SLOPE_MIN_FRAC * rng;\r\n  return !(\r\n    prom < promThr ||\r\n    w < wMin ||\r\n    w > wMax ||\r\n    curv < SHAPE_CURV_MIN_FRAC ||\r\n    up < slopeThr ||\r\n    -down < slopeThr\r\n  );\r\n}\r\nfunction postPeakDropOK(sig, idx, fs) {\r\n  const win = R(RS_DROP_WIN_SEC * fs),\r\n    Rb = Math.min(sig.length - 1, idx + win);\r\n  let mn = +Infinity;\r\n  for (let i = idx; i <= Rb; i++) if (sig[i] < mn) mn = sig[i];\r\n  return sig[idx] - mn >= RS_DROP_FRAC * localRange(sig, idx, R(0.12 * fs));\r\n}\r\nconst sinc = (x) => (x === 0 ? 1 : Math.sin(Math.PI * x) / (Math.PI * x));\r\nconst hamming = (N) =>\r\n  Array.from({ length: N }, (_, n) => 0.54 - 0.46 * Math.cos((2 * Math.PI * n) / (N - 1)));\r\nfunction designFIRLowpass(numTaps, fc, fs) {\r\n  const M = numTaps - 1,\r\n    w = hamming(numTaps),\r\n    h = Array(numTaps),\r\n    norm = (2 * fc) / fs;\r\n  for (let n = 0; n < numTaps; n++) {\r\n    const m = n - M / 2;\r\n    h[n] = norm * sinc(norm * m) * w[n];\r\n  }\r\n  const s = h.reduce((a, b) => a + b, 0);\r\n  for (let n = 0; n < numTaps; n++) h[n] /= s;\r\n  return h;\r\n}\r\nfunction downsample400to200(x) {\r\n  const h = designFIRLowpass(129, 80, 400),\r\n    y = filtfilt(h, [1], x, 3 * (h.length - 1)),\r\n    z = Array((y.length / 2) | 0);\r\n  for (let k = 0; k < z.length; k++) z[k] = y[2 * k];\r\n  return z;\r\n}\r\n\r\nconst BUTTER_200_LOW_12HZ = {\r\n  b: [0.00475052, 0.01425157, 0.01425157, 0.00475052],\r\n  a: [1.0, -2.25008508, 1.75640138, -0.46831211],\r\n};\r\nconst BUTTER_200_HIGH_5HZ = {\r\n  b: [0.85449723, -2.56349169, 2.56349169, -0.85449723],\r\n  a: [1.0, -2.6861574, 2.41965511, -0.73016535],\r\n};\r\n\r\nfunction rpeak_detection_200_pos(ecg, fs) {\r\n  const ecg0 = ecg.map((v) => v - mean(ecg));\r\n  let ecg_l = filtfilt(BUTTER_200_LOW_12HZ.b, BUTTER_200_LOW_12HZ.a, ecg0);\r\n  const m1 = maxAbs(ecg_l);\r\n  if (m1) ecg_l = ecg_l.map((v) => v / m1);\r\n  let ecg_h = filtfilt(\r\n    BUTTER_200_HIGH_5HZ.b,\r\n    BUTTER_200_HIGH_5HZ.a,\r\n    ecg_l,\r\n    3 * (Math.max(BUTTER_200_HIGH_5HZ.b.length, BUTTER_200_HIGH_5HZ.a.length) - 1),\r\n  );\r\n  const m2 = maxAbs(ecg_h);\r\n  if (m2) ecg_h = ecg_h.map((v) => v / m2);\r\n  const b_diff = [1, 2, 0, -2, -1].map((v) => (v * fs) / 8),\r\n    pad =\r\n      3 * (Math.max(BUTTER_200_HIGH_5HZ.b.length, BUTTER_200_HIGH_5HZ.a.length, b_diff.length) - 1);\r\n  let ecg_d = filtfilt(b_diff, [1], ecg_h, pad);\r\n  const md = maxAbs(ecg_d);\r\n  if (md) ecg_d = ecg_d.map((v) => v / md);\r\n  let ecg_s = smoother({ signal: ecg_d.map((v) => v * v), size: R(0.06 * fs), mirror: true });\r\n  const ecg_m = convolveFull(ecg_s, Array(R(0.15 * fs)).fill(1 / R(0.15 * fs)));\r\n  const locs = peakIndexes(ecg_m, 0, R(MIN_DIST_SEC * fs)),\r\n    pks = locs.map((i) => ecg_m[i]);\r\n\r\n  const qrs_i = [];\r\n  let qrs_i_raw = [];\r\n  const twoSec = 2 * fs + 1;\r\n  let THR_SIG = Math.max(...ecg_m.slice(0, Math.min(twoSec, ecg_m.length))) / 3;\r\n  let SIG_LEV = THR_SIG,\r\n    NOISE_LEV = mean(ecg_m.slice(0, Math.min(twoSec, ecg_m.length))) / 2;\r\n  let THR_SIG1 = Math.max(...ecg_h.slice(0, Math.min(twoSec, ecg_h.length))) / 3;\r\n  let SIG_LEV1 = THR_SIG1,\r\n    NOISE_LEV1 = mean(ecg_h.slice(0, Math.min(twoSec, ecg_h.length))) / 2;\r\n\r\n  let Beat_C = 0,\r\n    Check_Flag = 0,\r\n    lastAccepted = -Infinity;\r\n\r\n  const avgDiff = (seg) => (seg.length > 1 ? mean(seg.slice(1).map((v, k) => v - seg[k])) : 0);\r\n\r\n  for (let i = 0; i < pks.length; i++) {\r\n    const half = R(SEARCH_WIN_SEC * fs),\r\n      s = Math.max(0, locs[i] - half),\r\n      e = Math.min(ecg_h.length, locs[i] + half + 1);\r\n    const { idx: x_i_abs, val: y_i } = argmaxRange(ecg_h, s, e);\r\n    const sinceLastAccepted = locs[i] - lastAccepted;\r\n    if (sinceLastAccepted < R(ABS_REFRACT_SEC * fs)) continue;\r\n\r\n    if (Beat_C >= 9) {\r\n      const diffs = [];\r\n      for (let k = Beat_C - 9; k < Beat_C - 1; k++) diffs.push(qrs_i[k + 1] - qrs_i[k]);\r\n      var mean_RR = mean(diffs);\r\n      var m_selected_RR = mean_RR;\r\n    } else {\r\n      var mean_RR = 0,\r\n        m_selected_RR = 0;\r\n    }\r\n    const test_m = m_selected_RR || mean_RR || 0;\r\n\r\n    let rrMedRecent = null;\r\n    if (Beat_C >= 3) {\r\n      const diffs = [];\r\n      const st = Math.max(1, Beat_C - 8);\r\n      for (let k = st; k < Beat_C; k++) diffs.push(qrs_i[k] - qrs_i[k - 1]);\r\n      rrMedRecent = median(diffs.filter((d) => d > 0));\r\n    }\r\n    const sinceLast = Beat_C > 0 ? locs[i] - qrs_i[Beat_C - 1] : Infinity;\r\n    let rrGateOK = true;\r\n    if (RR_GUIDE_ENABLE && rrMedRecent && isFinite(rrMedRecent)) {\r\n      const early = R(RR_GUIDE_MIN_FRAC * rrMedRecent);\r\n      if (sinceLast < early)\r\n        rrGateOK =\r\n          pks[i] >= RR_GUIDE_STRONG_MULT * THR_SIG && y_i >= RR_GUIDE_STRONG_MULT * THR_SIG1;\r\n    }\r\n\r\n    if (Beat_C >= 2) {\r\n      const prevRR = qrs_i[Beat_C - 1] - qrs_i[Beat_C - 2];\r\n      if (sinceLastAccepted < R(REL_REFRACT_FRAC * prevRR)) {\r\n        const veryStrong = pks[i] >= 1.4 * THR_SIG && y_i >= 1.4 * THR_SIG1;\r\n        if (!veryStrong) continue;\r\n      }\r\n    }\r\n\r\n    let accepted = false;\r\n    const acceptQRS = (locIdx, amp_m, absIdx_h, amp_h) => {\r\n      if (amp_h <= 0) return;\r\n      if (!isUphillPeak(ecg_h, absIdx_h, 4, 4)) return;\r\n      if (SHAPE_FILTER && !passesQRSShape(ecg_h, absIdx_h, fs, SIG_LEV1, NOISE_LEV1)) return;\r\n      if (!postPeakDropOK(ecg_h, absIdx_h, fs)) return;\r\n      Beat_C++;\r\n      qrs_i.push(locIdx);\r\n      lastAccepted = locIdx;\r\n      if (amp_h >= THR_SIG1) {\r\n        qrs_i_raw.push(absIdx_h);\r\n        SIG_LEV1 = 0.125 * amp_h + 0.875 * SIG_LEV1;\r\n      }\r\n      SIG_LEV = 0.125 * amp_m + 0.875 * SIG_LEV;\r\n      accepted = true;\r\n    };\r\n\r\n    if (pks[i] >= THR_SIG && rrGateOK) {\r\n      if (Beat_C >= 3) {\r\n        if (test_m && locs[i] - qrs_i[Beat_C - 1] <= R(0.5 * test_m)) Check_Flag = 1;\r\n        if (locs[i] - qrs_i[Beat_C - 1] <= R(0.36 * fs) || Check_Flag === 1) {\r\n          const seg1 = ecg_m.slice(Math.max(0, locs[i] - R(0.07 * fs)), locs[i] + 1);\r\n          const seg2 = ecg_m.slice(\r\n            Math.max(0, qrs_i[Beat_C - 1] - R(0.07 * fs) - 1),\r\n            qrs_i[Beat_C - 1] + 1,\r\n          );\r\n          const Slope1 = avgDiff(seg1),\r\n            Slope2 = avgDiff(seg2);\r\n          Check_Flag = Math.abs(Slope1) <= Math.abs(T_WAVE_SLOPE_RATIO * Slope2) ? 1 : 0;\r\n        }\r\n      }\r\n      if (!Check_Flag) acceptQRS(locs[i], pks[i], x_i_abs, y_i);\r\n    }\r\n\r\n    if (MICRO_R_ENABLE && !accepted && rrGateOK) {\r\n      const inWin = sinceLast >= R(MICRO_R_LO_SEC * fs) && sinceLast <= R(MICRO_R_HI_SEC * fs);\r\n      if (inWin && y_i > 0) {\r\n        const side = R(MICRO_R_SIDE_SEC * fs),\r\n          prom = localProminence(ecg_h, x_i_abs, side);\r\n        const promThr = Math.max(\r\n          MICRO_R_PROM_FRAC * Math.max(1e-9, SIG_LEV1 - NOISE_LEV1),\r\n          MICRO_R_MIN_POS_FRAC * Math.max(1e-9, SIG_LEV1),\r\n        );\r\n        if (\r\n          prom > promThr &&\r\n          isUphillPeak(ecg_h, x_i_abs, 4, 4) &&\r\n          postPeakDropOK(ecg_h, x_i_abs, fs)\r\n        )\r\n          acceptQRS(locs[i], pks[i], x_i_abs, y_i);\r\n      }\r\n    }\r\n\r\n    if (!accepted && rrGateOK) {\r\n      const okShortRR = sinceLast >= R(0.2 * fs) && sinceLast <= R(0.6 * fs);\r\n      if (pks[i] >= RESCUE_SCALE * THR_SIG && okShortRR && y_i >= RESCUE_SCALE * THR_SIG1)\r\n        acceptQRS(locs[i], pks[i], x_i_abs, y_i);\r\n    }\r\n\r\n    if (!accepted) {\r\n      NOISE_LEV1 = 0.125 * Math.max(0, y_i) + 0.875 * NOISE_LEV1;\r\n      NOISE_LEV = 0.125 * pks[i] + 0.875 * NOISE_LEV;\r\n    }\r\n    if (NOISE_LEV || SIG_LEV) THR_SIG = NOISE_LEV + 0.25 * Math.abs(SIG_LEV - NOISE_LEV);\r\n    if (NOISE_LEV1 || SIG_LEV1) THR_SIG1 = NOISE_LEV1 + 0.25 * Math.abs(SIG_LEV1 - NOISE_LEV1);\r\n    Check_Flag = 0;\r\n  }\r\n\r\n  (function () {\r\n    let peaks = qrs_i_raw.slice();\r\n    if (peaks.length < 2) {\r\n      qrs_i_raw = peaks;\r\n      return;\r\n    }\r\n    const rrs = [];\r\n    for (let k = 1; k < peaks.length; k++) rrs.push(peaks[k] - peaks[k - 1]);\r\n    let RRexp = median(rrs) || R(0.8 * fs);\r\n    const added = [];\r\n    for (let k = 1; k < peaks.length; k++) {\r\n      const prev = peaks[k - 1],\r\n        next = peaks[k],\r\n        gap = next - prev;\r\n      if (gap > Math.max(GAPFILL_LONG_SEC * fs, GAPFILL_RR_FACTOR * RRexp)) {\r\n        const candM = argmaxRange(ecg_m, prev + R(0.25 * gap), prev + R(0.75 * gap));\r\n        if (candM.idx >= 0) {\r\n          const half = R(SEARCH_WIN_SEC * fs),\r\n            locH = argmaxRange(ecg_h, candM.idx - half, candM.idx + half + 1);\r\n          const okM = candM.val >= GAPFILL_LOW_SCALE * THR_SIG,\r\n            okH = locH.val >= GAPFILL_LOW_SCALE * THR_SIG1;\r\n          if (\r\n            okM &&\r\n            okH &&\r\n            locH.val > 0 &&\r\n            isUphillPeak(ecg_h, locH.idx, 4, 4) &&\r\n            postPeakDropOK(ecg_h, locH.idx, fs)\r\n          )\r\n            added.push(locH.idx);\r\n        }\r\n      }\r\n    }\r\n    if (added.length)\r\n      peaks = dedupPeaks(\r\n        peaks.concat(added).sort((a, b) => a - b),\r\n        R(DEDUP_SEC * fs),\r\n      );\r\n    qrs_i_raw = peaks;\r\n  })();\r\n\r\n  return qrs_i_raw.map((v) => Math.max(0, Math.min(ecg.length - 1, R(v))));\r\n}\r\n\r\nclass Pan_Tompkins_Plus_Plus_Plus {\r\n  constructor() {\r\n    this.minRRsamples = null;\r\n    this.minRRsec = null;\r\n    this.minRRms = null;\r\n  }\r\n  get_name() {\r\n    return 'Pan_Tompkins_Plus_Plus_Plus';\r\n  }\r\n  rpeak_detection(ecg400) {\r\n    const ecg200 = downsample400to200(ecg400);\r\n    const r200 = rpeak_detection_200_pos(ecg200, 200);\r\n    const refined = r200\r\n      .map((i200) => {\r\n        const guess = i200 * 2,\r\n          s = Math.max(0, guess - 2),\r\n          e = Math.min(ecg400.length, guess + 3),\r\n          loc = argmaxRange(ecg400, s, e);\r\n        return loc.idx >= 0 && loc.val > 0 && isUphillPeak(ecg400, loc.idx, 4, 4) ? loc.idx : guess;\r\n      })\r\n      .sort((a, b) => a - b);\r\n    const out = dedupPeaks(refined, R(DEDUP_SEC * 400));\r\n    if (out.length >= 2) {\r\n      let minSamp = Infinity;\r\n      for (let i = 1; i < out.length; i++) {\r\n        const d = out[i] - out[i - 1];\r\n        if (d < minSamp) minSamp = d;\r\n      }\r\n      this.minRRsamples = minSamp;\r\n      this.minRRsec = minSamp / 400;\r\n      this.minRRms = this.minRRsec * 1000;\r\n    } else this.minRRsamples = this.minRRsec = this.minRRms = null;\r\n    return out;\r\n  }\r\n}\r\n\r\nexport { Pan_Tompkins_Plus_Plus_Plus };\r\n","import {\n  getDifferentiatedSignal,\n  getHighPassFilterSignal,\n  getLowPassFilterSignal,\n  getMovingWindowSignal,\n  getRPeaks,\n  getSquaredSignal,\n} from './signalConversionPT';\nimport { Pan_Tompkins_Plus_Plus_Plus } from './signalConversionPT+++';\n\nexport const analyzePT = (signal, type, channel) => {\n  const signalTime = signal[channel].data.map((obj) => obj[0]);\n  const signalData = signal[channel].data.map((obj) => obj[1]);\n  const signalTransform = (data) => signalTime.map((item, i) => [item, data[i]]);\n  let peaks;\n  if (type === 1) {\n    const lowPassSignal = getLowPassFilterSignal(signalData);\n    const highPassSignal = getHighPassFilterSignal(lowPassSignal);\n    const differentiatedSignal = getDifferentiatedSignal(signalData);\n    const squaredSignal = getSquaredSignal(differentiatedSignal);\n    const movingWindowSignal = getMovingWindowSignal(squaredSignal);\n    peaks = getRPeaks(movingWindowSignal, signalData);\n  } else if (type === 2) {\n    const newDetector = new Pan_Tompkins_Plus_Plus_Plus();\n    peaks = newDetector.rpeak_detection(signalData);\n  }\n  return {\n    peaks: {\n      series: signalTime.map((item, i) => [item, peaks.includes(i) ? 50 : 0]),\n      data: peaks,\n    },\n    peaksPlusPlus: {\n      series: signalTime.map((item, i) => [item, peaks.includes(i) ? 50 : 0]),\n      data: peaks,\n    },\n  };\n};\n","/* eslint-env worker */\n/* eslint-disable no-restricted-globals */\n\nimport { analyzeATN } from '../algorithms/ATNAlgorithm/mainSignalConversion.js';\nimport { analyzeCMD } from '../algorithms/CMDAlgorithm/mainConversionCMD.js';\nimport { detectRPeaks } from '../algorithms/GPTAlgorithm/mainConversionGPT.js';\nimport { analyzeECGKHO } from '../algorithms/KHOAlgorithm/mainSignalConversion.js';\nimport { preprocessSignal } from '../preprocessSignal/preprocessSignal.js';\nimport { analyzePT } from '../algorithms/PTAlgorithm/mainConversionPT.js';\n\nconst registry = {\n  PT: (series, channel) =>\n    analyzePT([{ data: preprocessSignal(series, channel).newPreprocess.newFourth }], 1, 0).peaks\n      .data,\n  PTPlus: (series, channel) =>\n    analyzePT([{ data: preprocessSignal(series, channel).biggestPreprocess.detrended }], 2, 0)\n      .peaksPlusPlus.data,\n  KHO: (series, channel) =>\n    analyzeECGKHO([{ data: preprocessSignal(series, channel).mvmFiltered }], 0).peaks.data,\n  ATN: (series, channel) =>\n    analyzeATN([{ data: preprocessSignal(series, channel).mvmFiltered }], 0).peaks.data,\n  CMD1: (series, channel) =>\n    analyzeCMD([{ data: preprocessSignal(series, channel).newPreprocess.newSecond }], 1, 0).data,\n  CMD2: (series, channel) =>\n    analyzeCMD([{ data: preprocessSignal(series, channel).notchFilteredML }], 2, 0).data,\n  GPT: (series, channel) =>\n    detectRPeaks([{ data: preprocessSignal(series, channel).biggestPreprocess.bp }], 0).data,\n};\n\naddEventListener('message', (e) => {\n  const { name, input, channel } = e.data;\n  try {\n    const fn = registry[name];\n    if (!fn) throw new Error(`Unknown task name: ${name}`);\n    const result = fn(input, channel);\n    postMessage({ ok: true, name, result });\n  } catch (err) {\n    postMessage({ ok: false, name, error: String(err), stack: err?.stack });\n  }\n});\n"],"names":["getTopValue","data","condition","max","Infinity","min","i","length","BANDS","clamp","x","lo","hi","Math","sinc","sin","PI","firLowpass","wc","M","w","L","Array","n","cos","hamming","h","k","firBandpass","f1","f2","fs","arguments","undefined","w1","w2","h2","h1","runFilterBank","signal","filtered","map","_ref","band","_ref2","y","m","pad","floor","acc","xi","convSame","decimated","out","ceil","j","downsample","analyzeATN","channel","signalTime","obj","signalData","signalTransform","item","filteredSignal1","filteredSignal2","filteredSignal3","filteredSignal4","newPeaks","filteredSignal","threshold1","eps","a","b","v","o","push","history","ynm1","median","arr","s","sort","mad","abs","bandEnergyAt","w3","w4","positiveMaximaIndex","raw","best","bestI","aa","bb","slopeAround","rad","round","c","w1i","w2i","w3i","w4i","Number","isNaN","mean","from","_","s1","s2","s3","s4","y2","slice","y3","y4","y5","Ld","P1","P2","P4","a2","a3","a4","a5","neighborAvg","P","FL1","FL2","FL4","allEvents","idx","findPeaks","fineRad","EventsL1","p","base","meanL1","reduce","NL","SL","detectionBlock","mwi","Events","NL0","SL0","thr","sumSig","sumNoi","Signal","Noise","VDs","Class","Ds","B1","B2","ClassL3","C1","C2","SignalL3","NoiseL3","SL4","NL4","SignalL4","NoiseL4","SignalL5","periods","meanperiod","movingAverage","fill","peaks0","eIdx","eBest","ev","posI","peaks","Set","refr","refractoryMs","keep","filter","dsVal","weakDs","bins","total","mT","bestT","bestVar","t","w0","m0","m1","vb","otsuThreshold","ampsStrong","medAmpStrong","slopesStrong","slopeCut","localAmpBaseline","pos","mid","to","neigh","extra","dsOk","baseAmp","ampOk","slopeOk","nearest","d","concat","newDetectRPeaksATN","series","includes","filtfiltFIR","nPad","xPad","N","Float64Array","_x","_x2","reflectPad","y1","convFIR","reverse","subarray","detectECGPeaksStages","opts","firTaps","mwiSec","refractorySec","refineSec","indices","stages","bpArr","dArr","sArr","mArr","thArr","NaN","taps","win","f","sum","designFIRBandpass","yBP","set","W","dBuf","dpos","dCount","mwiBuf","mpos","msum","mCount","mRingLen","mRing","SPKI","NPKI","TH1","initialized","initMax","initCount","initNeeded","lastR","rrHist","mPrev2","mPrev1","mCurr","mValid","i1","i3","i4","mShow","idxM","meanRR","missRR","start","end","accept","bandpass","differentiated","squared","mVal","_opts$refineSec","delay","refine","guess","R","bestIdx","bestVal","denom","delta","cand","shift","detectQRS_JS","inputSignal","X","variance","medianOf","reflectIndex","movingMedianMirror","sig","half","cubicSplineEval","xk","yk","xs","x0","x1","y0","dy","alpha","l","mu","z","ii","dx","findExtrema","maxima","minima","unshift","emd","_maxImfs","_maxSiftings","imfs","residue","tol","sqrt","ex","it","ex2","upper","lower","hNext","exA","gaussianRandomArray","u1","random","u2","mag","log","z0","z1","X1","Xmean","maxabs","yy_pre","idxs","thrIdx","yy","modes","noiseStd","ensembleSize","runs","maxCount","e","noise","noisy","avg","r","ensembleEMD","K","y_signal","y_pos","posVals","peakObjs","minH","minD","minProm","promWin","val","kept","some","leftMin","rightMin","prom","findPositivePeaks","minPeakDistanceSec","locs","analyzeCMD","type","transformPeaks","result","tempResult","MIN_GAP","Float32Array","newF32","countZeroCrossings","prev","countExtrema","c0","buildEnvelope","outEnv","firstIdx","firstVal","i2","v1","v2","slope","lastIdx","lastVal","siftOnce","upperEnv","lowerEnv","meanEnv","maxIdx","minIdx","sdChange","curr","num","extractIMF","work","okSift","sd","ext","zc","isIMFshape","imf","newResidue","useStart","useEndExclusive","used","candIdx","candAmp","maxAmp","tmp","u","med","fIdx","fAmp","keepIdx","keepAmp","curIdx","curAmp","amp","k2","center","bestV","i0","dedup","detectRPeaks","toFloat32","ensureOdd","designHPBiquad","fc","Q","cosw0","b0","b1","b2","a0","a1","designButterworthHP_SOS","order","SQRT2","biquadCascade","sos","z2","xn","yn","filtfiltBiquad","designLPBiquad","mapAbsMinus","quantile","q","minOf","maxOf","frac","vK","selectKthInPlace","left","right","swap","pivot","makeSampleView","maxSample","stride","centeredMovingAverage","xp","ps","msToSamples","ms","rrMedian","rrBuf","rrBufPush","rr","preSlopeMag","preW","maxd","sortUniqueInt32","last","Int32Array","absMinus","argmaxInRange","bi","bv","snapToHillZeroCross","bestD","dL","dR","D","positiveProminence","seg","leftMed","rightMed","sidedSlopeCheck","postW","up","nL","dj","dn","nR","centeredSlidingMedian","nOut","Heap","cmp","this","prototype","size","peek","pop","top","delayed","Map","loSize","hiSize","prune","heap","cnt","get","delete","rebalance","add","remove","outIdx","slidingMedianCausal","bandpassQRS","ecg","hp","lp","orderHP","orderLP","sosHP","sosLP","designButterworthLP_SOS","robustNormalize","returnStats","stats","centerMode","scaleMode","scale","sample","stdDev","q1","q3","p95","p95abs","invS","clipNsigma","isFinite","C","ptFeature","xIn","deriv","diff1Central","diff5Symmetric","mwiMs","refineOnRaw","xRaw","idxIn","toInt32Array","HALF","winMs","MICRO","microWin","PRE","POST","MADW","ZC_WIN","ref","xBandpass","rough","tkeoFeature","next","xBaseRemoved","method","returnBaseline","baseline","win1","win1Ms","win2","win2Ms","base1","base2","hpHz","removeBaseline","xBP","xNR","wPT","sTKEO","candPT","wIn","refrSamp","initLen","initWinSec","thrAlpha","sbFactor","searchBackFactor","initSeg","THR","peakVals","subMaxIdx","subMaxVal","pIdx","pVal","rrMed","adaptivePeakPick","candTK","returnFeature","feature","tkeoCandidatePeaks","Object","assign","fusedMeta","lists","mergeTolMs","feats","isArray","xRef","all","score","src","returnMeta","meta","group","cur","flushGroup","g","sources","votes","fuseCandidates","rIdxIn","feat","minRR","minRRMs","tWin","tSuppressMs","preSlopeMs","tSlopeFrac","sbF","sbK","sPrev","ins","rrPostprocess","rClean","xRefIn","Wloc","Lpre","Rpost","Wder","Wmad","smoothDiff","isLocalMax","Ll","Rr","upPos","upTot","dnNeg","dnTot","Lm2","Rm2","promThr","keepHillsOnlyV2","zeros","pix","designBandpassForECG","A","nyq","wl","wh","window","_arguments$","Wl","Wh","ideal","fir1Bandpass","processSignal","filter_signal","fullConv","A_even_order","removeGroupDelayAfterConv","kmin","kmax","conv","nonlinear","sign","new_signal","preprocessKHO","MWMFiltered","L1","L2","flen1","flen2","ch","movingMedian","x2","mwmFilter","analyzeECGKHO","transformSignal","preFiltered","finalPeaks","threshold","positive","negative","locs_pos","locs_neg","difference_pos","difference_neg","ind_pos","forEach","diff","ind_neg","upper_limit","lower_limit","event","new_event","dist_event","new_new_event","new_dist_event","new_new_event_filtered","filtered_events","final_event","abs_max","abs_min","segment","RR_amp","abs_nonlinear","RR_location","findIndex","value","RR_amp_values","RR_time","minDistance","getFinalResult","nonlinearizedSignal","HFSignal","zeroCrossingSignal","toF64","medianFilter","windowSamples","xin","samples","oddWindowSize","buf","stage1_preprocess","hpf","dt","RC","highPassOnePole","corrected","win1_ms","win2_ms","doubleMedianBaselineSubtract","detrended","biquadFilter","coeffs","rbjLowpassCoeffs","biquadCascadeForward","sections","filtfiltCascade","padSeconds","padded","rbjHighpassCoeffs","BUTTER_QS_4","hpSections","lpSections","biggestPreprocessFilter","bp","hpOrder","lpOrder","zeroPhase","sec","bandpass5to18","savGolayFilter","mode","F","nl","nr","transpose","T","matMul","B","aR","aC","bC","aik","invertMatrix","I","col","piv","pivotVal","factor","factorial","sgDesign","designMatrixCentered","AT","ATA","pinv","G","sgDesignAsym","designMatrixAsym","GA","convAlign","kernel","centerIndex","getColumn","row","pow","sgApply","savGolSmooth","removeBaselineMedianCascade","win1Sec","win2Sec","removeResidualDC","fixNonFinite","TypeError","xWork","toFloat64Array","fixNonFiniteLinear","makeOdd","clampOdd","medianFilterReflect","robustMedian","finite","isFin","firstFin","len","leftPad","reflectLeft","rightPad","reflectRight","outVal","inVal","lowerBound","splice","applyNotch50Hz","f0","padMult","designNotchBiquad","basePad","padLen","iirBiquadDF2T","reverseFloat64","in_n","designButterworthLPSOS","orderEven","Qs","butterworthQs","designLowpassBiquadRBJ","zeta","iirCascadeDF2T","filtfiltCascadeSOS","applyBandpassButterworth","designHighpassBiquadRBJ","designButterworthHPSOS","preprocessSignal","transformData","mvmFiltered","medianOfRange","lowPassFilteredML","yn1","yn2","impulseResponse13","Nx","Nh","Ny","lpFilterMatlab","highPassFilteredML","impulseResponse","hpFilterMatlab","notchFilteredML","Fo","nfact","lfilter","pre","post","atStart","filtfiltIIR","nb","na","notch50HzCombFILT","savGolayFilteredMLC","biggestPreprocess","newFirst","newSecond","newThird","applyLowpassButterworth","newFourth","newPreprocess","normalize","maxVal","minVal","correctVal","maxAbs","convolveFull","filtfilt","padlen","edge","pl","smoother","mirror","flattop","sumw","at","argmaxRange","im","vm","dedupPeaks","minDist","isUphillPeak","localProminence","side","ml","mr","localRange","mn","mx","passesQRSShape","SIG_LEV1","NOISE_LEV1","sideSlope","rng","L0","R0","Ri","widthAtHalfProm","curv","down","maxSlopesAround","wMin","wMax","slopeThr","postPeakDropOK","Rb","designFIRLowpass","numTaps","norm","BUTTER_200_LOW_12HZ","BUTTER_200_HIGH_5HZ","rpeak_detection_200_pos","ecg0","ecg_l","ecg_h","m2","b_diff","ecg_d","md","ecg_s","ecg_m","thres","min_dist","ymin","absThres","taken","bad","peakIndexes","pks","qrs_i","qrs_i_raw","twoSec","THR_SIG","SIG_LEV","NOISE_LEV","THR_SIG1","Beat_C","Check_Flag","lastAccepted","avgDiff","x_i_abs","y_i","sinceLastAccepted","diffs","m_selected_RR","mean_RR","test_m","rrMedRecent","sinceLast","rrGateOK","prevRR","accepted","acceptQRS","locIdx","amp_m","absIdx_h","amp_h","seg1","seg2","Slope1","Slope2","okShortRR","rrs","RRexp","added","gap","candM","locH","okM","okH","Pan_Tompkins_Plus_Plus_Plus","constructor","minRRsamples","minRRsec","minRRms","get_name","rpeak_detection","ecg400","downsample400to200","i200","loc","DEDUP_SEC","minSamp","analyzePT","lowPassSignal","lowPassFilterSignal","getLowPassFilterSignal","differentiatedSignal","highPassFilterSignal","getHighPassFilterSignal","getDifferentiatedSignal","squaredSignal","getSquaredSignal","movingWindowSignal","movedWindowSignal","windowSize","getMovingWindowSignal","dataSignal","maxValue","binary","R_locs","filteredRLocs","getRPeaks","newDetector","peaksPlusPlus","registry","PT","PTPlus","KHO","ATN","CMD1","CMD2","GPT","addEventListener","name","input","fn","Error","postMessage","ok","err","error","String","stack"],"sourceRoot":""}