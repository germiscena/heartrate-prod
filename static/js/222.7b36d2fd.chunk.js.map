{"version":3,"file":"static/js/222.7b36d2fd.chunk.js","mappings":"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","sources":["preprocessSignal/biggestPreprocess.js","preprocessSignal/newPreprocess.js","preprocessSignal/preprocessSignal.js","preprocessSignal/mainConversions.js","preprocessSignal/preprocess.worker.js"],"sourcesContent":["function toF64(arr) {\n  if (arr instanceof Float64Array) return arr.slice();\n  const out = new Float64Array(arr.length);\n  for (let i = 0; i < arr.length; i++) out[i] = arr[i];\n  return out;\n}\n\nfunction reflectIndex(i, N) {\n  if (N === 1) return 0;\n  while (i < 0 || i >= N) {\n    if (i < 0) i = -i - 1;\n    if (i >= N) i = 2 * N - i - 1;\n  }\n  return i;\n}\n\nfunction oddWindowSize(samples) {\n  const s = Math.max(1, Math.round(samples));\n  return s % 2 === 0 ? s + 1 : s;\n}\n\nfunction highPassOnePole(x, fs, fc = 0.5) {\n  const dt = 1 / fs;\n  const RC = 1 / (2 * Math.PI * fc);\n  const alpha = RC / (RC + dt);\n\n  const N = x.length;\n  const xin = toF64(x);\n  const y = new Float64Array(N);\n  y[0] = 0;\n  for (let n = 1; n < N; n++) {\n    y[n] = alpha * (y[n - 1] + xin[n] - xin[n - 1]);\n  }\n  return y;\n}\n\nfunction medianFilter(x, windowSamples) {\n  const N = x.length;\n  const xin = toF64(x);\n  const W = oddWindowSize(windowSamples);\n  const half = (W - 1) >> 1;\n  const y = new Float64Array(N);\n  const buf = new Float64Array(W);\n\n  for (let n = 0; n < N; n++) {\n    for (let k = -half, j = 0; k <= half; k++, j++) {\n      buf[j] = xin[reflectIndex(n + k, N)];\n    }\n\n    const arr = Array.from(buf);\n    arr.sort((a, b) => a - b);\n    y[n] = arr[half];\n  }\n  return y;\n}\n\nfunction doubleMedianBaselineSubtract(x, fs, win1_ms = 200, win2_ms = 600) {\n  const w1 = Math.round((win1_ms / 1000) * fs);\n  const w2 = Math.round((win2_ms / 1000) * fs);\n\n  const m1 = medianFilter(x, w1);\n  const baseline = medianFilter(m1, w2);\n\n  const N = baseline.length;\n  const xin = toF64(x);\n  const corrected = new Float64Array(N);\n  for (let i = 0; i < N; i++) corrected[i] = xin[i] - baseline[i];\n\n  return { baseline, corrected };\n}\n\nfunction stage1_preprocess(ecg, fs = 400) {\n  const hpf = highPassOnePole(ecg, fs, 0.5);\n  const { baseline, corrected } = doubleMedianBaselineSubtract(hpf, fs, 200, 600);\n  return {\n    hpf,\n    baseline,\n    detrended: corrected,\n  };\n}\nfunction reflectPad(x, pad) {\n  const N = x.length;\n  const out = new Float64Array(N + 2 * pad);\n  for (let i = 0; i < pad; i++) {\n    out[i] = x[reflectIndex(pad - i - 1, N)];\n  }\n  for (let i = 0; i < N; i++) out[pad + i] = x[i];\n  for (let i = 0; i < pad; i++) {\n    out[pad + N + i] = x[reflectIndex(N - 2 - i, N)];\n  }\n  return out;\n}\n\nfunction biquadFilter(x, coeffs) {\n  const { b0, b1, b2, a1, a2 } = coeffs;\n  const N = x.length;\n  const xin = toF64(x);\n  const y = new Float64Array(N);\n\n  let x1 = 0,\n    x2 = 0;\n  let y1 = 0,\n    y2 = 0;\n\n  for (let n = 0; n < N; n++) {\n    const xn = xin[n];\n    const yn = b0 * xn + b1 * x1 + b2 * x2 - a1 * y1 - a2 * y2;\n    y[n] = yn;\n    x2 = x1;\n    x1 = xn;\n    y2 = y1;\n    y1 = yn;\n  }\n  return y;\n}\n\nfunction rbjLowpassCoeffs(fs, fc, Q = 1 / Math.SQRT2) {\n  const w0 = 2 * Math.PI * (fc / fs);\n  const cosw0 = Math.cos(w0);\n  const sinw0 = Math.sin(w0);\n  const alpha = sinw0 / (2 * Q);\n\n  let b0 = (1 - cosw0) / 2;\n  let b1 = 1 - cosw0;\n  let b2 = (1 - cosw0) / 2;\n  let a0 = 1 + alpha;\n  let a1 = -2 * cosw0;\n  let a2 = 1 - alpha;\n  b0 /= a0;\n  b1 /= a0;\n  b2 /= a0;\n  a1 /= a0;\n  a2 /= a0;\n\n  return { b0, b1, b2, a1, a2 };\n}\n\nfunction biquadCascadeForward(x, sections) {\n  let y = toF64(x);\n  for (const s of sections) y = biquadFilter(y, s);\n  return y;\n}\n\nfunction filtfiltCascade(x, sections, fs = 400, padSeconds = 0.25) {\n  const N = x.length;\n  if (N < 3) return toF64(x);\n\n  const pad = Math.min(N - 1, Math.max(12, Math.round(fs * padSeconds)));\n  const padded = reflectPad(x, pad);\n  let y = biquadCascadeForward(padded, sections);\n  y = y.reverse();\n  y = biquadCascadeForward(y, sections);\n  y = y.reverse();\n  const out = new Float64Array(N);\n  for (let i = 0; i < N; i++) out[i] = y[pad + i];\n  return out;\n}\n\nfunction rbjHighpassCoeffs(fs, fc, Q = 1 / Math.SQRT2) {\n  const w0 = 2 * Math.PI * (fc / fs);\n  const cosw0 = Math.cos(w0);\n  const sinw0 = Math.sin(w0);\n  const alpha = sinw0 / (2 * Q);\n\n  let b0 = (1 + cosw0) / 2;\n  let b1 = -(1 + cosw0);\n  let b2 = (1 + cosw0) / 2;\n  let a0 = 1 + alpha;\n  let a1 = -2 * cosw0;\n  let a2 = 1 - alpha;\n\n  b0 /= a0;\n  b1 /= a0;\n  b2 /= a0;\n  a1 /= a0;\n  a2 /= a0;\n  return { b0, b1, b2, a1, a2 };\n}\n\nconst BUTTER_QS_4 = [0.541196100146197, 1.3065629648763766];\n\nfunction hpSections(fs, fc, order = 2) {\n  if (order === 2) return [rbjHighpassCoeffs(fs, fc, 1 / Math.SQRT2)];\n  if (order === 4) return BUTTER_QS_4.map((q) => rbjHighpassCoeffs(fs, fc, q));\n}\n\nfunction lpSections(fs, fc, order = 4) {\n  if (order === 2) return [rbjLowpassCoeffs(fs, fc, 1 / Math.SQRT2)];\n  if (order === 4) return BUTTER_QS_4.map((q) => rbjLowpassCoeffs(fs, fc, q));\n}\n\nfunction bandpass5to18(\n  ecg,\n  fs = 400,\n  { hpOrder = 2, lpOrder = 4, zeroPhase = true, padSeconds = 0.25 } = {},\n) {\n  const sections = [...hpSections(fs, 5, hpOrder), ...lpSections(fs, 18, lpOrder)];\n  if (zeroPhase) {\n    return filtfiltCascade(ecg, sections, fs, padSeconds);\n  } else {\n    return sections.reduce((sig, sec) => biquadFilter(sig, sec), toF64(ecg));\n  }\n}\n\nexport function biggestPreprocessFilter(signal, fs = 400) {\n  const { detrended } = stage1_preprocess(signal, fs);\n  let bp = bandpass5to18(detrended, fs, { hpOrder: 4, lpOrder: 4, zeroPhase: true });\n\n  return {\n    bp,\n    detrended,\n  };\n}\n","export function removeBaselineMedianCascade(\n  x,\n  fs = 400,\n  {\n    // window lengths in seconds; tuned for fs=400\n    win1Sec = 0.2,\n    win2Sec = 0.6,\n    // if true, remove any tiny DC leftover after subtraction\n    removeResidualDC = false,\n    // replace NaN/Inf via linear interpolation\n    fixNonFinite = true,\n  } = {},\n) {\n  if (!Array.isArray(x) && !(x instanceof Float64Array)) {\n    throw new TypeError('x must be an array-like of numbers');\n  }\n  const N = x.length;\n  if (N === 0) return [];\n\n  // Prepare working copy in float64 for numerical stability\n  let xWork = toFloat64Array(x);\n\n  // Sanitize non-finite values\n  if (fixNonFinite) {\n    xWork = fixNonFiniteLinear(xWork);\n  }\n\n  // Compute odd window sizes, clamp to valid range\n  let w1 = makeOdd(Math.max(3, Math.round(win1Sec * fs)));\n  let w2 = makeOdd(Math.max(3, Math.round(win2Sec * fs)));\n  w1 = clampOdd(w1, N);\n  w2 = clampOdd(w2, N);\n\n  // First median (suppresses QRS)\n  const m1 = medianFilterReflect(xWork, w1);\n\n  // Second median (suppresses T waves) -> baseline estimate\n  const baseline = medianFilterReflect(m1, w2);\n\n  // Subtract baseline\n  const y = new Float64Array(N);\n  for (let i = 0; i < N; i++) y[i] = xWork[i] - baseline[i];\n\n  // Optional tiny DC removal (robust)\n  if (removeResidualDC) {\n    const med = robustMedian(y);\n    for (let i = 0; i < N; i++) y[i] -= med;\n  }\n\n  return Array.from(y);\n}\nfunction makeOdd(n) {\n  return n % 2 === 0 ? n + 1 : n;\n}\nfunction clampOdd(w, N) {\n  if (w <= 3) return 3;\n  if (w > N) return N % 2 === 1 ? N : N - 1;\n  return w % 2 === 1 ? w : w - 1;\n}\n\nfunction toFloat64Array(arr) {\n  if (arr instanceof Float64Array) return arr.slice();\n  const out = new Float64Array(arr.length);\n  for (let i = 0; i < arr.length; i++) out[i] = Number(arr[i]);\n  return out;\n}\n\nfunction robustMedian(a) {\n  const tmp = Array.from(a);\n  tmp.sort((u, v) => u - v);\n  const mid = Math.floor(tmp.length / 2);\n  return tmp.length % 2 ? tmp[mid] : 0.5 * (tmp[mid - 1] + tmp[mid]);\n}\n\nfunction fixNonFiniteLinear(x) {\n  const N = x.length;\n  const y = new Float64Array(N);\n  // Copy and mark finite\n  const finite = new Array(N);\n  for (let i = 0; i < N; i++) {\n    const v = x[i];\n    const isFin = Number.isFinite(v);\n    y[i] = isFin ? v : 0;\n    finite[i] = isFin;\n  }\n\n  // Find first finite\n  let firstFin = 0;\n  while (firstFin < N && !finite[firstFin]) firstFin++;\n  if (firstFin === N) {\n    // All non-finite -> return zeros\n    return y;\n  }\n  // Fill leading\n  for (let i = 0; i < firstFin; i++) y[i] = y[firstFin];\n\n  // Interpolate interior gaps\n  let i = firstFin;\n  while (i < N) {\n    if (finite[i]) {\n      i++;\n      continue;\n    }\n    const start = i - 1;\n    // Find end of gap\n    let j = i + 1;\n    while (j < N && !finite[j]) j++;\n    const end = j < N ? j : N - 1;\n    const y0 = y[start];\n    const y1 = y[end];\n    const len = end - start;\n    for (let k = 1; k < len; k++) {\n      y[start + k] = y0 + (y1 - y0) * (k / len);\n    }\n    // If trailing to end with no finite, fill with last known\n    if (j === N) {\n      for (let t = start + 1; t < N; t++) y[t] = y0;\n      break;\n    }\n    i = j + 1;\n  }\n  return y;\n}\n\nfunction medianFilterReflect(x, w) {\n  const N = x.length;\n  if (w <= 1 || N === 0) return Array.from(x);\n  const r = (w - 1) >> 1;\n\n  // Build reflected padded array: [leftPad | x | rightPad]\n  const leftPad = reflectLeft(x, r);\n  const rightPad = reflectRight(x, r);\n  const padded = new Float64Array(r + N + r);\n  padded.set(leftPad, 0);\n  padded.set(x, r);\n  padded.set(rightPad, r + N);\n\n  // Initial window (over padded indices [0 .. w-1])\n  const window = Array(w);\n  for (let i = 0; i < w; i++) window[i] = padded[i];\n  window.sort((a, b) => a - b);\n\n  const out = new Float64Array(N);\n  const mid = (w - 1) >> 1;\n\n  // For each output i, window covers padded [i .. i + w - 1]\n  for (let i = 0; i < N; i++) {\n    // Median for current window\n    out[i] = window[mid];\n\n    // Slide window: remove padded[i], add padded[i + w]\n    if (i < N - 1) {\n      const outVal = padded[i];\n      const inVal = padded[i + w];\n\n      // Remove one occurrence of outVal\n      let idx = lowerBound(window, outVal);\n      // lowerBound should point to a value >= outVal; ensure we remove matching one\n      while (idx < window.length && window[idx] !== outVal) idx++;\n      if (idx < window.length) window.splice(idx, 1);\n      else {\n        // Fallback: if not found due to FP quirks, remove closest\n        idx = lowerBound(window, outVal);\n        window.splice(Math.min(idx, window.length - 1), 1);\n      }\n\n      // Insert inVal keeping sorted order\n      const ins = lowerBound(window, inVal);\n      window.splice(ins, 0, inVal);\n    }\n  }\n\n  return Array.from(out);\n}\nfunction reflectLeft(x, r) {\n  // Take first r samples and mirror them\n  const out = new Float64Array(r);\n  for (let i = 0; i < r; i++) out[i] = x[r - 1 - i];\n  return out;\n}\nfunction reflectRight(x, r) {\n  // Take last r samples and mirror them\n  const out = new Float64Array(r);\n  const N = x.length;\n  for (let i = 0; i < r; i++) out[i] = x[N - 1 - i];\n  return out;\n}\nfunction lowerBound(arr, value) {\n  let lo = 0,\n    hi = arr.length;\n  while (lo < hi) {\n    const mid = (lo + hi) >>> 1;\n    if (arr[mid] < value) lo = mid + 1;\n    else hi = mid;\n  }\n  return lo;\n}\nexport function applyNotch50Hz(\n  x,\n  fs = 400,\n  { f0 = 50, Q = 35, zeroPhase = true, padMult = 3, fixNonFinite = true } = {},\n) {\n  let xWork = toFloat64Array(x);\n  if (fixNonFinite) xWork = fixNonFiniteLinear(xWork);\n\n  const nyq = fs / 2;\n  if (!(f0 > 0 && f0 < nyq)) {\n    return Array.from(xWork);\n  }\n  if (!Number.isFinite(Q) || Q < 5) Q = 5;\n  if (Q > 1000) Q = 1000;\n\n  // --- Design biquad\n  const { b, a } = designNotchBiquad(f0, fs, Q);\n\n  // --- Filtering\n  let y;\n  if (zeroPhase) {\n    y = filtfiltBiquad(xWork, b, a, padMult);\n  } else {\n    y = iirBiquadDF2T(xWork, b, a); // causal only (phase shift!)\n  }\n  return Array.from(y);\n}\n\nfunction designNotchBiquad(f0, fs, Q) {\n  const w0 = 2 * Math.PI * (f0 / fs);\n  const cosw0 = Math.cos(w0);\n  const sinw0 = Math.sin(w0);\n  const alpha = sinw0 / (2 * Q);\n\n  // Notch: zeros on unit circle at ±w0, poles set by alpha\n  let b0 = 1;\n  let b1 = -2 * cosw0;\n  let b2 = 1;\n  let a0 = 1 + alpha;\n  let a1 = -2 * cosw0;\n  let a2 = 1 - alpha;\n\n  // Normalize so a0 = 1\n  b0 /= a0;\n  b1 /= a0;\n  b2 /= a0;\n  a1 /= a0;\n  a2 /= a0;\n  a0 = 1;\n\n  return { b: [b0, b1, b2], a: [a0, a1, a2] };\n}\n\nfunction iirBiquadDF2T(x, b, a) {\n  const N = x.length;\n  const y = new Float64Array(N);\n  const b0 = b[0],\n    b1 = b[1],\n    b2 = b[2];\n  const a1 = a[1],\n    a2 = a[2];\n  let s1 = 0,\n    s2 = 0; // states\n\n  for (let n = 0; n < N; n++) {\n    const in_n = x[n];\n    const out = b0 * in_n + s1;\n    s1 = b1 * in_n + s2 - a1 * out;\n    s2 = b2 * in_n - a2 * out;\n    y[n] = out;\n  }\n  return y;\n}\n\nfunction filtfiltBiquad(x, b, a, padMult = 3) {\n  const N = x.length;\n  if (N === 0) return new Float64Array(0);\n\n  // For biquad, filter order = 2; transient len ~ 3*(order)\n  const basePad = Math.max(b.length, a.length) - 1;\n  const padLen = Math.max(6, Math.min(padMult * basePad, Math.floor(N / 2))); // never exceed N/2\n\n  // Build reflected padded signal\n  const left = reflectLeft(x, padLen);\n  const right = reflectRight(x, padLen);\n  const padded = new Float64Array(padLen + N + padLen);\n  padded.set(left, 0);\n  padded.set(x, padLen);\n  padded.set(right, padLen + N);\n\n  // Forward filter\n  let y = iirBiquadDF2T(padded, b, a);\n\n  // Reverse\n  y = reverseFloat64(y);\n\n  // Backward filter (same coefficients)\n  y = iirBiquadDF2T(y, b, a);\n\n  // Reverse back\n  y = reverseFloat64(y);\n\n  // Remove padding\n  return y.subarray(padLen, padLen + N);\n}\n\nfunction reverseFloat64(arr) {\n  const N = arr.length;\n  const out = new Float64Array(N);\n  for (let i = 0; i < N; i++) out[i] = arr[N - 1 - i];\n  return out;\n}\n\nexport function applyLowpassButterworth(\n  x,\n  fs = 400,\n  {\n    fc = 40, // cutoff frequency (Hz)\n    order = 4, // even order (2, 4, 6, ...)\n    zeroPhase = true, // filtfilt\n    padMult = 6, // padding multiplier for filtfilt\n    fixNonFinite = true,\n  } = {},\n) {\n  if (!Array.isArray(x) && !(x instanceof Float64Array)) {\n    throw new TypeError('x must be an array-like of numbers');\n  }\n  const N = x.length;\n  if (N === 0) return [];\n\n  let xWork = toFloat64Array(x);\n  if (fixNonFinite) xWork = fixNonFiniteLinear(xWork);\n\n  // Sanity checks\n  if (order < 2) order = 2;\n  if (order % 2 !== 0) order += 1; // enforce even\n  const nyq = fs / 2;\n  if (!(fc > 0 && fc < nyq)) {\n    // out of range -> return copy\n    return Array.from(xWork);\n  }\n\n  // Build Butterworth cascade (SOS) as array of {b:[b0,b1,b2], a:[1,a1,a2]}\n  const sos = designButterworthLPSOS(fc, fs, order);\n\n  // Filter\n  const y = zeroPhase ? filtfiltCascadeSOS(xWork, sos, padMult) : iirCascadeDF2T(xWork, sos); // causal (has phase shift)\n\n  return Array.from(y);\n}\n\nfunction designButterworthLPSOS(fc, fs, orderEven) {\n  const m = orderEven / 2;\n  const Qs = butterworthQs(orderEven); // length m\n  const sos = [];\n  for (let k = 0; k < m; k++) {\n    sos.push(designLowpassBiquadRBJ(fc, fs, Qs[k]));\n  }\n  return sos;\n}\n\nfunction butterworthQs(N) {\n  const m = Math.floor(N / 2);\n  const Qs = new Array(m);\n  for (let k = 1; k <= m; k++) {\n    const zeta = Math.sin(((2 * k - 1) * Math.PI) / (2 * N));\n    Qs[k - 1] = 1 / (2 * zeta);\n  }\n  // Sorting ascending Q can slightly improve numerical robustness in cascade\n  Qs.sort((a, b) => a - b);\n  return Qs;\n}\n\nfunction designLowpassBiquadRBJ(fc, fs, Q) {\n  const w0 = 2 * Math.PI * (fc / fs);\n  const cosw0 = Math.cos(w0);\n  const sinw0 = Math.sin(w0);\n  const alpha = sinw0 / (2 * Q);\n\n  let b0 = (1 - cosw0) / 2;\n  let b1 = 1 - cosw0;\n  let b2 = (1 - cosw0) / 2;\n\n  let a0 = 1 + alpha;\n  let a1 = -2 * cosw0;\n  let a2 = 1 - alpha;\n\n  // Normalize so a0 = 1\n  b0 /= a0;\n  b1 /= a0;\n  b2 /= a0;\n  a1 /= a0;\n  a2 /= a0;\n  a0 = 1;\n\n  return { b: [b0, b1, b2], a: [a0, a1, a2] };\n}\n\nfunction iirCascadeDF2T(x, sos) {\n  let y = toFloat64Array(x);\n  for (let i = 0; i < sos.length; i++) {\n    const { b, a } = sos[i];\n    y = iirBiquadDF2T(y, b, a);\n  }\n  return y;\n}\n\nfunction filtfiltCascadeSOS(x, sos, padMult = 6) {\n  const N = x.length;\n  if (N === 0) return new Float64Array(0);\n\n  // Estimate transient length ~ 3 samples per biquad (rough heuristic)\n  const padLen = Math.max(12, Math.min(padMult * 3 * sos.length, Math.floor(N / 2)));\n\n  // Build reflected padded signal\n  const left = reflectLeft(x, padLen);\n  const right = reflectRight(x, padLen);\n  const padded = new Float64Array(padLen + N + padLen);\n  padded.set(left, 0);\n  padded.set(x, padLen);\n  padded.set(right, padLen + N);\n\n  // Forward cascade\n  let y = iirCascadeDF2T(padded, sos);\n\n  // Reverse\n  y = reverseFloat64(y);\n\n  // Backward cascade (same direction through the cascade)\n  y = iirCascadeDF2T(y, sos);\n\n  // Reverse back and unpad\n  y = reverseFloat64(y);\n  return y.subarray(padLen, padLen + N);\n}\n\nexport function applyBandpassButterworth(\n  x,\n  fs = 400,\n  {\n    f1 = 5, // нижняя граница полосы (Hz)\n    f2 = 15, // верхняя граница полосы (Hz)\n    orderHP = 2, // чётный порядок HP (2,4,6,...)\n    orderLP = 2, // чётный порядок LP (2,4,6,...)\n    zeroPhase = true, // filtfilt по всему каскаду\n    padMult = 6, // множитель паддинга для filtfilt\n    fixNonFinite = true,\n  } = {},\n) {\n  if (!Array.isArray(x) && !(x instanceof Float64Array)) {\n    throw new TypeError('x must be an array-like of numbers');\n  }\n  const N = x.length;\n  if (N === 0) return [];\n\n  // Подготовка данных\n  let xWork = toFloat64Array(x);\n  if (fixNonFinite) xWork = fixNonFiniteLinear(xWork);\n\n  // Проверки частот / порядков\n  const nyq = fs / 2;\n  if (!(f1 > 0) || !(f2 > 0) || !(f1 < f2) || !(f2 < nyq)) {\n    // Некорректные частоты — вернём копию без изменений\n    return Array.from(xWork);\n  }\n  if (orderHP < 2) orderHP = 2;\n  if (orderLP < 2) orderLP = 2;\n  if (orderHP % 2 !== 0) orderHP += 1;\n  if (orderLP % 2 !== 0) orderLP += 1;\n\n  // Конструируем каскад SOS: сначала HP(f1), затем LP(f2)\n  const sosHP = designButterworthHPSOS(f1, fs, orderHP);\n  const sosLP = designButterworthLPSOS(f2, fs, orderLP); // из шага 3\n  const sos = sosHP.concat(sosLP);\n\n  // Фильтрация\n  const y = zeroPhase\n    ? filtfiltCascadeSOS(xWork, sos, padMult) // нулевая фаза\n    : iirCascadeDF2T(xWork, sos); // причинная (со сдвигом фазы)\n\n  return Array.from(y);\n}\n\nfunction designButterworthHPSOS(fc, fs, orderEven) {\n  const m = orderEven / 2;\n  const Qs = butterworthQs(orderEven); // из шага 3\n  const sos = [];\n  for (let k = 0; k < m; k++) {\n    sos.push(designHighpassBiquadRBJ(fc, fs, Qs[k]));\n  }\n  return sos;\n}\n\nfunction designHighpassBiquadRBJ(fc, fs, Q) {\n  const w0 = 2 * Math.PI * (fc / fs);\n  const cosw0 = Math.cos(w0);\n  const sinw0 = Math.sin(w0);\n  const alpha = sinw0 / (2 * Q);\n\n  let b0 = (1 + cosw0) / 2;\n  let b1 = -(1 + cosw0);\n  let b2 = (1 + cosw0) / 2;\n\n  let a0 = 1 + alpha;\n  let a1 = -2 * cosw0;\n  let a2 = 1 - alpha;\n\n  // Нормализация так, чтобы a0 = 1\n  b0 /= a0;\n  b1 /= a0;\n  b2 /= a0;\n  a1 /= a0;\n  a2 /= a0;\n  a0 = 1;\n\n  return { b: [b0, b1, b2], a: [a0, a1, a2] };\n}\n","import { biggestPreprocessFilter } from './biggestPreprocess';\n\nimport { hpFilterMatlab, lpFilterMatlab, mwmFilter, notch50HzCombFILT } from './mainConversions';\nimport {\n  applyBandpassButterworth,\n  applyLowpassButterworth,\n  applyNotch50Hz,\n  removeBaselineMedianCascade,\n} from './newPreprocess';\n\nexport const preprocessSignal = (signal, channel) => {\n  const signalData = signal[channel].data.map((item) => item[1]);\n  const signalTime = signal[channel].data.map((item) => item[0]);\n  const transformData = (data) => signalTime.map((item, i) => [item, data[i]]);\n  const mvmFiltered = mwmFilter(signalData);\n  const lowPassFilteredML = lpFilterMatlab(mvmFiltered);\n  const highPassFilteredML = hpFilterMatlab(lowPassFilteredML);\n  const notchFilteredML = notch50HzCombFILT(highPassFilteredML);\n  const biggestPreprocess = biggestPreprocessFilter(signalData);\n  const newFirst = removeBaselineMedianCascade(signalData);\n  const newSecond = applyNotch50Hz(newFirst);\n  const newThird = applyLowpassButterworth(newSecond);\n  const newFourth = applyBandpassButterworth(newThird);\n\n  return {\n    mvmFiltered: transformData(mvmFiltered),\n    lowPassFilteredML: transformData(lowPassFilteredML),\n    highPassFilteredML: transformData(highPassFilteredML),\n    notchFilteredML: transformData(notchFilteredML),\n    biggestPreprocess: {\n      bp: transformData(biggestPreprocess.bp),\n      detrended: transformData(biggestPreprocess.detrended),\n    },\n    newPreprocess: {\n      newFirst: transformData(newFirst),\n      newSecond: transformData(newSecond),\n      newThird: transformData(newThird),\n      newFourth: transformData(newFourth),\n    },\n  };\n};\n","export function mwmFilter(ecg) {\n  const N = ecg.length;\n  const L1 = 40;\n  const L2 = 160;\n  const flen1 = Math.floor(L1 / 2);\n  const flen2 = Math.floor(L2 / 2);\n  const x1 = new Array(N);\n  for (let j = 0; j < N; j++) {\n    const start = Math.max(0, j - flen1);\n    const end = Math.min(N - 1, j + flen1);\n    x1[j] = medianOfRange(ecg, start, end);\n  }\n  const baseline = new Array(N);\n  for (let j = 0; j < N; j++) {\n    const start = Math.max(0, j - flen2);\n    const end = Math.min(N - 1, j + flen2);\n    baseline[j] = medianOfRange(x1, start, end);\n  }\n\n  const corrected = new Array(N);\n  for (let i = 0; i < N; i++) {\n    const x = ecg[i];\n    const b = baseline[i];\n    corrected[i] = Number.isNaN(x) || Number.isNaN(b) ? NaN : x - b;\n  }\n\n  return corrected;\n\n  function medianOfRange(arr, start, end) {\n    const k = end - start + 1;\n    const tmp = new Array(k);\n    for (let i = 0; i < k; i++) tmp[i] = arr[start + i];\n    tmp.sort((a, b) => a - b);\n    const mid = Math.floor(k / 2);\n    if (k % 2 === 1) {\n      return tmp[mid];\n    } else {\n      return 0.5 * (tmp[mid - 1] + tmp[mid]);\n    }\n  }\n}\nexport function lpFilterMatlab(sig) {\n  const N = sig.length;\n  if (N === 0) return [];\n  const b = [1, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, 0, 1];\n  const a = [1, -2, 1];\n  const h = impulseResponse13(b, a);\n  const yc = conv(sig, h);\n  const start = 6;\n  const out = yc.slice(start, start + N);\n  return out;\n\n  function impulseResponse13(b, a) {\n    const M = 13;\n    const y = new Array(M).fill(0);\n    const a1 = a[1],\n      a2 = a[2];\n\n    for (let n = 0; n < M; n++) {\n      let acc = n === 0 ? b[0] : 0;\n      for (let k = 1; k < b.length; k++) {\n        const idx = n - k;\n        if (idx === 0) acc += b[k];\n      }\n      const yn1 = n - 1 >= 0 ? y[n - 1] : 0;\n      const yn2 = n - 2 >= 0 ? y[n - 2] : 0;\n      y[n] = acc - a1 * yn1 - a2 * yn2;\n    }\n    return y;\n  }\n\n  function conv(x, h) {\n    const Nx = x.length,\n      Nh = h.length;\n    const Ny = Nx + Nh - 1;\n    const y = new Array(Ny).fill(0);\n    for (let n = 0; n < Ny; n++) {\n      let s = 0;\n      const kmin = Math.max(0, n - (Nx - 1));\n      const kmax = Math.min(n, Nh - 1);\n      for (let k = kmin; k <= kmax; k++) {\n        s += h[k] * x[n - k];\n      }\n      y[n] = s;\n    }\n    return y;\n  }\n}\n\nexport function hpFilterMatlab(sig) {\n  const N = sig.length;\n\n  const b = (() => {\n    const arr = new Array(33).fill(0);\n    arr[0] = -1;\n    arr[16] = 32;\n    arr[17] = -32;\n    arr[32] = 1;\n    return arr;\n  })();\n  const a = [1, -1];\n  const h = impulseResponse(b, a, 33);\n\n  const yc = conv(sig, h);\n  const out = yc.slice(16, 16 + N);\n  return out;\n  function impulseResponse(b, a, M) {\n    const y = new Array(M).fill(0);\n    const a1 = a[1];\n    for (let n = 0; n < M; n++) {\n      let acc = n < b.length ? b[n] : 0;\n      const yn1 = n > 0 ? y[n - 1] : 0;\n      y[n] = acc - a1 * yn1;\n    }\n    return y;\n  }\n\n  function conv(x, h) {\n    const Nx = x.length,\n      Nh = h.length;\n    const Ny = Nx + Nh - 1;\n    const y = new Array(Ny).fill(0);\n    for (let n = 0; n < Ny; n++) {\n      let s = 0;\n      const kmin = Math.max(0, n - (Nx - 1));\n      const kmax = Math.min(n, Nh - 1);\n      for (let k = kmin; k <= kmax; k++) s += h[k] * x[n - k];\n      y[n] = s;\n    }\n    return y;\n  }\n}\n\nexport function notch50HzCombFILT(x) {\n  const fs = 400;\n  const Fo = 50;\n  const Q = 35;\n  const doNorm = false;\n  const Nf = fs / Fo;\n  const N = Math.max(2, Math.round(Nf));\n  const BW = Fo / (fs / 2) / Q;\n  const r = clamp(1 - BW, 0.0, 0.999999);\n  const a1 = Math.pow(r, 1 / N);\n  const b = new Array(N).fill(1);\n  const a = Array.from({ length: N }, (_, k) => Math.pow(a1, k));\n  const y = filtfiltIIR(b, a, x);\n\n  if (!doNorm) return y;\n  const m = y.reduce((M, v) => Math.max(M, Math.abs(v)), 0) || 1;\n  return y.map((v) => v / m);\n\n  function clamp(v, lo, hi) {\n    return Math.max(lo, Math.min(hi, v));\n  }\n  function lfilter(b, a, x) {\n    const nb = b.length,\n      na = a.length;\n    const y = new Array(x.length).fill(0);\n    for (let n = 0; n < x.length; n++) {\n      let acc = 0;\n      for (let k = 0; k < nb; k++) {\n        const xn = n - k;\n        if (xn >= 0) acc += b[k] * x[xn];\n      }\n      for (let k = 1; k < na; k++) {\n        const yn = n - k;\n        if (yn >= 0) acc -= a[k] * y[yn];\n      }\n      y[n] = acc;\n    }\n    return y;\n  }\n  function filtfiltIIR(b, a, x) {\n    const nfact = 3 * (Math.max(b.length, a.length) - 1);\n    const N = x.length;\n    if (N <= nfact + 1) {\n      const y1 = lfilter(b, a, x);\n      return lfilter(b, a, y1.slice().reverse()).reverse();\n    }\n    const pre = reflectPad(x, nfact, true);\n    const post = reflectPad(x, nfact, false);\n    const xx = pre.concat(x, post);\n    const y1 = lfilter(b, a, xx);\n    const y2 = lfilter(b, a, y1.slice().reverse()).reverse();\n    return y2.slice(nfact, nfact + N);\n\n    function reflectPad(arr, L, atStart) {\n      const out = new Array(L);\n      if (atStart) {\n        for (let i = 0; i < L; i++) out[i] = 2 * arr[0] - arr[1 + i];\n        return out.reverse();\n      } else {\n        for (let i = 0; i < L; i++) out[i] = 2 * arr[N - 1] - arr[N - 2 - i];\n        return out;\n      }\n    }\n  }\n}\n\nexport function savGolayFilter(data, mode) {\n  let K, F, dt, deriv, nl, nr, M;\n  if (mode === 'centered') {\n    K = 2;\n    F = 25;\n    dt = 0.05;\n    deriv = 0;\n  } else if (mode === 'asymmetric') {\n    nl = 16;\n    nr = 16;\n    M = 4;\n    deriv = 0;\n    dt = 0.05;\n  }\n  function transpose(M) {\n    const r = M.length,\n      c = M[0].length;\n    const T = Array.from({ length: c }, () => Array(r));\n    for (let i = 0; i < r; i++) for (let j = 0; j < c; j++) T[j][i] = M[i][j];\n    return T;\n  }\n\n  function matMul(A, B) {\n    const aR = A.length,\n      aC = A[0].length;\n    const bR = B.length,\n      bC = B[0].length;\n    const C = Array.from({ length: aR }, () => Array(bC).fill(0));\n    for (let i = 0; i < aR; i++) {\n      for (let k = 0; k < aC; k++) {\n        const aik = A[i][k];\n        for (let j = 0; j < bC; j++) C[i][j] += aik * B[k][j];\n      }\n    }\n    return C;\n  }\n\n  function invertMatrix(M) {\n    const n = M.length;\n    const A = M.map((r) => r.slice());\n    const I = Array.from({ length: n }, (_, i) =>\n      Array.from({ length: n }, (_, j) => (i === j ? 1 : 0)),\n    );\n    for (let col = 0; col < n; col++) {\n      let piv = col;\n      for (let r = col + 1; r < n; r++) if (Math.abs(A[r][col]) > Math.abs(A[piv][col])) piv = r;\n      const pivotVal = A[piv][col];\n      if (piv !== col) {\n        [A[col], A[piv]] = [A[piv], A[col]];\n        [I[col], I[piv]] = [I[piv], I[col]];\n      }\n      for (let j = 0; j < n; j++) {\n        A[col][j] /= pivotVal;\n        I[col][j] /= pivotVal;\n      }\n      for (let r = 0; r < n; r++) {\n        if (r === col) continue;\n        const factor = A[r][col];\n        if (factor === 0) continue;\n        for (let j = 0; j < n; j++) {\n          A[r][j] -= factor * A[col][j];\n          I[r][j] -= factor * I[col][j];\n        }\n      }\n    }\n    return I;\n  }\n  const factorial = (n) => {\n    let r = 1;\n    for (let i = 2; i <= n; i++) r *= i;\n    return r;\n  };\n  function designMatrixCentered(K, F) {\n    const m = (F - 1) >> 1;\n    const A = Array.from({ length: F }, () => Array(K + 1).fill(0));\n    for (let i = 0; i < F; i++) {\n      const n = i - m;\n      let p = 1;\n      for (let j = 0; j <= K; j++) {\n        A[i][j] = p;\n        p *= n;\n      }\n    }\n    return A;\n  }\n  function designMatrixAsym(M, nl, nr) {\n    const F = nl + nr + 1;\n    const A = Array.from({ length: F }, () => Array(M + 1).fill(0));\n    for (let i = 0; i < F; i++) {\n      const n = i - nl;\n      let p = 1;\n      for (let j = 0; j <= M; j++) {\n        A[i][j] = p;\n        p *= n;\n      }\n    }\n    return A;\n  }\n  function sgDesign(K, F) {\n    const A = designMatrixCentered(K, F);\n    const AT = transpose(A);\n    const ATA = matMul(AT, A);\n    const ATA_inv = invertMatrix(ATA);\n    const pinv = matMul(ATA_inv, AT);\n\n    const G = Array.from({ length: F }, () => Array(K + 1).fill(0));\n    for (let d = 0; d <= K; d++) {\n      const scale = factorial(d);\n      for (let j = 0; j < F; j++) G[j][d] = scale * pinv[d][j];\n    }\n    return G;\n  }\n  function sgDesignAsym(M, nl, nr) {\n    const F = nl + nr + 1;\n    const A = designMatrixAsym(M, nl, nr);\n    const AT = transpose(A);\n    const ATA = matMul(AT, A);\n    const ATA_inv = invertMatrix(ATA);\n    const pinv = matMul(ATA_inv, AT);\n\n    const GA = Array.from({ length: F }, () => Array(M + 1).fill(0));\n    for (let d = 0; d <= M; d++) {\n      const scale = factorial(d);\n      for (let j = 0; j < F; j++) GA[j][d] = scale * pinv[d][j];\n    }\n    return GA;\n  }\n  function convSame(signal, kernel) {\n    const N = signal.length;\n    const F = kernel.length;\n    const m = Math.floor(F / 2);\n    const y = new Array(N).fill(0);\n    for (let i = 0; i < N; i++) {\n      let acc = 0;\n      for (let j = 0; j < F; j++) {\n        const idx = i + j - m;\n        if (idx >= 0 && idx < N) acc += signal[idx] * kernel[j];\n      }\n      y[i] = acc;\n    }\n    return y;\n  }\n  function convAlign(signal, kernel, centerIndex) {\n    const N = signal.length,\n      F = kernel.length;\n    const y = new Array(N).fill(0);\n    for (let i = 0; i < N; i++) {\n      let acc = 0;\n      for (let j = 0; j < F; j++) {\n        const idx = i + j - centerIndex;\n        if (idx >= 0 && idx < N) acc += signal[idx] * kernel[j];\n      }\n      y[i] = acc;\n    }\n    return y;\n  }\n\n  function sgApply(signal, K, F, opts = {}) {\n    const { dt = 1, deriv = 0 } = opts;\n    const G = sgDesign(K, F);\n    const h = getColumn(G, deriv);\n    const y = convSame(signal, h);\n    if (deriv === 0) return y;\n    const scale = Math.pow(dt, deriv);\n    return y.map((v) => v / scale);\n  }\n  function savGolSmooth(f, nl, nr, M) {\n    const GA = sgDesignAsym(M, nl, nr);\n    const c = getColumn(GA, 0);\n    const n = f.length;\n    const y = convAlign(f, c, nl);\n    const g = y.slice();\n    const F = nl + nr + 1;\n    for (let i = nl; i <= n - nr - 1; i++) g[i] = y[i + nr];\n    for (let i = 0; i < nl && i < n; i++) g[i] = f[i];\n    for (let i = Math.max(n - nr, 0); i < n; i++) g[i] = f[i];\n    return g;\n  }\n  function getColumn(M, j) {\n    return M.map((row) => row[j]);\n  }\n  function scaleArray(a, s) {\n    return a.map((v) => v * s);\n  }\n\n  if (mode === 'centered') {\n    return sgApply(data, K, F, { dt, deriv });\n  }\n\n  if (mode === 'asymmetric') {\n    if (deriv === 0) {\n      return savGolSmooth(data, nl, nr, M);\n    }\n    const GA = sgDesignAsym(M, nl, nr);\n    const h = GA.map((r) => r[deriv]);\n    const y = convAlign(data, h, nl);\n    const scale = Math.pow(dt, deriv);\n    return y.map((v) => v / scale);\n  }\n}\n","/* eslint-env worker */\n/* eslint-disable no-restricted-globals */\n\nimport { preprocessSignal } from './preprocessSignal';\n\nself.onmessage = (e) => {\n  const { series, channel } = e.data;\n\n  try {\n    const result = preprocessSignal(series, channel);\n    self.postMessage({ series, ok: true, result });\n  } catch (err) {\n    self.postMessage({ series, ok: false, error: serializeError(err) });\n  }\n};\nfunction serializeError(err) {\n  if (err && typeof err === 'object') {\n    return { name: err.name, message: err.message, stack: err.stack };\n  }\n  return { message: String(err) };\n}\n"],"names":["toF64","arr","Float64Array","slice","out","length","i","reflectIndex","N","medianFilter","x","windowSamples","xin","W","samples","s","Math","max","round","oddWindowSize","half","y","buf","n","k","j","Array","from","sort","a","b","stage1_preprocess","ecg","fs","arguments","undefined","hpf","fc","dt","RC","PI","alpha","highPassOnePole","baseline","corrected","win1_ms","win2_ms","w1","w2","m1","doubleMedianBaselineSubtract","detrended","biquadFilter","coeffs","b0","b1","b2","a1","a2","x1","x2","y1","y2","xn","yn","rbjLowpassCoeffs","Q","SQRT2","w0","cosw0","cos","sin","a0","biquadCascadeForward","sections","filtfiltCascade","padSeconds","pad","min","padded","reflectPad","reverse","rbjHighpassCoeffs","BUTTER_QS_4","hpSections","order","map","q","lpSections","biggestPreprocessFilter","signal","bp","hpOrder","lpOrder","zeroPhase","reduce","sig","sec","bandpass5to18","removeBaselineMedianCascade","win1Sec","win2Sec","removeResidualDC","fixNonFinite","isArray","TypeError","xWork","toFloat64Array","fixNonFiniteLinear","makeOdd","clampOdd","medianFilterReflect","med","tmp","u","v","mid","floor","robustMedian","w","Number","finite","isFin","isFinite","firstFin","start","end","y0","len","t","r","leftPad","reflectLeft","rightPad","reflectRight","set","window","outVal","inVal","idx","lowerBound","splice","ins","value","lo","hi","applyNotch50Hz","f0","padMult","designNotchBiquad","basePad","padLen","left","right","iirBiquadDF2T","reverseFloat64","subarray","filtfiltBiquad","s1","s2","in_n","designButterworthLPSOS","orderEven","m","Qs","butterworthQs","sos","push","designLowpassBiquadRBJ","zeta","iirCascadeDF2T","filtfiltCascadeSOS","applyBandpassButterworth","f1","f2","orderHP","orderLP","sosHP","designHighpassBiquadRBJ","designButterworthHPSOS","sosLP","concat","preprocessSignal","channel","signalData","data","item","signalTime","transformData","mvmFiltered","flen1","L1","flen2","L2","medianOfRange","isNaN","NaN","mwmFilter","lowPassFilteredML","h","fill","acc","yn1","yn2","impulseResponse13","Nx","Nh","Ny","kmin","kmax","conv","lpFilterMatlab","highPassFilteredML","M","impulseResponse","hpFilterMatlab","notchFilteredML","Fo","pow","nfact","lfilter","pre","post","L","atStart","filtfiltIIR","_","nb","na","notch50HzCombFILT","biggestPreprocess","newFirst","newSecond","newThird","applyLowpassButterworth","newFourth","newPreprocess","serializeError","err","name","message","stack","String","self","onmessage","e","series","result","postMessage","ok","error"],"sourceRoot":""}