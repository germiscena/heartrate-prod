{"version":3,"file":"static/js/841.46f0c1f4.chunk.js","mappings":"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","sources":["utils.js","algorithms/ATNAlgorithm/SignalConversionATN.js","algorithms/ATNAlgorithm/mainSignalConversion.js","algorithms/ATNAlgorithm/detectRPeaks.js","algorithms/CMDAlgorithm/signalConversionCMD2.js","algorithms/CMDAlgorithm/signalConversionCMD3.js","algorithms/CMDAlgorithm/mainConversionCMD.js","algorithms/CMDAlgorithm/signalConversionCMD1.js","algorithms/GPTAlgorithm/utils.js","algorithms/GPTAlgorithm/signalConversionGPT.js","algorithms/GPTAlgorithm/mainConversionGPT.js","algorithms/KHOAlgorithm/utils.js","algorithms/KHOAlgorithm/SignalConversionKHO.js","algorithms/KHOAlgorithm/preprocessKHO.js","algorithms/KHOAlgorithm/mainSignalConversion.js","algorithms/PTAlgorithm/signalConversionPT.js","algorithms/PTAlgorithm/signalConversionPT+++.js","algorithms/PTAlgorithm/mainConversionPT.js","peaksCollection/peaks.worker.js"],"sourcesContent":["export const parseArrayData = (data) => {\r\n  data = data.map((item) => item.split(','));\r\n  if (data[0].length > 3 || data[0][0] === 'N') {\r\n    data = data.map((item) => item.slice(1));\r\n  }\r\n  const [headers, ...rows] = data;\r\n  const totalChannels = headers.filter((item) => item !== 't');\r\n  const tInd = headers.findIndex((i) => i === 't');\r\n\r\n  const series = {};\r\n  for (let i = 0; i < totalChannels.length; i++) {\r\n    series[i] = [];\r\n  }\r\n\r\n  rows.forEach((row) => {\r\n    totalChannels.forEach((item, i) => {\r\n      series[i].push([Number(row[tInd]), parseFloat(row[i])]);\r\n    });\r\n  });\r\n\r\n  const finalData = [];\r\n  for (let i = 0; i < totalChannels.length; i++) {\r\n    finalData.push({\r\n      name: headers[i],\r\n      data: series[i],\r\n    });\r\n  }\r\n\r\n  return finalData;\r\n};\r\n\r\nexport function analyzeExcitations(data) {\r\n  const dataLabels = data[0].split(',');\r\n  const labelsNames = ['v1', 'v2', 'v3'];\r\n  const timeLabelIdx = dataLabels.indexOf('t');\r\n  const labelIdxes = labelsNames.map((ch) => dataLabels.indexOf(ch));\r\n\r\n  const signals = labelIdxes.map(() => []);\r\n  const times = [];\r\n\r\n  for (let i = 1; i < data.length; i++) {\r\n    const row = data[i].split(',');\r\n    labelIdxes.forEach((idx, chNum) => {\r\n      signals[chNum].push(Number(row[idx]));\r\n    });\r\n    times.push(Number(row[timeLabelIdx]));\r\n  }\r\n\r\n  function analyzeLabel(signal) {\r\n    const mean = signal.reduce((a, b) => a + b, 0) / signal.length;\r\n    const std = Math.sqrt(signal.reduce((a, b) => a + (b - mean) ** 2, 0) / signal.length);\r\n    const threshold = mean + 0.5 * std;\r\n    const minIntervalMs = 200;\r\n    const peaks = [];\r\n\r\n    for (let i = 1; i < signal.length - 1; i++) {\r\n      if (signal[i] > signal[i - 1] && signal[i] > signal[i + 1] && signal[i] > threshold) {\r\n        if (peaks.length === 0 || times[i] - times[peaks[peaks.length - 1]] >= minIntervalMs) {\r\n          peaks.push(i);\r\n        } else {\r\n          if (signal[i] > signal[peaks[peaks.length - 1]]) {\r\n            peaks[peaks.length - 1] = i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const peakTimes = peaks.map((i) => times[i]);\r\n    const intervals = [];\r\n    for (let j = 1; j < peakTimes.length; j++) {\r\n      intervals.push(peakTimes[j] - peakTimes[j - 1]);\r\n    }\r\n\r\n    return {\r\n      count: peakTimes.length,\r\n      avgInterval: intervals.length ? intervals.reduce((a, b) => a + b, 0) / intervals.length : 0,\r\n    };\r\n  }\r\n\r\n  const result = {};\r\n  labelsNames.forEach((name, i) => {\r\n    result[name] = analyzeLabel(signals[i]);\r\n  });\r\n\r\n  const combinedSignal = [];\r\n  for (let i = 0; i < signals[0].length; i++) {\r\n    const vals = labelIdxes.map((_, chNum) => signals[chNum][i]);\r\n    const maxAbs = getTopValue(...vals.map(Math.abs), 'max');\r\n    const combinedVal = vals.find((v) => Math.abs(v) === maxAbs);\r\n    combinedSignal.push(combinedVal);\r\n  }\r\n  result.combined = analyzeLabel(combinedSignal);\r\n\r\n  return result;\r\n}\r\n\r\nexport const getCorrectYAxisMaximum = (data) => {\r\n  const isNegative = data < 0;\r\n  let currentNumber = data;\r\n  let separatorId = 0;\r\n\r\n  if (isNegative) {\r\n    currentNumber = -currentNumber;\r\n  }\r\n  for (let i = 0; i < String(currentNumber).length; i++) {\r\n    if (String(currentNumber)[i] === '.') {\r\n      separatorId = i;\r\n    }\r\n  }\r\n  let firstDigit = Number(String(currentNumber)[0]);\r\n  let digitNumber = Number('0.' + String(currentNumber).slice(1, 2));\r\n  if (digitNumber === 0) {\r\n    return isNegative ? -currentNumber : currentNumber;\r\n  }\r\n  let result = '';\r\n  if (digitNumber > 0.5) {\r\n    for (let i = 0; i < String(currentNumber).split('').length; i++) {\r\n      if (i === 0) {\r\n        result += firstDigit + 1;\r\n      } else {\r\n        if (separatorId == 0 || separatorId > i) {\r\n          result += 0;\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    result += firstDigit;\r\n    for (let i = 1; i < String(currentNumber).split('').length; i++) {\r\n      if (i === 1) {\r\n        result += 5;\r\n      } else {\r\n        if (separatorId == 0 || separatorId > i) {\r\n          result += 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return isNegative ? Number(-result) : Number(result);\r\n};\r\n\r\nexport function getTopValue(data, condition) {\r\n  let max = -Infinity;\r\n  let min = Infinity;\r\n  if (condition === 'min') {\r\n    for (let i = 0; i < data.length; i++) {\r\n      if (data[i] < min) min = data[i];\r\n    }\r\n    return min;\r\n  } else if (condition === 'max') {\r\n    for (let i = 0; i < data.length; i++) {\r\n      if (data[i] > max) max = data[i];\r\n    }\r\n    return max;\r\n  }\r\n}\r\n\r\nexport const getYAxisMainInfo = (dataValues) => {\r\n  let min = getTopValue(dataValues, 'min');\r\n  let max = getTopValue(dataValues, 'max');\r\n  if (!Math.floor(min / 100) === min) {\r\n    min = min * 100;\r\n  }\r\n  if (!Math.ceil(max / 100) === max) {\r\n    max = max * 100;\r\n  }\r\n  const step = getCorrectSteps(min, max);\r\n  let plotLines = [];\r\n  for (let i = 0; ; i++) {\r\n    const plotLine = step * i;\r\n    plotLines.push(plotLine);\r\n    if (plotLine > max) {\r\n      break;\r\n    }\r\n  }\r\n  for (let i = 1; ; i++) {\r\n    const plotLine = -(step * i);\r\n    plotLines.push(plotLine);\r\n    if (plotLine < min) {\r\n      break;\r\n    }\r\n  }\r\n  plotLines = plotLines\r\n    .sort((a, b) => a - b)\r\n    .map((item, i) => {\r\n      const isZero = item === 0;\r\n      const isMin = i === 0;\r\n      const isMax = i === plotLines.length - 1;\r\n      return {\r\n        value: item,\r\n        color: isZero ? 'black' : isMin || isMax ? 'black' : '#ccc',\r\n        width: isZero ? 1 : isMin || isMax ? 1.5 : 1,\r\n        dashStyle: 'Solid',\r\n        zIndex: 2,\r\n      };\r\n    });\r\n\r\n  return { min, max, step, plotLines };\r\n};\r\n\r\nexport const getGraphMainInfo = (series, uploadedSeriesPage) => {\r\n  const seriesLength = series[0].data.length;\r\n\r\n  const tickCount =\r\n    seriesLength > 24000\r\n      ? seriesLength > 72000\r\n        ? seriesLength > 240000\r\n          ? 5000\r\n          : 1000\r\n        : 500\r\n      : 100;\r\n  return {\r\n    chart: { zoomType: 'x', backgroundColor: 'white', spacingRight: 30 },\r\n    boost: {\r\n      useGPUTranslations: true,\r\n      usePreAllocated: true,\r\n    },\r\n    plotOptions: {\r\n      series: {\r\n        boostThreshold: 1,\r\n        turboThreshold: 0,\r\n        animation: false,\r\n        marker: { enabled: false },\r\n        lineWidth: 1,\r\n        shadow: false,\r\n        dataLabels: { enabled: false },\r\n        enableMouseTracking: true,\r\n        dataGrouping: { enabled: false, approximation: 'extremes', groupPixelWidth: 2 },\r\n      },\r\n    },\r\n    tooltip: {\r\n      enabled: true,\r\n      shared: true,\r\n      formatter: function () {\r\n        return (\r\n          `<b>Время: ${this.x} мсек</b><br/>` +\r\n          this.points.map((p) => `${p.series.name}: ${p.y}`).join('<br/>')\r\n        );\r\n      },\r\n    },\r\n    xAxis: {\r\n      type: 'datetime',\r\n      tickPixelInterval: 65,\r\n      title: { text: 'Время (сек)' },\r\n      labels: {\r\n        style: {\r\n          whiteSpace: 'nowrap',\r\n        },\r\n        formatter: function () {\r\n          return this.value / 1000;\r\n        },\r\n      },\r\n      // gridLineWidth: 1,\r\n      // minorGridLineWidth: 1,\r\n      //AUTO PLOTLINES\r\n      plotLines: Array.from({ length: (seriesLength * 2.5) / tickCount }, (_, i) => ({\r\n        color: i === 0 ? 'black' : i % 5 === 0 ? '#ddd' : '#eee',\r\n        width: i % 5 === 0 ? 1 : 0.5,\r\n        value: i * tickCount * (uploadedSeriesPage + 1),\r\n        zIndex: i === 0 ? 10 : 0,\r\n      })),\r\n    },\r\n    legend: {\r\n      enabled: false,\r\n      align: 'center',\r\n      verticalAlign: 'bottom',\r\n      layout: 'horizontal',\r\n      itemStyle: {\r\n        cursor: 'pointer',\r\n      },\r\n      itemCheckboxStyle: {\r\n        position: 'absolute',\r\n        marginTop: '1px',\r\n      },\r\n    },\r\n    credits: { enabled: false },\r\n    navigator: {\r\n      enabled: true,\r\n      xAxis: {\r\n        type: 'linear',\r\n        labels: {\r\n          formatter() {\r\n            return this.value;\r\n          },\r\n        },\r\n      },\r\n    },\r\n    rangeSelector: { enabled: false },\r\n  };\r\n};\r\n\r\nexport const getCorrectSteps = (min, max) => {\r\n  const steps = [\r\n    0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10, 25, 50, 100, 250, 500, 1000, 2500, 5000,\r\n    10000, 25000, 50000, 100000, 250000, 500000, 1000000, 2500000, 5000000, 10000000, 25000000,\r\n  ];\r\n  // const interval = max - min;\r\n  const sumStepsArr = [];\r\n  for (let i = 0; i < steps.length; i++) {\r\n    let downSteps = Math.ceil(Math.abs(min) / steps[i]);\r\n    let upSteps = Math.ceil(max / steps[i]);\r\n    let sumSteps = downSteps + upSteps;\r\n    sumStepsArr.push(sumSteps);\r\n  }\r\n  const correctStepsArr = sumStepsArr.filter((item) => item >= 4 && item <= 12);\r\n  const bestStep =\r\n    correctStepsArr.length > 1\r\n      ? correctStepsArr.length === 2\r\n        ? steps[sumStepsArr.findIndex((item) => item === correctStepsArr.sort((a, b) => a - b)[0])]\r\n        : steps[\r\n            sumStepsArr.findIndex(\r\n              (item) =>\r\n                item ===\r\n                correctStepsArr.sort((a, b) => a - b)[Math.floor(correctStepsArr.length / 2)],\r\n            )\r\n          ]\r\n      : steps[sumStepsArr.findIndex((item) => item === correctStepsArr[0])];\r\n\r\n  return bestStep;\r\n};\r\n\r\nexport const getMainOptions = (series, uploadedSeriesPage) => {\r\n  const mainGraphInfo = getGraphMainInfo(series, uploadedSeriesPage);\r\n\r\n  return {\r\n    ...mainGraphInfo,\r\n    yAxis: series.map((item, i) => singleMainYAxis(i, series)),\r\n    series: series.map((item, i) => {\r\n      return {\r\n        ...series[i],\r\n        yAxis: i,\r\n        color: 'blue',\r\n        max: singleMainYAxis(i, series).max,\r\n        min: singleMainYAxis(i, series).min,\r\n      };\r\n    }),\r\n  };\r\n};\r\n\r\nconst singleMainYAxis = (id, series) => {\r\n  const dataValues = series[id].data.map((item) => item[1]);\r\n  const { min, max, step, plotLines } = getYAxisMainInfo(dataValues);\r\n\r\n  return {\r\n    top: `${id * (100 / series.length)}%`,\r\n    height: `${100 / series.length}%`,\r\n    offset: 0,\r\n    lineWidth: 1,\r\n    labels: {\r\n      x: 5,\r\n      align: 'left',\r\n    },\r\n    tickPositioner: function () {\r\n      const positions = [];\r\n      for (let y = plotLines[0].value; y <= plotLines[plotLines.length - 1].value; y += step) {\r\n        positions.push(y);\r\n      }\r\n      return positions;\r\n    },\r\n\r\n    plotLines,\r\n    max,\r\n    min,\r\n  };\r\n};\r\n\r\nexport function saveFile(data) {\r\n  const convertToCsvData = (arr, sep) => {\r\n    const secondSep = '\\r\\n';\r\n    const escapeCell = (v) => {\r\n      if (v === null || v === undefined) return '';\r\n      const s = String(v);\r\n      const mustQuote = s.includes('\"') || s.includes('\\n') || s.includes('\\r') || s.includes(sep);\r\n      const escaped = s.replace(/\"/g, '\"\"');\r\n      return mustQuote ? `\"${escaped}\"` : escaped;\r\n    };\r\n\r\n    const csv = (arr ?? []).map((row) => (row ?? []).map(escapeCell).join(sep)).join(secondSep);\r\n    const blobParts = ['\\uFEFF', csv];\r\n    return blobParts;\r\n  };\r\n\r\n  const convertedData = convertToCsvData(data, ';');\r\n  const blob = new Blob(convertedData, { type: 'text/csv;charset=utf-8;' });\r\n  const url = URL.createObjectURL(blob);\r\n  const a = document.createElement('a');\r\n  a.href = url;\r\n  a.download = 'data.csv';\r\n  document.body.appendChild(a);\r\n  a.click();\r\n  setTimeout(() => {\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n  }, 0);\r\n}\r\n","const FIR_TAPS = 200;\nconst DECIM = 32;\nconst BANDS = [\n  [7.8, 15.7],\n  [15.7, 23.5],\n  [23.5, 31.3],\n  [31.3, 39.2],\n];\n\nconst clamp = (x, lo, hi) => Math.max(lo, Math.min(hi, x));\nconst sinc = (x) => (x === 0 ? 1 : Math.sin(Math.PI * x) / (Math.PI * x));\nfunction hamming(L) {\n  const w = new Array(L);\n  for (let n = 0; n < L; n++) w[n] = 0.54 - 0.46 * Math.cos((2 * Math.PI * n) / (L - 1));\n  return w;\n}\n\nfunction firLowpass(length, wc) {\n  wc = clamp(wc, 0, 1);\n  const M = length - 1;\n  const w = hamming(length);\n  const h = new Array(length);\n  for (let n = 0; n < length; n++) {\n    const k = n - M / 2;\n    h[n] = 2 * wc * sinc(2 * wc * k) * w[n];\n  }\n  return h;\n}\n\nfunction firBandpass(length, f1, f2, fs = 400) {\n  const w1 = clamp(f1 / (fs / 2), 0, 1);\n  const w2 = clamp(f2 / (fs / 2), 0, 1);\n  const lo = Math.min(w1, w2),\n    hi = Math.max(w1, w2);\n  const h2 = firLowpass(length, hi);\n  const h1 = lo > 0 ? firLowpass(length, lo) : new Array(length);\n  const h = new Array(length);\n  for (let i = 0; i < length; i++) h[i] = h2[i] - h1[i];\n  return h;\n}\n\nfunction convSame(x, h) {\n  const n = x.length,\n    m = h.length;\n  const y = new Array(n);\n  const pad = Math.floor(m / 2);\n  for (let i = 0; i < n; i++) {\n    let acc = 0;\n    for (let k = 0; k < m; k++) {\n      const xi = i + k - pad;\n      if (xi >= 0 && xi < n) acc += x[xi] * h[k];\n    }\n    y[i] = acc;\n  }\n  return y;\n}\n\nfunction downsample(x, M) {\n  const out = new Array(Math.ceil(x.length / M));\n  let j = 0;\n  for (let i = 0; i < x.length; i += M) out[j++] = x[i];\n  return out;\n}\n\nexport function runFilterBank(signal, fs = 400) {\n  const filters = BANDS.map(([f1, f2]) => ({\n    band: [f1, f2],\n    h: firBandpass(FIR_TAPS, f1, f2, fs),\n  }));\n\n  const filtered = filters.map(({ h }) => {\n    const y = convSame(signal, h);\n    return y;\n  });\n\n  const decimated = filtered.map((data) => {\n    const yds = downsample(data, DECIM);\n    return yds;\n  });\n\n  return {\n    filtered,\n    decimated,\n  };\n}\n","import { newDetectRPeaksATN } from './detectRPeaks';\nimport { runFilterBank } from './SignalConversionATN';\n\nexport const analyzeATN = (signal) => {\n  const signalTime = signal.map((obj) => obj[0]);\n  const signalData = signal.map((obj) => obj[1]);\n  const signalTransform = (data) => signalTime.map((item, i) => [item, data[i]]);\n  const [filteredSignal1, filteredSignal2, filteredSignal3, filteredSignal4] =\n    runFilterBank(signalData).filtered;\n  const newPeaks = newDetectRPeaksATN(signalData, runFilterBank(signalData).filtered);\n  return {\n    filteredSignal1: signalTransform(filteredSignal1),\n    filteredSignal2: signalTransform(filteredSignal2),\n    filteredSignal3: signalTransform(filteredSignal3),\n    filteredSignal4: signalTransform(filteredSignal4),\n    peaks: {\n      series: signalTime.map((item, i) => [item, newPeaks.includes(i) ? 50 : 0]),\n      data: newPeaks,\n    },\n  };\n};\n","import { getTopValue } from '../../utils';\n\nexport function newDetectRPeaksATN(signalData, filteredSignal) {\n  const fs = 400;\n  const M = 32;\n  const lambda = 0.8;\n  const refractoryMs = 250;\n\n  const threshold1 = 0.08;\n  const threshold2 = 0.7;\n  const thresholdL4 = 0.3;\n  const rescueThresh = 0.2;\n\n  const weakDsMin = 0.1;\n  const weakDsMax = 0.15;\n  const weakAmpFracDefault = 0.03;\n  const slopeFrac = 0.4;\n\n  const eps = 1e-12;\n\n  const clamp = (x, a, b) => Math.max(a, Math.min(b, x));\n  const downsample = (v, m) => {\n    const o = [];\n    for (let i = 0; i < v.length; i += m) o.push(v[i]);\n    return o;\n  };\n  const movingAverage = (v, w) => {\n    const out = new Array(v.length).fill(0);\n    let s = 0;\n    for (let i = 0; i < v.length; i++) {\n      s += v[i];\n      if (i >= w) s -= v[i - w];\n      out[i] = s / Math.min(i + 1, w);\n    }\n    return out;\n  };\n  const history = (ynm1, x) => (1 - lambda) * x + lambda * ynm1;\n  const findPeaks = (v) => {\n    const idx = [];\n    for (let i = 1; i < v.length - 1; i++) if (v[i] >= v[i - 1] && v[i] > v[i + 1]) idx.push(i);\n    return idx;\n  };\n\n  const median = (arr) => {\n    if (!arr.length) return 0;\n    const s = [...arr].sort((a, b) => a - b);\n    const k = Math.floor(s.length / 2);\n    return s.length % 2 ? s[k] : 0.5 * (s[k - 1] + s[k]);\n  };\n  const mad = (arr) => {\n    const m = median(arr);\n    return median(arr.map((x) => Math.abs(x - m))) || 1;\n  };\n\n  const bandEnergyAt = (i, w1, w2, w3, w4) =>\n    Math.abs(w1[i]) + Math.abs(w2[i]) + Math.abs(w3[i]) + Math.abs(w4[i]);\n  function positiveMaximaIndex(raw, a, b) {\n    let best = -Infinity,\n      bestI = -1;\n    const aa = clamp(a, 1, raw.length - 2),\n      bb = clamp(b, 1, raw.length - 2);\n    for (let i = aa; i <= bb; i++) {\n      if (raw[i] > 0 && raw[i] >= raw[i - 1] && raw[i] > raw[i + 1]) {\n        if (raw[i] > best) {\n          best = raw[i];\n          bestI = i;\n        }\n      }\n    }\n    return bestI;\n  }\n\n  function otsuThreshold(arr, bins = 64) {\n    if (!arr.length) return 0.2;\n    const min = getTopValue(arr, 'min'),\n      max = getTopValue(arr, 'max');\n    if (max - min < 1e-12) return min;\n    const h = new Array(bins).fill(0);\n    for (const v of arr) {\n      const k = Math.max(\n        0,\n        Math.min(bins - 1, Math.floor(((v - min) / (max - min + 1e-12)) * bins)),\n      );\n      h[k]++;\n    }\n    const total = arr.length;\n    const w = new Array(bins).fill(0),\n      m = new Array(bins).fill(0);\n    w[0] = h[0];\n    m[0] = 0 * h[0];\n    for (let i = 1; i < bins; i++) {\n      w[i] = w[i - 1] + h[i];\n      m[i] = m[i - 1] + i * h[i];\n    }\n    const mT = m[bins - 1];\n    let bestT = 0,\n      bestVar = -1;\n    for (let t = 0; t < bins - 1; t++) {\n      const w0 = w[t],\n        w1 = total - w0;\n      if (w0 === 0 || w1 === 0) continue;\n      const m0 = m[t] / w0,\n        m1 = (mT - m[t]) / w1;\n      const vb = w0 * w1 * (m0 - m1) * (m0 - m1);\n      if (vb > bestVar) {\n        bestVar = vb;\n        bestT = t;\n      }\n    }\n    return min + ((bestT + 0.5) * (max - min)) / bins;\n  }\n\n  function slopeAround(data, i, fs) {\n    const rad = Math.max(1, Math.round(fs * 0.012));\n    let s = 0,\n      c = 0;\n    for (let k = 1; k <= rad; k++) {\n      const a = i - k,\n        b = i + k;\n      if (a >= 0 && b < data.length) {\n        s += Math.abs(data[b] - data[a]);\n        c++;\n      }\n    }\n    return c ? s / c : 0;\n  }\n\n  const [w1i, w2i, w3i, w4i] = filteredSignal || [];\n  if (!w1i || !w2i || !w3i || !w4i) return [];\n  const L = Math.min(signalData.length, w1i.length, w2i.length, w3i.length, w4i.length);\n\n  let m = 0,\n    c = 0;\n  for (let i = 0; i < L; i++) {\n    const x = signalData[i];\n    if (!Number.isNaN(x)) {\n      m += x;\n      c++;\n    }\n  }\n  const mean = c ? m / c : 0;\n  const data = Array.from({ length: L }, (_, i) =>\n    Number.isNaN(signalData[i]) ? mean : signalData[i],\n  );\n\n  const s1 = mad(w1i),\n    s2 = mad(w2i),\n    s3 = mad(w3i),\n    s4 = mad(w4i);\n  const w1 = w1i.map((x) => x / (s1 + 1e-12));\n  const w2 = w2i.map((x) => x / (s2 + 1e-12));\n  const w3 = w3i.map((x) => x / (s3 + 1e-12));\n  const w4 = w4i.map((x) => x / (s4 + 1e-12));\n\n  const y2 = downsample(w1.slice(0, L), M);\n  const y3 = downsample(w2.slice(0, L), M);\n  const y4 = downsample(w3.slice(0, L), M);\n  const y5 = downsample(w4.slice(0, L), M);\n  const Ld = Math.min(y2.length, y3.length, y4.length, y5.length);\n  y2.length = Ld;\n  y3.length = Ld;\n  y4.length = Ld;\n  y5.length = Ld;\n\n  const P1 = new Array(Ld),\n    P2 = new Array(Ld),\n    P4 = new Array(Ld);\n  for (let i = 0; i < Ld; i++) {\n    const a2 = Math.abs(y2[i]),\n      a3 = Math.abs(y3[i]),\n      a4 = Math.abs(y4[i]),\n      a5 = Math.abs(y5[i]);\n    P1[i] = a2 + a3 + a4;\n    P2[i] = a2 + a3 + a4 + a5;\n    P4[i] = a3 + a4 + a5;\n  }\n  const neighborAvg = (P) => {\n    const out = new Array(P.length + 1);\n    out[0] = P[0] / 2;\n    for (let i = 0; i < P.length - 1; i++) out[i + 1] = (P[i] + P[i + 1]) / 2;\n    out[out.length - 1] = P[P.length - 1] / 2;\n    return out;\n  };\n  const FL1 = neighborAvg(P1);\n  const FL2 = neighborAvg(P2);\n  const FL4 = neighborAvg(P4);\n\n  const allEvents = findPeaks(FL1);\n  if (!allEvents.length) return [];\n  const coarseRad = 2 * M;\n  const fineRad = Math.max(1, Math.round(fs * 0.04));\n  const EventsL1 = [];\n  for (const p of allEvents) {\n    const base = clamp(p * M, 0, L - 1);\n    if (positiveMaximaIndex(data, base - coarseRad, base + coarseRad) !== -1) EventsL1.push(p);\n  }\n  if (!EventsL1.length) return [];\n\n  const meanL1 = EventsL1.reduce((s, p) => s + FL2[p], 0) / EventsL1.length;\n  let NL = meanL1 * (1 - 0.1);\n  let SL = meanL1 * (1 + 0.1);\n  function detectionBlock(mwi, Events, NL0, SL0, thr) {\n    let NL = NL0,\n      SL = SL0,\n      sumSig = SL0,\n      sumNoi = NL0;\n    const Signal = [],\n      Noise = [],\n      VDs = [],\n      Class = [];\n    for (let i = 0; i < Events.length; i++) {\n      const P = Events[i];\n      const Ds = Math.min(1, Math.max(0, (mwi[P] - NL) / Math.max(eps, SL - NL)));\n      VDs.push(Ds);\n      if (Ds > thr) {\n        Signal.push(P);\n        Class.push(1);\n        sumSig += mwi[P];\n        SL = sumSig / (Signal.length + 1);\n      } else {\n        Noise.push(P);\n        Class.push(0);\n        sumNoi += mwi[P];\n        NL = sumNoi / (Noise.length + 1);\n      }\n    }\n    return { Signal, Noise, VDs, Class };\n  }\n  const B1 = detectionBlock(FL2, EventsL1, NL, SL, threshold1);\n  const B2 = detectionBlock(FL2, EventsL1, NL, SL, threshold2);\n\n  const ClassL3 = EventsL1.map((_, i) => {\n    const C1 = B1.Class[i],\n      C2 = B2.Class[i];\n    if (C1 === 1 && C2 === 1) return 1;\n    if (C1 === 0 && C2 === 0) return 0;\n    if (C1 === 1 && C2 === 0) {\n      const d1 = (B1.VDs[i] - threshold1) / (1 - threshold1);\n      const d2 = (threshold2 - B2.VDs[i]) / threshold2;\n      return d1 > d2 ? 1 : 0;\n    }\n    return 1;\n  });\n  const SignalL3 = [],\n    NoiseL3 = [];\n  for (let i = 0; i < EventsL1.length; i++) (ClassL3[i] ? SignalL3 : NoiseL3).push(EventsL1[i]);\n\n  let SL4 = SignalL3.length\n    ? SignalL3.reduce((s, p) => s + FL4[p], 0) / SignalL3.length\n    : EventsL1.reduce((s, p) => s + FL4[p], 0) / EventsL1.length;\n  let NL4 = NoiseL3.length\n    ? NoiseL3.reduce((s, p) => s + FL4[p], 0) / NoiseL3.length\n    : (EventsL1.reduce((s, p) => s + FL4[p], 0) / EventsL1.length) * 0.5;\n  const SignalL4 = [],\n    NoiseL4 = [];\n  for (let i = 0; i < EventsL1.length; i++) {\n    const P = EventsL1[i];\n    const Ds = Math.min(1, Math.max(0, (FL4[P] - NL4) / Math.max(eps, SL4 - NL4)));\n    if (ClassL3[i] === 1) {\n      SignalL4.push(P);\n      SL4 = history(SL4, FL4[P]);\n    } else {\n      if (Ds > thresholdL4) {\n        SignalL4.push(P);\n        SL4 = history(SL4, FL4[P]);\n      } else {\n        NoiseL4.push(P);\n        NL4 = history(NL4, FL4[P]);\n      }\n    }\n  }\n\n  const SignalL5 = SignalL4.slice();\n  const periods = [];\n  for (let i = 0; i < SignalL4.length - 1; i++) periods.push(SignalL4[i + 1] - SignalL4[i]);\n  const meanperiod = movingAverage(periods, 100);\n  for (let i = 0; i < periods.length; i++) {\n    if (periods[i] > (meanperiod[i] || periods[i]) * 1.5) {\n      const a = SignalL4[i],\n        b = SignalL4[i + 1];\n      for (const n of NoiseL4) {\n        if (n > a && n < b) {\n          const Ds = Math.min(1, Math.max(0, (FL4[n] - NL4) / Math.max(eps, SL4 - NL4)));\n          if (Ds > rescueThresh) SignalL5.push(n);\n        }\n      }\n    }\n  }\n  SignalL5.sort((x, y) => x - y);\n  const peaks0 = [];\n  for (const p of SignalL5) {\n    const base = clamp(p * M, 0, L - 1);\n    const a = clamp(base - 2 * M, 0, L - 1),\n      b = clamp(base + 2 * M, 0, L - 1);\n    let eIdx = a,\n      eBest = bandEnergyAt(a, w1, w2, w3, w4);\n    for (let i = a; i <= b; i++) {\n      const ev = bandEnergyAt(i, w1, w2, w3, w4);\n      if (ev > eBest) {\n        eBest = ev;\n        eIdx = i;\n      }\n    }\n    const posI = positiveMaximaIndex(data, eIdx - fineRad, eIdx + fineRad);\n    if (posI !== -1) peaks0.push(posI);\n  }\n  let peaks = [...new Set(peaks0)].sort((a, b) => a - b);\n  const refr = Math.round((refractoryMs / 1000) * fs);\n  if (peaks.length > 1) {\n    const keep = new Array(peaks.length).fill(true);\n    for (let i = 0; i < peaks.length - 1; i++) {\n      if (!keep[i]) continue;\n      const j = i + 1;\n      if (peaks[j] - peaks[i] < refr) {\n        if (data[peaks[i]] < data[peaks[j]]) keep[i] = false;\n        else keep[j] = false;\n      }\n    }\n    peaks = peaks.filter((_, k) => keep[k]).sort((a, b) => a - b);\n  }\n\n  const dsVal = (p) => Math.min(1, Math.max(0, (FL4[p] - NL4) / Math.max(eps, SL4 - NL4)));\n  const allDs = EventsL1.map(dsVal);\n  let weakDs = otsuThreshold(allDs);\n  weakDs = Math.max(weakDsMin, Math.min(weakDsMax, weakDs * 0.8));\n\n  const ampsStrong = peaks.map((i) => data[i]);\n  const medAmpStrong = median(ampsStrong) || 1;\n\n  const slopesStrong = peaks.map((i) => slopeAround(data, i, fs));\n  const slopeCut = slopeFrac * (median(slopesStrong) || 1);\n\n  function localAmpBaseline(idx) {\n    if (!peaks.length) return medAmpStrong;\n    let lo = 0,\n      hi = peaks.length - 1,\n      pos = peaks.length;\n    while (lo <= hi) {\n      const mid = (lo + hi) >> 1;\n      if (peaks[mid] >= idx) {\n        pos = mid;\n        hi = mid - 1;\n      } else lo = mid + 1;\n    }\n    const K = 3;\n    const from = Math.max(0, pos - K),\n      to = Math.min(peaks.length - 1, pos + K);\n    const neigh = [];\n    for (let k = from; k <= to; k++) neigh.push(data[peaks[k]]);\n    return median(neigh) || medAmpStrong;\n  }\n\n  const extra = [];\n  for (const n of NoiseL4) {\n    const base = clamp(n * M, 0, L - 1);\n    const a = clamp(base - 2 * M, 0, L - 1),\n      b = clamp(base + 2 * M, 0, L - 1);\n    let eIdx = a,\n      eBest = bandEnergyAt(a, w1, w2, w3, w4);\n    for (let i = a; i <= b; i++) {\n      const ev = bandEnergyAt(i, w1, w2, w3, w4);\n      if (ev > eBest) {\n        eBest = ev;\n        eIdx = i;\n      }\n    }\n    const posI = positiveMaximaIndex(data, eIdx - fineRad, eIdx + fineRad);\n    if (posI === -1) continue;\n\n    const Ds = dsVal(n);\n    const dsOk = Ds >= weakDs;\n\n    const baseAmp = localAmpBaseline(posI);\n    const ampOk = data[posI] >= weakAmpFracDefault * baseAmp;\n\n    const slopeOk = slopeAround(data, posI, fs) >= slopeCut;\n\n    if (!(dsOk && ampOk && slopeOk)) continue;\n\n    let nearest = Infinity;\n    let lo = 0,\n      hi = peaks.length - 1;\n    while (lo <= hi) {\n      const mid = (lo + hi) >> 1;\n      const d = posI - peaks[mid];\n      nearest = Math.min(nearest, Math.abs(d));\n      if (d < 0) hi = mid - 1;\n      else lo = mid + 1;\n    }\n    if (nearest >= Math.round(0.9 * refr)) extra.push(posI);\n  }\n\n  if (extra.length) {\n    peaks = [...new Set(peaks.concat(extra))].sort((a, b) => a - b);\n    if (peaks.length > 1) {\n      const keep = new Array(peaks.length).fill(true);\n      for (let i = 0; i < peaks.length - 1; i++) {\n        if (!keep[i]) continue;\n        const j = i + 1;\n        if (peaks[j] - peaks[i] < refr) {\n          if (data[peaks[i]] < data[peaks[j]]) keep[i] = false;\n          else keep[j] = false;\n        }\n      }\n      peaks = peaks.filter((_, k) => keep[k]);\n    }\n  }\n\n  return peaks;\n}\n","function designFIRBandpass(fs, f1, f2, taps) {\n  const M = taps;\n  const mid = (M - 1) / 2;\n  const h = new Float64Array(M);\n  for (let n = 0; n < M; n++) {\n    const k = n - mid;\n    const win = 0.54 - 0.46 * Math.cos((2 * Math.PI * n) / (M - 1));\n    const sinc = (f) =>\n      k === 0 ? (2 * f) / fs : Math.sin((2 * Math.PI * f * k) / fs) / (Math.PI * k);\n    h[n] = (sinc(f2) - sinc(f1)) * win;\n  }\n  const sum = h.reduce((a, b) => a + b, 0);\n  for (let i = 0; i < M; i++) h[i] /= sum || 1;\n  return h;\n}\n\nfunction filtfiltFIR(x, h) {\n  const nPad = Math.min(3 * (h.length - 1), x.length - 1);\n  const xPad = reflectPad(x, nPad);\n  const y1 = convFIR(xPad, h);\n  y1.reverse();\n  const y2 = convFIR(y1, h);\n  y2.reverse();\n  return y2.subarray(nPad, nPad + x.length);\n}\n\nfunction reflectPad(x, nPad) {\n  const N = x.length;\n  const out = new Float64Array(N + 2 * nPad);\n  for (let i = 0; i < nPad; i++) out[nPad - 1 - i] = x[i + 1] ?? x[0];\n  for (let i = 0; i < N; i++) out[nPad + i] = x[i];\n  for (let i = 0; i < nPad; i++) out[nPad + N + i] = x[N - 2 - i] ?? x[N - 1];\n  return out;\n}\n\nfunction convFIR(x, h) {\n  const N = x.length,\n    M = h.length,\n    y = new Float64Array(N);\n  for (let n = 0; n < N; n++) {\n    let acc = 0;\n    for (let k = 0; k < M; k++) {\n      const i = n - k;\n      if (i >= 0) acc += h[k] * x[i];\n    }\n    y[n] = acc;\n  }\n  return y;\n}\n\nexport function detectECGPeaksStages(signal, opts = {}) {\n  const {\n    fs = 400,\n    band = [5, 20],\n    firTaps = 81,\n    mwiSec = 0.12,\n    refractorySec = 0.2,\n    refineSec = 0.08,\n  } = opts;\n\n  const x = signal instanceof Float64Array ? signal : Float64Array.from(signal);\n  const N = x.length;\n  if (N === 0) return { indices: [], stages: {} };\n\n  const bpArr = new Float64Array(N);\n  const dArr = new Float64Array(N);\n  const sArr = new Float64Array(N);\n  const mArr = new Float64Array(N);\n  const thArr = new Float64Array(N).fill(NaN);\n  const h = designFIRBandpass(fs, band[0], band[1], firTaps);\n  const yBP = filtfiltFIR(x, h);\n  if (bpArr) bpArr.set(yBP);\n\n  const W = Math.max(1, Math.round(mwiSec * fs));\n\n  const dBuf = new Float64Array(5);\n  let dpos = 0,\n    dCount = 0;\n  const mwiBuf = new Float64Array(W);\n  let mpos = 0,\n    msum = 0,\n    mCount = 0;\n  const mRingLen = Math.max(W + 1, Math.round(3 * fs));\n  const mRing = new Float64Array(mRingLen);\n\n  let SPKI = 0,\n    NPKI = 0,\n    TH1 = 0;\n  let initialized = false,\n    initMax = 0,\n    initCount = 0;\n  const initNeeded = Math.round(2 * fs);\n\n  const peaks = [];\n  let lastR = -Infinity;\n  const rrHist = [];\n  const rrWin = 8;\n  let mPrev2 = 0,\n    mPrev1 = 0,\n    mCurr = 0;\n  let mValid = false;\n\n  for (let n = 0; n < N; n++) {\n    dBuf[dpos] = yBP[n];\n    dpos = (dpos + 1) % 5;\n    dCount++;\n    let d = 0;\n    if (dCount >= 5) {\n      const i0 = (dpos + 4) % 5,\n        i1 = (dpos + 3) % 5,\n        i3 = (dpos + 1) % 5,\n        i4 = (dpos + 0) % 5;\n      d = (2 * dBuf[i0] + dBuf[i1] - dBuf[i3] - 2 * dBuf[i4]) / 8;\n    }\n    if (dArr) dArr[n] = d;\n\n    const s = d * d;\n    if (sArr) sArr[n] = s;\n\n    if (mCount < W) {\n      msum += s;\n      mwiBuf[mpos] = s;\n      mpos = (mpos + 1) % W;\n      mCount++;\n    } else {\n      msum += s - mwiBuf[mpos];\n      mwiBuf[mpos] = s;\n      mpos = (mpos + 1) % W;\n    }\n    const mShow = msum / Math.min(W, mCount || 1);\n    if (mArr) mArr[n] = mShow;\n\n    if (mCount < W) {\n      continue;\n    }\n\n    const m = msum / W;\n    mRing[n % mRingLen] = m;\n    if (!mValid) {\n      mPrev2 = mPrev1 = mCurr = m;\n      mValid = true;\n      continue;\n    }\n    mPrev2 = mPrev1;\n    mPrev1 = mCurr;\n    mCurr = m;\n\n    if (!initialized) {\n      initMax = Math.max(initMax, mPrev1);\n      if (++initCount >= initNeeded) {\n        SPKI = 0.25 * initMax;\n        NPKI = 0.125 * initMax;\n        TH1 = NPKI + 0.2 * (SPKI - NPKI);\n        initialized = true;\n      }\n      if (thArr) thArr[n] = initialized ? TH1 : n > 0 ? thArr[n - 1] : 0; // <-- без NaN\n      continue;\n    }\n\n    if (thArr) thArr[n] = TH1;\n\n    if (mPrev1 > mPrev2 && mPrev1 >= mCurr) {\n      const idxM = n - 1;\n      const meanRR = rrHist.length\n        ? rrHist.reduce((a, b) => a + b, 0) / rrHist.length\n        : Math.round(0.8 * fs);\n      const missRR = Math.round(1.6 * meanRR);\n      if (idxM - lastR > missRR) {\n        const start = Math.max(lastR + Math.max(1, Math.round(0.2 * fs)), idxM - missRR);\n        const end = idxM - Math.max(1, Math.round(0.08 * fs));\n        let best = -Infinity,\n          bestI = -1;\n        for (let i = start; i < end; i++) {\n          const v = mRing[i % mRingLen];\n          if (v > best) {\n            best = v;\n            bestI = i;\n          }\n        }\n        if (bestI >= 0 && best >= 0.5 * TH1) accept(bestI, best);\n      }\n      if (mPrev1 >= TH1 && idxM - lastR >= Math.max(1, Math.round(0.2 * fs))) accept(idxM, mPrev1);\n      else {\n        NPKI = 0.125 * mPrev1 + 0.875 * NPKI;\n        TH1 = NPKI + 0.2 * (SPKI - NPKI);\n      }\n    }\n  }\n\n  return {\n    indices: peaks,\n    bandpass: bpArr,\n    differentiated: dArr,\n    squared: sArr,\n    mwi: mArr,\n  };\n\n  function accept(idxM, mVal) {\n    const delay = Math.round((W - 1) / 2 + 2);\n    const refine = Math.max(1, Math.round((opts.refineSec ?? 0.08) * fs));\n    let guess = idxM - delay;\n    if (guess < 0) guess = 0;\n    if (guess >= N) guess = N - 1;\n    const L = Math.max(0, guess - refine),\n      R = Math.min(N - 1, guess + refine);\n    let bestIdx = -1,\n      bestVal = -Infinity;\n    for (let j = L; j <= R; j++) {\n      const v = yBP[j];\n      if (v > 0 && v > bestVal) {\n        bestVal = v;\n        bestIdx = j;\n      }\n    }\n    if (bestIdx < 0) {\n      NPKI = 0.125 * mVal + 0.875 * NPKI;\n      TH1 = NPKI + 0.2 * (SPKI - NPKI);\n      return;\n    }\n    if (bestIdx > 0 && bestIdx < N - 1) {\n      const y1 = yBP[bestIdx - 1],\n        y2 = yBP[bestIdx],\n        y3 = yBP[bestIdx + 1];\n      const denom = y1 - 2 * y2 + y3;\n      if (denom !== 0) {\n        const delta = (0.5 * (y1 - y3)) / denom;\n        const cand = Math.round(bestIdx + Math.max(-1, Math.min(1, delta)));\n        if (cand >= L && cand <= R && yBP[cand] >= y2 && yBP[cand] > 0) bestIdx = cand;\n      }\n    }\n    peaks.push(bestIdx);\n    if (lastR > -Infinity) {\n      rrHist.push(bestIdx - lastR);\n      if (rrHist.length > rrWin) rrHist.shift();\n    }\n    lastR = bestIdx;\n    SPKI = 0.125 * mVal + 0.875 * SPKI;\n    TH1 = NPKI + 0.2 * (SPKI - NPKI);\n  }\n}\n","import { getTopValue } from '../../utils';\n\nexport function detectQRS_JS(inputSignal) {\n  const Fs = 400;\n  const ensembleSize = 10;\n  const noiseStdFactor = 2;\n  const maxImfs = 10;\n  const maxSiftings = 100;\n  const minPeakDistanceSec = 0.2;\n\n  const X = Array.from(inputSignal).map(Number);\n  const N = X.length;\n\n  const mean = (a) => a.reduce((s, v) => s + v, 0) / a.length;\n  const variance = (a) => {\n    const m = mean(a);\n    return a.reduce((s, v) => s + (v - m) ** 2, 0) / a.length;\n  };\n  const std = (a) => Math.sqrt(variance(a));\n  const maxAbs = (a) =>\n    getTopValue(\n      a.map((item) => Math.abs(item)),\n      'max',\n    );\n  const medianOf = (a) => {\n    const s = a.sort((x, y) => x - y);\n    const m = s.length;\n    if (!m) return 0;\n    const mid = m >> 1;\n    return m % 2 ? s[mid] : 0.5 * (s[mid - 1] + s[mid]);\n  };\n  const reflectIndex = (i, L) => {\n    if (L === 1) return 0;\n    const p = 2 * L - 2;\n    let m = ((i % p) + p) % p;\n    return m >= L ? p - m : m;\n  };\n\n  function movingMedianMirror(sig, k) {\n    if (k <= 1) return sig.slice();\n    const out = new Array(sig.length),\n      half = Math.floor((k - 1) / 2);\n    for (let i = 0; i < sig.length; i++) {\n      const w = new Array(k),\n        start = i - half;\n      for (let j = 0; j < k; j++) w[j] = sig[reflectIndex(start + j, sig.length)];\n      out[i] = medianOf(w);\n    }\n    return out;\n  }\n\n  function cubicSplineEval(xk, yk, xs) {\n    const n = xk.length;\n    if (!n) return xs.map(() => 0);\n    if (n === 1) return xs.map(() => yk[0]);\n    if (n === 2) {\n      const [x0, x1] = xk,\n        [y0, y1] = yk,\n        dy = (y1 - y0) / (x1 - x0 || 1e-12);\n      return xs.map((x) => y0 + dy * (x - x0));\n    }\n    const h = Array.from({ length: n - 1 }, (_, i) => xk[i + 1] - xk[i]),\n      alpha = new Array(n).fill(0);\n    for (let i = 1; i < n - 1; i++)\n      alpha[i] = (3 / h[i]) * (yk[i + 1] - yk[i]) - (3 / h[i - 1]) * (yk[i] - yk[i - 1]);\n    const l = new Array(n),\n      mu = new Array(n),\n      z = new Array(n);\n    l[0] = 1;\n    mu[0] = z[0] = 0;\n    for (let i = 1; i < n - 1; i++) {\n      l[i] = 2 * (xk[i + 1] - xk[i - 1]) - h[i - 1] * mu[i - 1];\n      mu[i] = h[i] / (l[i] || 1e-12);\n      z[i] = (alpha[i] - h[i - 1] * z[i - 1]) / (l[i] || 1e-12);\n    }\n    l[n - 1] = 1;\n    z[n - 1] = 0;\n    const b = new Array(n - 1),\n      c = new Array(n),\n      d = new Array(n - 1);\n    c[n - 1] = 0;\n    for (let j = n - 2; j >= 0; j--) {\n      c[j] = z[j] - mu[j] * (c[j + 1] || 0);\n      b[j] = (yk[j + 1] - yk[j]) / (h[j] || 1e-12) - (h[j] * (c[j + 1] + 2 * c[j])) / 3;\n      d[j] = (c[j + 1] - c[j]) / (3 * (h[j] || 1e-12));\n    }\n    return xs.map((x) => {\n      let j = 0;\n      if (x <= xk[0]) j = 0;\n      else if (x >= xk[n - 1]) j = n - 2;\n      else\n        for (let ii = 0; ii < n - 1; ii++)\n          if (x >= xk[ii] && x <= xk[ii + 1]) {\n            j = ii;\n            break;\n          }\n      const dx = x - xk[j];\n      return yk[j] + b[j] * dx + c[j] * dx * dx + d[j] * dx * dx * dx;\n    });\n  }\n\n  function findExtrema(sig) {\n    const maxima = [],\n      minima = [],\n      L = sig.length;\n    for (let i = 1; i < L - 1; i++) {\n      if (sig[i] > sig[i - 1] && sig[i] >= sig[i + 1]) maxima.push(i);\n      if (sig[i] < sig[i - 1] && sig[i] <= sig[i + 1]) minima.push(i);\n    }\n    if (L >= 2) {\n      if (sig[0] > sig[1]) maxima.unshift(0);\n      if (sig[0] < sig[1]) minima.unshift(0);\n      if (sig[L - 1] > sig[L - 2]) maxima.push(L - 1);\n      if (sig[L - 1] < sig[L - 2]) minima.push(L - 1);\n    }\n    return { maxima, minima };\n  }\n\n  function emd(signal, _maxImfs = 10, _maxSiftings = 100) {\n    const imfs = [],\n      N = signal.length;\n    let residue = signal.slice();\n    const tol = 0.05 * Math.max(1e-12, std(signal));\n    while (imfs.length < _maxImfs) {\n      const ex = findExtrema(residue);\n      if (ex.maxima.length + ex.minima.length < 2) break;\n      let h = residue.slice(),\n        it = 0;\n      while (it < _maxSiftings) {\n        const ex2 = findExtrema(h);\n        if (ex2.maxima.length + ex2.minima.length < 2) break;\n        const upper =\n          ex2.maxima.length >= 2\n            ? cubicSplineEval(\n                ex2.maxima,\n                ex2.maxima.map((i) => h[i]),\n                Array.from({ length: N }, (_, i) => i),\n              )\n            : Array(N).fill(ex2.maxima.length ? h[ex2.maxima[0]] : 0);\n        const lower =\n          ex2.minima.length >= 2\n            ? cubicSplineEval(\n                ex2.minima,\n                ex2.minima.map((i) => h[i]),\n                Array.from({ length: N }, (_, i) => i),\n              )\n            : Array(N).fill(ex2.minima.length ? h[ex2.minima[0]] : 0);\n        const m = new Array(N);\n        for (let i = 0; i < N; i++) m[i] = 0.5 * (upper[i] + lower[i]);\n        const hNext = new Array(N);\n        for (let i = 0; i < N; i++) hNext[i] = h[i] - m[i];\n        if (mean(m.map(Math.abs)) < tol) {\n          h = hNext;\n          break;\n        }\n        h = hNext;\n        it++;\n      }\n      imfs.push(h.slice());\n      for (let i = 0; i < N; i++) residue[i] -= h[i];\n      const exA = findExtrema(residue);\n      if (exA.maxima.length + exA.minima.length < 2) break;\n    }\n    imfs.push(residue.slice());\n    return imfs;\n  }\n\n  function gaussianRandomArray(n, s = 1) {\n    const out = new Array(n);\n    for (let i = 0; i < n; i += 2) {\n      const u1 = Math.random() || 1e-12,\n        u2 = Math.random(),\n        mag = Math.sqrt(-2 * Math.log(u1));\n      const z0 = mag * Math.cos(2 * Math.PI * u2),\n        z1 = mag * Math.sin(2 * Math.PI * u2);\n      out[i] = z0 * s;\n      if (i + 1 < n) out[i + 1] = z1 * s;\n    }\n    return out;\n  }\n\n  function ensembleEMD(signal, noiseStd, ensembleSize, _maxImfs, _maxSiftings) {\n    const N = signal.length,\n      runs = [];\n    let maxCount = 0;\n    for (let e = 0; e < ensembleSize; e++) {\n      const noise = gaussianRandomArray(N, noiseStd),\n        noisy = new Array(N);\n      for (let i = 0; i < N; i++) noisy[i] = signal[i] + noise[i];\n      const imfs = emd(noisy, _maxImfs, _maxSiftings);\n      runs.push(imfs);\n      if (imfs.length > maxCount) maxCount = imfs.length;\n    }\n    const modes = [];\n    for (let k = 0; k < maxCount; k++) {\n      const avg = new Array(N).fill(0);\n      let c = 0;\n      for (let r = 0; r < ensembleSize; r++) {\n        const imfs = runs[r];\n        if (k < imfs.length) {\n          const m = imfs[k];\n          for (let i = 0; i < N; i++) avg[i] += m[i];\n          c++;\n        }\n      }\n      if (c) for (let i = 0; i < N; i++) avg[i] /= c;\n      modes.push(avg);\n    }\n    return modes;\n  }\n\n  let X1 = X.slice();\n  const Xmean = mean(X1);\n  for (let i = 0; i < N; i++) X1[i] -= Xmean;\n  const maxabs = maxAbs(X1) || 1e-12;\n  for (let i = 0; i < N; i++) X1[i] /= maxabs;\n\n  const y1 = movingMedianMirror(X1, Math.max(1, Math.round(0.6 * Fs)));\n  const y2 = movingMedianMirror(X1, Math.max(1, Math.round(0.2 * Fs)));\n  const yy_pre = new Array(N);\n  for (let i = 0; i < N; i++) yy_pre[i] = X1[i] - 0.5 * y1[i] - 0.5 * y2[i];\n\n  const idxs = [],\n    thrIdx = 0.2 * (Math.max(yy_pre.map(Math.abs)) || 1e-12);\n  for (let i = 0; i < N; i++) if (Math.abs(yy_pre[i]) > thrIdx) idxs.push(yy_pre[i]);\n  const signProbe = idxs.length ? medianOf(idxs) : mean(yy_pre);\n  const yy = signProbe < 0 ? yy_pre.map((v) => -v) : yy_pre.slice();\n\n  const sd_val = Math.sqrt(variance(yy));\n  const modes = ensembleEMD(yy, noiseStdFactor * sd_val, ensembleSize, maxImfs, maxSiftings);\n  const K = Math.min(4, modes.length);\n  const y_signal = new Array(N).fill(0);\n  for (let m = 0; m < K; m++) for (let i = 0; i < N; i++) y_signal[i] += modes[m][i];\n\n  const y_pos = y_signal.map((v) => (v > 0 ? v : 0));\n  const posVals = y_pos.filter((v) => v > 0);\n  const mu = posVals.length ? mean(posVals) : 0;\n  const sig = posVals.length ? Math.sqrt(variance(posVals)) : 0;\n  const minPeakHeight = mu + 2 * sig;\n  const minPeakDistance = Math.round(minPeakDistanceSec * Fs);\n  const minProminence = 0.5 * sig;\n\n  function findPositivePeaks(y, minH, minD, minProm, promWin = minD) {\n    const N = y.length,\n      cand = [];\n    for (let i = 1; i < N - 1; i++)\n      if (y[i] > 0 && y[i] > y[i - 1] && y[i] >= y[i + 1] && y[i] >= minH)\n        cand.push({ idx: i, val: y[i] });\n    cand.sort((a, b) => b.val - a.val);\n    const kept = [];\n    for (const c of cand) if (!kept.some((t) => Math.abs(t - c.idx) < minD)) kept.push(c.idx);\n    const filtered = [];\n    for (const i of kept) {\n      const L = Math.max(0, i - promWin),\n        R = Math.min(N - 1, i + promWin);\n      let leftMin = y[i],\n        rightMin = y[i];\n      for (let k = L; k <= i; k++) if (y[k] < leftMin) leftMin = y[k];\n      for (let k = i; k <= R; k++) if (y[k] < rightMin) rightMin = y[k];\n      const prom = y[i] - Math.max(leftMin, rightMin);\n      if (prom >= (minProm || 0)) filtered.push({ idx: i, val: y[i], prom });\n    }\n    return filtered.sort((a, b) => a.idx - b.idx);\n  }\n\n  const peakObjs = findPositivePeaks(y_pos, minPeakHeight, minPeakDistance, minProminence);\n  const locs = peakObjs.map((p) => p.idx);\n\n  return { locs, y_signal, y_pos };\n}\n","import { detectRPeaks } from './signalConversionCMD1';\nimport { detectECGPeaksStages } from './signalConversionCMD2';\nimport { detectQRS_JS } from './signalConversionCMD3';\nexport const analyzeCMD = (signal, type) => {\n  const signalTime = signal.map((obj) => obj[0]);\n  const signalData = signal.map((obj) => obj[1]);\n  const transformPeaks = (data) => signalTime.map((item, i) => [item, data.includes(i) ? 100 : 0]);\n  let result;\n  if (type === 1) {\n    const tempResult = detectRPeaks(signalData, 400);\n    result = { peaks: transformPeaks(tempResult), data: tempResult };\n  } else if (type === 2) {\n    const tempResult = detectECGPeaksStages(signalData);\n    result = { peaks: transformPeaks(tempResult.indices), data: tempResult.indices };\n  } else if (type === 3) {\n    const tempResult = detectQRS_JS(signalData, { Fs: 400, ensembleSize: 4, noiseStdFactor: 2 });\n    result = { peaks: transformPeaks(tempResult.locs), data: tempResult.locs };\n  }\n  return result;\n};\n","export function detectRPeaks(signal, fs) {\n  const MAX_IMFS = 10;\n  const MAX_SIFTS = 8;\n  const SD_STOP = 0.2;\n  const EPS = 1e-12;\n  const MIN_GAP = Math.max(1, Math.floor(0.1 * fs));\n  const REFINE_WIN = 3;\n  const DROP_FIRST_NOISY = 1;\n  const CAP_USE_IMFS_UPTO = 5;\n\n  const N = signal.length | 0;\n  if (N < 3) return [];\n  const x = signal instanceof Float32Array ? signal : new Float32Array(signal);\n\n  const newF32 = (n) => new Float32Array(n);\n\n  function countZeroCrossings(arr) {\n    let c = 0,\n      prev = arr[0];\n    for (let i = 1; i < N; i++) {\n      const v = arr[i];\n      if ((prev >= 0 && v < 0) || (prev < 0 && v >= 0)) c++;\n      prev = v;\n    }\n    return c;\n  }\n\n  function countExtrema(arr) {\n    let c = 0;\n    for (let i = 1; i < N - 1; i++) {\n      const a = arr[i - 1],\n        b = arr[i],\n        c0 = arr[i + 1];\n      if ((b > a && b > c0) || (b < a && b < c0)) c++;\n    }\n    return c;\n  }\n\n  function buildEnvelope(h, indices, outEnv) {\n    if (indices.length === 0) {\n      outEnv.fill(h[0]);\n      return;\n    }\n    const firstIdx = indices[0];\n    const firstVal = h[firstIdx];\n    for (let i = 0; i < firstIdx; i++) outEnv[i] = firstVal;\n    for (let k = 0; k < indices.length - 1; k++) {\n      const i1 = indices[k],\n        i2 = indices[k + 1];\n      const v1 = h[i1],\n        v2 = h[i2];\n      const len = i2 - i1;\n      const slope = (v2 - v1) / len;\n      let acc = v1;\n      outEnv[i1] = v1;\n      for (let i = i1 + 1; i < i2; i++) {\n        acc += slope;\n        outEnv[i] = acc;\n      }\n      outEnv[i2] = v2;\n    }\n    const lastIdx = indices[indices.length - 1];\n    const lastVal = h[lastIdx];\n    for (let i = lastIdx + 1; i < N; i++) outEnv[i] = lastVal;\n  }\n\n  function siftOnce(h, upperEnv, lowerEnv, meanEnv) {\n    const maxIdx = [];\n    const minIdx = [];\n    for (let i = 1; i < N - 1; i++) {\n      const a = h[i - 1],\n        b = h[i],\n        c = h[i + 1];\n      if (b > a && b > c) maxIdx.push(i);\n      else if (b < a && b < c) minIdx.push(i);\n    }\n    if (maxIdx.length + minIdx.length < 2) return false;\n\n    if (h[0] > h[1]) maxIdx.unshift(0);\n    else if (h[0] < h[1]) minIdx.unshift(0);\n    if (h[N - 1] > h[N - 2]) maxIdx.push(N - 1);\n    else if (h[N - 1] < h[N - 2]) minIdx.push(N - 1);\n\n    buildEnvelope(h, maxIdx, upperEnv);\n    buildEnvelope(h, minIdx, lowerEnv);\n    for (let i = 0; i < N; i++) {\n      meanEnv[i] = 0.5 * (upperEnv[i] + lowerEnv[i]);\n      h[i] = h[i] - meanEnv[i];\n    }\n    return true;\n  }\n\n  function sdChange(prev, curr) {\n    let s = 0.0;\n    for (let i = 0; i < N; i++) {\n      const num = prev[i] - curr[i];\n      const den = prev[i] * prev[i] + EPS;\n      s += (num * num) / den;\n    }\n    return s;\n  }\n\n  function extractIMF(residue, upperEnv, lowerEnv, meanEnv, work) {\n    work.set(residue);\n    let h = work;\n    let prev = newF32(N);\n    let okSift = true;\n\n    for (let s = 0; s < MAX_SIFTS; s++) {\n      prev.set(h);\n      okSift = siftOnce(h, upperEnv, lowerEnv, meanEnv);\n      if (!okSift) break;\n      const sd = sdChange(prev, h);\n      const ext = countExtrema(h);\n      const zc = countZeroCrossings(h);\n      const isIMFshape = Math.abs(ext - zc) <= 1;\n\n      if (sd < SD_STOP && isIMFshape) break;\n    }\n    if (!okSift) return { imf: null, residue };\n    const imf = newF32(N);\n    for (let i = 0; i < N; i++) {\n      imf[i] = h[i];\n      residue[i] = residue[i] - imf[i];\n    }\n    return { imf, residue };\n  }\n  const upperEnv = newF32(N),\n    lowerEnv = newF32(N),\n    meanEnv = newF32(N),\n    work = newF32(N);\n  let residue = newF32(N);\n  residue.set(x);\n  const imfs = [];\n\n  for (let k = 0; k < MAX_IMFS; k++) {\n    const { imf, residue: newResidue } = extractIMF(residue, upperEnv, lowerEnv, meanEnv, work);\n    residue = newResidue;\n    if (!imf) break;\n    imfs.push(imf);\n    if (countExtrema(residue) < 2) break;\n  }\n\n  if (imfs.length === 0) return [];\n\n  const K = imfs.length;\n  const useStart = Math.min(DROP_FIRST_NOISY, K - 1);\n  const useEndExclusive = Math.max(K - 1, useStart + 1);\n  const y = newF32(N);\n  let used = 0;\n  for (let idx = useStart; idx < useEndExclusive; idx++) {\n    y.set(imfs[idx], 0);\n    used = 1;\n    break;\n  }\n  for (let idx = useStart + 1; idx < useEndExclusive && used < CAP_USE_IMFS_UPTO; idx++, used++) {\n    const c = imfs[idx];\n    for (let i = 0; i < N; i++) y[i] += c[i];\n  }\n  if (used === 0) y.set(imfs[0]);\n  const candIdx = [];\n  const candAmp = [];\n  for (let i = 1; i < N - 1; i++) {\n    const a = y[i - 1],\n      b = y[i],\n      c = y[i + 1];\n    if (b > a && b > c && b > 0) {\n      candIdx.push(i);\n      candAmp.push(b);\n    }\n  }\n  if (candIdx.length === 0) return [];\n\n  let maxAmp = -Infinity;\n  for (let i = 0; i < candAmp.length; i++) if (candAmp[i] > maxAmp) maxAmp = candAmp[i];\n  const tmp = candAmp.slice().sort((u, v) => u - v);\n  const med =\n    tmp.length % 2\n      ? tmp[(tmp.length - 1) >> 1]\n      : 0.5 * (tmp[tmp.length / 2 - 1] + tmp[tmp.length / 2]);\n  const thr = Math.max(0.3 * maxAmp, 0.6 * med);\n\n  const fIdx = [];\n  const fAmp = [];\n  for (let i = 0; i < candIdx.length; i++) {\n    if (candAmp[i] >= thr) {\n      fIdx.push(candIdx[i]);\n      fAmp.push(candAmp[i]);\n    }\n  }\n  if (fIdx.length === 0) return [];\n\n  const keepIdx = [];\n  const keepAmp = [];\n  let curIdx = fIdx[0],\n    curAmp = fAmp[0];\n  for (let i = 1; i < fIdx.length; i++) {\n    const idx = fIdx[i],\n      amp = fAmp[i];\n    if (idx - curIdx < MIN_GAP) {\n      if (amp > curAmp) {\n        curIdx = idx;\n        curAmp = amp;\n      }\n    } else {\n      keepIdx.push(curIdx);\n      keepAmp.push(curAmp);\n      curIdx = idx;\n      curAmp = amp;\n    }\n  }\n  keepIdx.push(curIdx);\n  keepAmp.push(curAmp);\n  const result = [];\n  for (let k2 = 0; k2 < keepIdx.length; k2++) {\n    const center = keepIdx[k2];\n    let bestI = center;\n    let bestV = x[center];\n    const i0 = Math.max(0, center - REFINE_WIN);\n    const i1 = Math.min(N - 1, center + REFINE_WIN);\n    for (let i = i0; i <= i1; i++) {\n      const v = x[i];\n      if (v > bestV) {\n        bestV = v;\n        bestI = i;\n      }\n    }\n    if (bestV > 0) result.push(bestI);\n  }\n  result.sort((a, b) => a - b);\n  const dedup = [];\n  for (let i = 0; i < result.length; i++) {\n    if (i === 0 || result[i] !== result[i - 1]) dedup.push(result[i]);\n  }\n  return dedup;\n}\n","export function toFloat32(arr) {\n  return arr instanceof Float32Array ? arr : Float32Array.from(arr);\n}\nexport function ensureOdd(n) {\n  return n % 2 === 0 ? n + 1 : n;\n}\n\nexport function designHPBiquad(fc, fs, Q) {\n  const w0 = (2 * Math.PI * fc) / fs,\n    cosw0 = Math.cos(w0),\n    sinw0 = Math.sin(w0),\n    alpha = sinw0 / (2 * Q);\n  let b0 = (1 + cosw0) / 2,\n    b1 = -(1 + cosw0),\n    b2 = (1 + cosw0) / 2,\n    a0 = 1 + alpha,\n    a1 = -2 * cosw0,\n    a2 = 1 - alpha;\n  b0 /= a0;\n  b1 /= a0;\n  b2 /= a0;\n  a1 /= a0;\n  a2 /= a0;\n  return { b0, b1, b2, a1, a2 };\n}\nexport function designButterworthHP_SOS(fc, fs, order) {\n  if (order === 2) return [designHPBiquad(fc, fs, 1 / Math.SQRT2)];\n  const Qs = [0.5411961, 1.30656296];\n  return Qs.map((Q) => designHPBiquad(fc, fs, Q));\n}\n\nexport function biquadCascade(x, sos) {\n  let y = new Float32Array(x.length);\n  x = toFloat32(x);\n  for (let s = 0; s < sos.length; s++) {\n    const { b0, b1, b2, a1, a2 } = sos[s];\n    let z1 = 0.0,\n      z2 = 0.0;\n    for (let n = 0; n < x.length; n++) {\n      const xn = x[n];\n      const yn = b0 * xn + z1;\n      z1 = b1 * xn - a1 * yn + z2;\n      z2 = b2 * xn - a2 * yn;\n      y[n] = yn;\n    }\n    if (s < sos.length - 1) {\n      x = y;\n      y = new Float32Array(x.length);\n    }\n  }\n  return y;\n}\n\nexport function reflectPad(x, nPad) {\n  const N = x.length;\n  const out = new Float32Array(N + 2 * nPad);\n  for (let i = 0; i < nPad; i++) out[i] = 2 * x[0] - x[nPad - i];\n  out.set(x, nPad);\n  for (let i = 0; i < nPad; i++) out[nPad + N + i] = 2 * x[N - 1] - x[N - 2 - i];\n  return out;\n}\n\nexport function filtfiltBiquad(x, sos) {\n  const N = x.length;\n  const pad = Math.max(1, Math.min(3 * 2 * sos.length, N - 1));\n  const xp = reflectPad(x, pad);\n  let y = biquadCascade(xp, sos);\n  y.reverse();\n  y = biquadCascade(y, sos);\n  y.reverse();\n  return y.subarray(pad, pad + N).slice();\n}\n\nexport function designLPBiquad(fc, fs, Q) {\n  const w0 = (2 * Math.PI * fc) / fs,\n    cosw0 = Math.cos(w0),\n    sinw0 = Math.sin(w0),\n    alpha = sinw0 / (2 * Q);\n  let b0 = (1 - cosw0) / 2,\n    b1 = 1 - cosw0,\n    b2 = (1 - cosw0) / 2,\n    a0 = 1 + alpha,\n    a1 = -2 * cosw0,\n    a2 = 1 - alpha;\n  b0 /= a0;\n  b1 /= a0;\n  b2 /= a0;\n  a1 /= a0;\n  a2 /= a0;\n  return { b0, b1, b2, a1, a2 };\n}\nexport function designButterworthLP_SOS(fc, fs, order) {\n  if (order === 2) return [designLPBiquad(fc, fs, 1 / Math.SQRT2)];\n  const Qs = [0.5411961, 1.30656296];\n  return Qs.map((Q) => designLPBiquad(fc, fs, Q));\n}\n\nexport function mean(arr) {\n  let s = 0,\n    n = arr.length;\n  for (let i = 0; i < n; i++) s += arr[i];\n  return s / Math.max(1, n);\n}\nexport function stdDev(arr, center) {\n  let s2 = 0,\n    n = arr.length;\n  for (let i = 0; i < n; i++) {\n    const d = arr[i] - center;\n    s2 += d * d;\n  }\n  return Math.sqrt(s2 / Math.max(1, n));\n}\nexport function mapAbsMinus(arr, center) {\n  const out = new Float32Array(arr.length);\n  for (let i = 0; i < arr.length; i++) out[i] = Math.abs(arr[i] - center);\n  return out;\n}\n\nexport function quantile(arr, q) {\n  const n = arr.length;\n  if (n === 0) return NaN;\n  if (q <= 0) return minOf(arr);\n  if (q >= 1) return maxOf(arr);\n  const a = Float32Array.from(arr);\n  const pos = (n - 1) * q;\n  const k = Math.floor(pos);\n  const frac = pos - k;\n  const vK = selectKthInPlace(a, k);\n  if (frac === 0) return vK;\n  const vK1 = selectKthInPlace(a, k + 1);\n  return vK + (vK1 - vK) * frac;\n}\nexport function selectKthInPlace(a, k, left = 0, right = a.length - 1) {\n  while (true) {\n    if (left === right) return a[left];\n    const mid = left + ((right - left) >> 1);\n    if (a[right] < a[left]) swap(a, left, right);\n    if (a[mid] < a[left]) swap(a, mid, left);\n    if (a[right] < a[mid]) swap(a, right, mid);\n    let pivot = a[mid];\n    let i = left,\n      j = right;\n    while (i <= j) {\n      while (a[i] < pivot) i++;\n      while (a[j] > pivot) j--;\n      if (i <= j) {\n        swap(a, i, j);\n        i++;\n        j--;\n      }\n    }\n    if (k <= j) right = j;\n    else if (k >= i) left = i;\n    else return a[k];\n  }\n}\nexport function swap(a, i, j) {\n  const t = a[i];\n  a[i] = a[j];\n  a[j] = t;\n}\nexport function minOf(arr) {\n  let m = +Infinity;\n  for (let i = 0; i < arr.length; i++) if (arr[i] < m) m = arr[i];\n  return m;\n}\nexport function maxOf(arr) {\n  let m = -Infinity;\n  for (let i = 0; i < arr.length; i++) if (arr[i] > m) m = arr[i];\n  return m;\n}\n\nexport function makeSampleView(x, maxSample) {\n  const N = x.length;\n  if (N <= maxSample) return toFloat32(x);\n  const stride = Math.max(1, Math.floor(N / maxSample));\n  const start = (Math.random() * stride) | 0;\n  const M = Math.ceil((N - start) / stride);\n  const out = new Float32Array(Math.min(maxSample, M));\n  for (let i = start, j = 0; i < N && j < out.length; i += stride, j++) out[j] = x[i];\n  return out;\n}\n\nexport function diff5Symmetric(x) {\n  const N = x.length,\n    xp = reflectPad(x, 2),\n    out = new Float32Array(N);\n  for (let n = 0; n < N; n++) {\n    const i = n + 2;\n    out[n] = (-xp[i - 2] - 2 * xp[i - 1] + 2 * xp[i + 1] + xp[i + 2]) * 0.125;\n  }\n  return out;\n}\nexport function diff1Central(x) {\n  const N = x.length,\n    xp = reflectPad(x, 1),\n    out = new Float32Array(N);\n  for (let n = 0; n < N; n++) {\n    const i = n + 1;\n    out[n] = 0.5 * (xp[i + 1] - xp[i - 1]);\n  }\n  return out;\n}\n\nexport function centeredMovingAverage(x, W) {\n  if (W < 3) return toFloat32(x).slice();\n  W = ensureOdd(W);\n  const L = (W - 1) >> 1,\n    xp = reflectPad(x, L),\n    N = x.length;\n  const ps = new Float64Array(xp.length + 1);\n  for (let i = 0; i < xp.length; i++) ps[i + 1] = ps[i] + xp[i];\n  const out = new Float32Array(N);\n  for (let n = 0; n < N; n++) {\n    const s = ps[n + W] - ps[n];\n    out[n] = s / W;\n  }\n  return out;\n}\n\nexport function msToSamples(fs, ms) {\n  return Math.max(1, Math.round((ms * fs) / 1000));\n}\nexport function rrMedian(rrBuf) {\n  if (!rrBuf.length) return 0;\n  return quantile(Float32Array.from(rrBuf), 0.5);\n}\nexport function rrBufPush(rrBuf, rr) {\n  rrBuf.push(rr);\n  if (rrBuf.length > 8) rrBuf.shift();\n}\nexport function clamp(v, lo, hi) {\n  return v < lo ? lo : v > hi ? hi : v;\n}\nexport function toInt32Array(a) {\n  if (a instanceof Int32Array) return a;\n  const out = new Int32Array(a.length);\n  for (let i = 0; i < a.length; i++) out[i] = a[i] | 0;\n  return out;\n}\n\nexport function argmaxAbsInRange(arr, l, r, center) {\n  let bestIdx = l,\n    bestVal = Math.abs(arr[l]);\n  for (let j = l + 1; j <= r; j++) {\n    const v = Math.abs(arr[j]);\n    if (v > bestVal) {\n      bestVal = v;\n      bestIdx = j;\n    } else if (v === bestVal) {\n      const dj = Math.abs(j - center),\n        db = Math.abs(bestIdx - center);\n      if (dj < db || (dj === db && j < bestIdx)) bestIdx = j;\n    }\n  }\n  return bestIdx;\n}\nexport function strength(arr, i) {\n  return Math.abs(arr[i] || 0);\n}\nexport function preSlopeMag(x, idx, preW) {\n  const l = Math.max(1, idx - preW),\n    r = idx;\n  let maxd = 0;\n  for (let i = l; i <= r; i++) {\n    const d = Math.abs(x[i] - x[i - 1]);\n    if (d > maxd) maxd = d;\n  }\n  return maxd;\n}\nexport function absSlice(arr, L, R) {\n  const out = new Float32Array(R - L + 1);\n  for (let i = L, j = 0; i <= R; i++, j++) out[j] = Math.abs(arr[i]);\n  return out;\n}\nexport function sortUniqueInt32(a) {\n  const tmp = Array.from(a);\n  tmp.sort((u, v) => u - v);\n  const out = [];\n  let last = null;\n  for (let i = 0; i < tmp.length; i++) {\n    const v = tmp[i] | 0;\n    if (last === null || v !== last) {\n      out.push(v);\n      last = v;\n    }\n  }\n  return Int32Array.from(out);\n}\n\nexport function absMinus(arr, c) {\n  const o = new Float32Array(arr.length);\n  for (let i = 0; i < arr.length; i++) o[i] = Math.abs(arr[i] - c);\n  return o;\n}\nexport function argmaxInRange(arr, L, R, center) {\n  let bi = L,\n    bv = arr[L];\n  for (let j = L + 1; j <= R; j++) {\n    const v = arr[j];\n    if (\n      v > bv ||\n      (v === bv && Math.abs(j - center) < Math.abs(bi - center)) ||\n      (v === bv && Math.abs(j - center) === Math.abs(bi - center) && j < bi)\n    ) {\n      bv = v;\n      bi = j;\n    }\n  }\n  return bi;\n}\nexport function snapToHillZeroCross(arr, i0, rad) {\n  const L = Math.max(1, i0 - rad),\n    R = Math.min(arr.length - 2, i0 + rad);\n  let best = -1,\n    bestD = 1e9;\n  for (let j = L; j <= R; j++) {\n    const dL = arr[j] - arr[j - 1],\n      dR = arr[j + 1] - arr[j],\n      s2 = arr[j + 1] - 2 * arr[j] + arr[j - 1];\n    if (dL > 0 && dR <= 0 && s2 < 0) {\n      const D = Math.abs(j - i0);\n      if (D < bestD) {\n        best = j;\n        bestD = D;\n      }\n    }\n  }\n  return best >= 0 ? best : i0;\n}\nexport function positiveProminence(sig, i, W) {\n  const half = (W - 1) >> 1;\n  const L = Math.max(0, i - half),\n    R = Math.min(sig.length - 1, i + half);\n  const seg = sig.subarray ? sig.subarray(L, R + 1) : sig.slice(L, R + 1);\n  const med = quantile(seg, 0.5);\n  const mad = quantile(absMinus(seg, med), 0.5) || 0;\n  const thr = Math.max(0.03, 1.5 * mad);\n  const mid = i - L;\n  const leftMed = quantile(\n    seg.subarray ? seg.subarray(0, Math.max(1, mid)) : seg.slice(0, Math.max(1, mid)),\n    0.5,\n  );\n  const rightMed = quantile(\n    seg.subarray\n      ? seg.subarray(Math.min(seg.length - 1, mid + 1))\n      : seg.slice(Math.min(seg.length - 1, mid + 1)),\n    0.5,\n  );\n  const base = Math.max(leftMed, rightMed);\n  return sig[i] >= base + thr;\n}\nexport function sidedSlopeCheck(arr, i, preW, postW) {\n  const L = Math.max(1, i - preW),\n    R = Math.min(arr.length - 1, i + postW);\n  let up = 0,\n    nL = 0;\n  for (let j = L; j <= i; j++) {\n    const dj = arr[j] - arr[j - 1];\n    if (dj !== 0) {\n      nL++;\n      if (dj > 0) up++;\n    }\n  }\n  let dn = 0,\n    nR = 0;\n  for (let j = i + 1; j <= R; j++) {\n    const dj = arr[j] - arr[j - 1];\n    if (dj !== 0) {\n      nR++;\n      if (dj < 0) dn++;\n    }\n  }\n  return (nL ? up / nL : 0) >= 0.55 && (nR ? dn / nR : 0) >= 0.55;\n}\n","import {\n  absMinus,\n  absSlice,\n  argmaxAbsInRange,\n  argmaxInRange,\n  centeredMovingAverage,\n  clamp,\n  designButterworthHP_SOS,\n  designButterworthLP_SOS,\n  diff1Central,\n  diff5Symmetric,\n  ensureOdd,\n  filtfiltBiquad,\n  makeSampleView,\n  mapAbsMinus,\n  mean,\n  msToSamples,\n  positiveProminence,\n  preSlopeMag,\n  quantile,\n  reflectPad,\n  rrBufPush,\n  rrMedian,\n  sidedSlopeCheck,\n  snapToHillZeroCross,\n  sortUniqueInt32,\n  stdDev,\n  toFloat32,\n  toInt32Array,\n} from './utils';\n\nexport function removeBaseline(ecg, fs, opts = {}) {\n  const method = opts.method || 'hp';\n  const x = toFloat32(ecg);\n  if (x.length < 4) {\n    return opts.returnBaseline\n      ? { signal: x.slice(), baseline: new Float32Array(x.length) }\n      : x.slice();\n  }\n  if (method === 'median') {\n    const win1 = ensureOdd(\n      Math.max(3, Math.round(opts.win1Ms ? (opts.win1Ms * fs) / 1000 : 0.2 * fs)),\n    );\n    const win2 = ensureOdd(\n      Math.max(3, Math.round(opts.win2Ms ? (opts.win2Ms * fs) / 1000 : 0.6 * fs)),\n    );\n    const base1 = centeredSlidingMedian(x, win1);\n    const base2 = centeredSlidingMedian(base1, win2);\n    const y = new Float32Array(x.length);\n    for (let i = 0; i < x.length; i++) y[i] = x[i] - base2[i];\n    return opts.returnBaseline ? { signal: y, baseline: base2 } : y;\n  }\n  const fc = opts.hpHz != null ? opts.hpHz : 0.7;\n  const order = opts.order === 2 ? 2 : 4;\n  const sos = designButterworthHP_SOS(fc, fs, order);\n  const y = filtfiltBiquad(x, sos);\n  if (opts.returnBaseline) {\n    const base = new Float32Array(x.length);\n    for (let i = 0; i < x.length; i++) base[i] = x[i] - y[i];\n    return { signal: y, baseline: base };\n  }\n  return y;\n}\n\nfunction centeredSlidingMedian(x, W) {\n  if (W < 3) return x.slice();\n  W = ensureOdd(W);\n  const L = (W - 1) >> 1;\n  const xp = reflectPad(x, L);\n  const med = slidingMedianCausal(xp, W);\n  return med.subarray(0, x.length).slice();\n}\n\nfunction slidingMedianCausal(arr, W) {\n  W = ensureOdd(W);\n  const nOut = arr.length - W + 1;\n  if (nOut <= 0) return new Float32Array(0);\n  function Heap(cmp) {\n    this.cmp = cmp;\n    this.a = [];\n  }\n  Heap.prototype.size = function () {\n    return this.a.length;\n  };\n  Heap.prototype.peek = function () {\n    return this.a[0];\n  };\n  Heap.prototype.push = function (v) {\n    const a = this.a;\n    a.push(v);\n    let i = a.length - 1;\n    while (i > 0) {\n      const p = (i - 1) >> 1;\n      if (!this.cmp(a[i], a[p])) break;\n      const t = a[i];\n      a[i] = a[p];\n      a[p] = t;\n      i = p;\n    }\n  };\n  Heap.prototype.pop = function () {\n    const a = this.a;\n    const top = a[0];\n    const last = a.pop();\n    if (a.length) {\n      a[0] = last;\n      let i = 0;\n      while (true) {\n        let l = 2 * i + 1,\n          r = l + 1,\n          m = i;\n        if (l < a.length && this.cmp(a[l], a[m])) m = l;\n        if (r < a.length && this.cmp(a[r], a[m])) m = r;\n        if (m === i) break;\n        const t = a[i];\n        a[i] = a[m];\n        a[m] = t;\n        i = m;\n      }\n    }\n    return top;\n  };\n  const lower = new Heap((x, y) => x.val > y.val || (x.val === y.val && x.idx > y.idx));\n  const upper = new Heap((x, y) => x.val < y.val || (x.val === y.val && x.idx < y.idx));\n  const delayed = new Map();\n  let loSize = 0,\n    hiSize = 0;\n  function prune(heap) {\n    while (heap.size()) {\n      const top = heap.peek();\n      const cnt = delayed.get(top.idx);\n      if (!cnt) break;\n      if (cnt === 1) delayed.delete(top.idx);\n      else delayed.set(top.idx, cnt - 1);\n      heap.pop();\n    }\n  }\n  function rebalance() {\n    if (loSize > hiSize + 1) {\n      prune(lower);\n      upper.push(lower.pop());\n      loSize--;\n      hiSize++;\n      prune(lower);\n    } else if (loSize < hiSize) {\n      prune(upper);\n      lower.push(upper.pop());\n      loSize++;\n      hiSize--;\n      prune(upper);\n    }\n  }\n  function add(val, idx) {\n    if (!lower.size() || val <= lower.peek().val) {\n      lower.push({ val, idx });\n      loSize++;\n    } else {\n      upper.push({ val, idx });\n      hiSize++;\n    }\n    rebalance();\n  }\n  function remove(val, idx) {\n    delayed.set(idx, (delayed.get(idx) || 0) + 1);\n    if (lower.size() && val <= lower.peek().val) loSize--;\n    else hiSize--;\n    prune(lower);\n    prune(upper);\n    rebalance();\n  }\n  const out = new Float32Array(nOut);\n  for (let i = 0; i < W; i++) add(arr[i], i);\n  prune(lower);\n  out[0] = lower.peek().val;\n  for (let i = W; i < arr.length; i++) {\n    add(arr[i], i);\n    const outIdx = i - W;\n    remove(arr[outIdx], outIdx);\n    prune(lower);\n    out[i - W + 1] = lower.peek().val;\n  }\n  return out;\n}\n\nexport function bandpassQRS(ecg, fs, opts = {}) {\n  const hp = opts.hp != null ? opts.hp : 8;\n  const lp = opts.lp != null ? opts.lp : 40;\n  const orderHP = opts.orderHP === 2 ? 2 : 4;\n  const orderLP = opts.orderLP === 2 ? 2 : 4;\n  const x = toFloat32(ecg);\n  if (x.length < 4) return x.slice();\n  const sosHP = designButterworthHP_SOS(hp, fs, orderHP);\n  const sosLP = designButterworthLP_SOS(lp, fs, orderLP);\n  const sos = sosHP.concat(sosLP);\n  return filtfiltBiquad(x, sos);\n}\n\nexport function robustNormalize(ecg, opts = {}) {\n  const x = toFloat32(ecg);\n  const N = x.length;\n  if (!N)\n    return opts.returnStats ? { signal: new Float32Array(0), stats: {} } : new Float32Array(0);\n  const centerMode = opts.center || 'median';\n  const scaleMode = opts.scale || 'mad';\n  const maxSample = opts.maxSample != null ? opts.maxSample : 200000;\n  const sample = makeSampleView(x, maxSample);\n  const center = centerMode === 'mean' ? mean(sample) : quantile(sample, 0.5);\n  let scale,\n    stats = { centerMode, scaleMode, center };\n  if (scaleMode === 'none') scale = 1.0;\n  else if (scaleMode === 'std') scale = stdDev(sample, center);\n  else if (scaleMode === 'iqr') {\n    const q1 = quantile(sample, 0.25),\n      q3 = quantile(sample, 0.75);\n    stats.q1 = q1;\n    stats.q3 = q3;\n    scale = Math.max(1e-12, (q3 - q1) / 1.349);\n  } else if (scaleMode === 'p95') {\n    const p95 = quantile(mapAbsMinus(sample, center), 0.95);\n    stats.p95abs = p95;\n    scale = Math.max(1e-12, p95);\n  } else {\n    const mad = quantile(mapAbsMinus(sample, center), 0.5);\n    stats.mad = mad;\n    scale = Math.max(1e-12, mad * 1.4826);\n  }\n  const invS = 1.0 / (scale || 1.0);\n  const y = new Float32Array(N);\n  if (opts.clipNsigma != null && isFinite(opts.clipNsigma)) {\n    const C = Math.abs(opts.clipNsigma);\n    for (let i = 0; i < N; i++) {\n      let v = (x[i] - center) * invS;\n      if (v > C) v = C;\n      if (v < -C) v = -C;\n      y[i] = v;\n    }\n    stats.clipNsigma = C;\n  } else for (let i = 0; i < N; i++) y[i] = (x[i] - center) * invS;\n  stats.scale = scale;\n  return opts.returnStats ? { signal: y, stats } : y;\n}\n\nexport function ptFeature(xIn, fs, opts = {}) {\n  const x = toFloat32(xIn);\n  const N = x.length;\n  if (!N) return new Float32Array(0);\n  const deriv = opts.deriv || 'diff5';\n  const d = deriv === 'diff1' ? diff1Central(x) : diff5Symmetric(x);\n  for (let i = 0; i < N; i++) d[i] = d[i] * d[i];\n  const W = ensureOdd(\n    Math.max(3, Math.round(((opts.mwiMs != null ? opts.mwiMs : 150) * fs) / 1000)),\n  );\n  return centeredMovingAverage(d, W);\n}\n\nexport function adaptivePeakPick(wIn, fs, opts = {}) {\n  const w = toFloat32(wIn);\n  const N = w.length;\n  if (N < 3) return new Int32Array(0);\n  const refrSamp = msToSamples(fs, opts.refractoryMs != null ? opts.refractoryMs : 200);\n  const initLen = Math.min(\n    N,\n    Math.max(1, Math.round((opts.initWinSec != null ? opts.initWinSec : 2.0) * fs)),\n  );\n  const alpha = opts.thrAlpha != null ? opts.thrAlpha : 0.25;\n  const sbFactor = opts.searchBackFactor != null ? opts.searchBackFactor : 1.66;\n  const initSeg = w.subarray(0, initLen);\n  let NPKI = quantile(initSeg, 0.2);\n  let SPKI = quantile(initSeg, 0.9);\n  let THR = NPKI + alpha * (SPKI - NPKI);\n  const peaks = [],\n    peakVals = [];\n  let lastR = -1;\n  let subMaxIdx = -1,\n    subMaxVal = -Infinity;\n  const rrBuf = [];\n  for (let i = 1; i < N - 1; i++) {\n    if (!(w[i] > w[i - 1] && w[i] >= w[i + 1])) continue;\n    const pIdx = i,\n      pVal = w[i];\n    if (peaks.length) {\n      const rr = pIdx - lastR,\n        rrMed = rrMedian(rrBuf);\n      if (rrMed > 0 && rr > Math.round(sbFactor * rrMed)) {\n        if (subMaxIdx > lastR + refrSamp) {\n          peaks.push(subMaxIdx);\n          peakVals.push(subMaxVal);\n          rrBufPush(rrBuf, subMaxIdx - lastR);\n          lastR = subMaxIdx;\n          SPKI = 0.125 * subMaxVal + 0.875 * SPKI;\n          THR = NPKI + alpha * (SPKI - NPKI);\n          subMaxIdx = -1;\n          subMaxVal = -Infinity;\n        }\n      }\n    }\n    if (pVal > THR) {\n      if (lastR >= 0 && pIdx - lastR <= refrSamp) {\n        if (pVal > peakVals[peakVals.length - 1]) {\n          peaks[peaks.length - 1] = pIdx;\n          peakVals[peakVals.length - 1] = pVal;\n          lastR = pIdx;\n        }\n      } else {\n        peaks.push(pIdx);\n        peakVals.push(pVal);\n        if (lastR >= 0) rrBufPush(rrBuf, pIdx - lastR);\n        lastR = pIdx;\n      }\n      SPKI = 0.125 * pVal + 0.875 * SPKI;\n      THR = NPKI + alpha * (SPKI - NPKI);\n      subMaxIdx = -1;\n      subMaxVal = -Infinity;\n    } else {\n      NPKI = 0.125 * pVal + 0.875 * NPKI;\n      THR = NPKI + alpha * (SPKI - NPKI);\n      if (pVal > subMaxVal) {\n        subMaxVal = pVal;\n        subMaxIdx = pIdx;\n      }\n    }\n  }\n  return Int32Array.from(peaks);\n}\n\nexport function refineOnRaw(xRaw, candIdx, fs, opts = {}) {\n  const x = toFloat32(xRaw);\n  const N = x.length;\n  const idxIn = toInt32Array(candIdx);\n  const HALF = msToSamples(fs, opts.winMs != null ? opts.winMs : 75);\n  const MICRO = Math.max(1, opts.microWin != null ? opts.microWin : 3);\n  const PRE = msToSamples(fs, 40);\n  const POST = msToSamples(fs, 40);\n  const MADW = Math.max(21, msToSamples(fs, 200) | 1);\n  const ZC_WIN = Math.max(2, msToSamples(fs, 12));\n  const hasBP = opts.xBandpass && opts.xBandpass.length === N;\n  const ref = hasBP ? opts.xBandpass : x;\n  const out = [];\n  for (let k = 0; k < idxIn.length; k++) {\n    const c = clamp(idxIn[k], 0, N - 1);\n    const L = Math.max(0, c - HALF),\n      R = Math.min(N - 1, c + HALF);\n    const rough = argmaxInRange(ref, L, R, c);\n    const l2 = Math.max(L, rough - MICRO),\n      r2 = Math.min(R, rough + MICRO);\n    let i = argmaxInRange(x, l2, r2, rough);\n    i = snapToHillZeroCross(ref, i, ZC_WIN);\n    if (i < 1 || i > N - 2) continue;\n    if (!positiveProminence(x, i, MADW)) continue;\n    if (!sidedSlopeCheck(ref, i, PRE, POST)) continue;\n    out.push(i);\n  }\n  return Int32Array.from(out);\n}\n\nexport function rrPostprocess(xRef, rIdxIn, fs, opts = {}) {\n  const x = xRef instanceof Float32Array ? xRef : Float32Array.from(xRef);\n  let r = sortUniqueInt32(rIdxIn);\n  const N = x.length;\n  if (!r.length) return r;\n  const feat = opts.feat && opts.feat.length === N ? opts.feat : null;\n  const refr = msToSamples(fs, opts.refractoryMs != null ? opts.refractoryMs : 200);\n  const minRR = msToSamples(fs, opts.minRRMs != null ? opts.minRRMs : 240);\n  const tWin = msToSamples(fs, opts.tSuppressMs != null ? opts.tSuppressMs : 200);\n  const preW = msToSamples(fs, opts.preSlopeMs != null ? opts.preSlopeMs : 40);\n  const frac = opts.tSlopeFrac != null ? opts.tSlopeFrac : 0.4;\n  const sbF = opts.sbFactor != null ? opts.sbFactor : 1.5;\n  const sbK = opts.sbK != null ? opts.sbK : 3.0;\n\n  {\n    const kept = [];\n    const base = feat || x;\n    let last = r[0];\n    for (let i = 1; i < r.length; i++) {\n      const cur = r[i];\n      if (cur - last < minRR) last = base[last] >= base[cur] ? last : cur;\n      else {\n        kept.push(last);\n        last = cur;\n      }\n    }\n    kept.push(last);\n    r = Int32Array.from(kept);\n  }\n  if (r.length <= 1) return r;\n\n  {\n    const kept = [r[0]];\n    for (let i = 1; i < r.length; i++) {\n      const prev = kept[kept.length - 1],\n        cur = r[i];\n      if (cur - prev <= tWin) {\n        const sPrev = preSlopeMag(x, prev, preW),\n          sCur = preSlopeMag(x, cur, preW);\n        if (sCur < frac * sPrev) continue;\n      }\n      kept.push(cur);\n    }\n    r = Int32Array.from(kept);\n  }\n  if (r.length <= 1) return r;\n\n  {\n    const base = feat || x;\n    const out = [r[0]];\n    const rrBuf = [];\n    for (let i = 1; i < r.length; i++) {\n      const prev = out[out.length - 1],\n        cur = r[i],\n        rr = cur - prev;\n      const rrMed = rrMedian(rrBuf),\n        needSB = rrMed > 0 && rr > Math.round(sbF * rrMed);\n      if (needSB) {\n        const L = Math.max(prev + refr, prev + 1),\n          R = Math.min(cur - refr, cur - 1);\n        if (R > L + 2) {\n          const mid = (L + R) >> 1;\n          let ins = argmaxInRange(base, L, R, mid);\n          ins = snapToHillZeroCross(base, ins, Math.max(2, msToSamples(fs, 12)));\n          if (positiveProminence(base, ins, Math.max(21, msToSamples(fs, 200) | 1))) {\n            const seg = base.subarray ? base.subarray(L, R + 1) : base.slice(L, R + 1);\n            const med = quantile(seg, 0.5);\n            const mad = quantile(absMinus(seg, med), 0.5);\n            const thr = med + sbK * (mad || 0);\n            if (base[ins] > thr) {\n              out.push(ins);\n              rrBufPush(rrBuf, ins - prev);\n              rrBufPush(rrBuf, cur - ins);\n              out.push(cur);\n              continue;\n            }\n          }\n        }\n      }\n      rrBufPush(rrBuf, rr);\n      out.push(cur);\n    }\n    r = sortUniqueInt32(out);\n  }\n  return r;\n}\n\nexport function tkeoFeature(xIn, fs, opts = {}) {\n  const x = toFloat32(xIn);\n  const N = x.length;\n  if (!N) return new Float32Array(0);\n  const xp = reflectPad(x, 1);\n  const u = new Float32Array(N);\n  for (let n = 0; n < N; n++) {\n    const a = xp[n + 1],\n      prev = xp[n],\n      next = xp[n + 2];\n    u[n] = Math.abs(a * a - prev * next);\n  }\n  const W = ensureOdd(\n    Math.max(3, Math.round(((opts.winMs != null ? opts.winMs : 120) * fs) / 1000)),\n  );\n  return centeredMovingAverage(u, W);\n}\n\nexport function tkeoCandidatePeaks(xIn, fs, opts = {}) {\n  const s = tkeoFeature(xIn, fs, { winMs: opts.winMs });\n  const sample = makeSampleView(s, opts.maxSample != null ? opts.maxSample : 200000);\n  const med = quantile(sample, 0.5);\n  const mad = quantile(mapAbsMinus(sample, med), 0.5);\n  const thr = med + (opts.k != null ? opts.k : 4.0) * (mad || 0);\n  const N = s.length,\n    refr = msToSamples(fs, opts.refractoryMs != null ? opts.refractoryMs : 200);\n  const peaks = [],\n    peakVals = [];\n  let last = -1;\n  for (let i = 1; i < N - 1; i++) {\n    if (!(s[i] > s[i - 1] && s[i] >= s[i + 1])) continue;\n    if (s[i] < thr) continue;\n    if (last >= 0 && i - last <= refr) {\n      if (s[i] > peakVals[peakVals.length - 1]) {\n        peaks[peaks.length - 1] = i;\n        peakVals[peakVals.length - 1] = s[i];\n        last = i;\n      }\n    } else {\n      peaks.push(i);\n      peakVals.push(s[i]);\n      last = i;\n    }\n  }\n  const idx = Int32Array.from(peaks);\n  return opts.returnFeature ? { indices: idx, feature: s, thr } : idx;\n}\n\nexport function fuseCandidates(lists, fs, opts = {}) {\n  const tol = msToSamples(fs, opts.mergeTolMs != null ? opts.mergeTolMs : 100);\n  const feats = Array.isArray(opts.feats) ? opts.feats : null;\n  const xRef = opts.xRef || null;\n  const all = [];\n  for (let s = 0; s < lists.length; s++) {\n    const arr = sortUniqueInt32(lists[s] || []);\n    for (let k = 0; k < arr.length; k++) {\n      const idx = arr[k];\n      const score =\n        feats && feats[s] && feats[s].length > idx\n          ? Math.abs(feats[s][idx])\n          : xRef && xRef.length > idx\n          ? Math.abs(xRef[idx])\n          : 0;\n      all.push({ idx, src: s, score });\n    }\n  }\n  if (!all.length)\n    return opts.returnMeta ? { indices: new Int32Array(0), meta: [] } : new Int32Array(0);\n  all.sort((a, b) => a.idx - b.idx);\n  const out = [],\n    meta = [];\n  let group = [all[0]];\n  for (let i = 1; i < all.length; i++) {\n    const prev = group[group.length - 1],\n      cur = all[i];\n    if (cur.idx - prev.idx <= tol) group.push(cur);\n    else {\n      flushGroup(group, out, meta);\n      group = [cur];\n    }\n  }\n  flushGroup(group, out, meta);\n  const indices = Int32Array.from(out);\n  return opts.returnMeta ? { indices, meta } : indices;\n\n  function flushGroup(g, out, meta) {\n    if (!g || !g.length) return;\n    let best = g[0];\n    for (let j = 1; j < g.length; j++) if (g[j].score > best.score) best = g[j];\n    out.push(best.idx);\n    if (opts.returnMeta) {\n      const sources = new Set();\n      for (const e of g) sources.add(e.src);\n      meta.push({\n        i: best.idx,\n        votes: Array.from(sources).length,\n        sources: Array.from(sources).sort((a, b) => a - b),\n      });\n    }\n  }\n}\n\nexport function scoreConfidence(rIdxIn, ctx, fs, opts = {}) {\n  const r = sortUniqueInt32(rIdxIn);\n  const M = r.length;\n  const xRef = toFloat32(ctx.xRef || []);\n  const wPT = ctx.wPT ? toFloat32(ctx.wPT) : null;\n  const sTK = ctx.sTKEO ? toFloat32(ctx.sTKEO) : null;\n  const meta = Array.isArray(ctx.meta) ? ctx.meta : null;\n  const N = xRef.length;\n  if (!M) return [];\n  const featWin = msToSamples(fs, opts.featWinMs != null ? opts.featWinMs : 800);\n  const ampWin = msToSamples(fs, opts.ampWinMs != null ? opts.ampWinMs : 800);\n  const voteTol = msToSamples(fs, opts.voteTolMs != null ? opts.voteTolMs : 60);\n  const kVote = opts.kVote != null ? opts.kVote : 3.0;\n  const W = Object.assign({ energy: 0.5, votes: 0.25, rr: 0.25 }, opts.weights || {});\n  const wsum = Math.max(1e-12, W.energy + W.votes + W.rr);\n  W.energy /= wsum;\n  W.votes /= wsum;\n  W.rr /= wsum;\n  const Z = Object.assign({ z0: 2.0, zMax: 8.0, tauRR: 1.0 }, opts.z || {});\n  const eps = 1e-12;\n\n  const rr = [];\n  for (let i = 1; i < M; i++) rr.push(r[i] - r[i - 1]);\n  const rrArr = Float32Array.from(rr);\n  const rrMed = rrArr.length ? quantile(rrArr, 0.5) : 0;\n  const rrMAD = rrArr.length ? quantile(mapAbsMinus(rrArr, rrMed), 0.5) : 0;\n  const rrMADs = rrMAD * 1.4826 || (10 * fs) / 1000;\n\n  function clip01(v) {\n    return v < 0 ? 0 : v > 1 ? 1 : v;\n  }\n  function zToScoreLinear(z, z0, zMax) {\n    return clip01((z - z0) / Math.max(1e-6, zMax - z0));\n  }\n  function devToScoreGaussian(zdev, tau) {\n    return Math.exp(-0.5 * Math.pow(zdev / Math.max(1e-6, tau), 2));\n  }\n  function nearestMetaVotes(meta, idx, tolSamp) {\n    if (!meta) return -1;\n    let best = -1,\n      bestD = tolSamp + 1;\n    for (let j = 0; j < meta.length; j++) {\n      const d = Math.abs((meta[j].i | 0) - idx);\n      if (d <= tolSamp && d < bestD) {\n        bestD = d;\n        best = j;\n      }\n    }\n    return best >= 0 ? Math.min(2, Math.max(0, meta[best].votes | 0)) : -1;\n  }\n  function localZAt(arr, idx, halfWin, useAbs) {\n    if (!arr || !arr.length) return 0;\n    const L = Math.max(0, idx - halfWin),\n      R = Math.min(arr.length - 1, idx + halfWin);\n    if (R <= L) return 0;\n    const seg = useAbs\n      ? absSlice(arr, L, R)\n      : Float32Array.from(arr.subarray ? arr.subarray(L, R + 1) : arr.slice(L, R + 1));\n    const med = quantile(seg, 0.5);\n    const mad = quantile(mapAbsMinus(seg, med), 0.5) * 1.4826 || 1e-9;\n    const val = useAbs ? Math.abs(arr[idx]) : arr[idx];\n    return (val - med) / mad;\n  }\n  function voteFromFeat(feat, idx, halfWin, k) {\n    if (!feat || !feat.length) return 0;\n    const L = Math.max(0, idx - halfWin),\n      R = Math.min(feat.length - 1, idx + halfWin);\n    const j = argmaxAbsInRange(feat, L, R, idx);\n    const seg = absSlice(feat, L, R);\n    const med = quantile(seg, 0.5);\n    const mad = quantile(mapAbsMinus(seg, med), 0.5);\n    const thr = med + k * (mad || 0);\n    return Math.abs(feat[j]) > thr ? 1 : 0;\n  }\n\n  const out = new Array(M);\n  for (let k = 0; k < M; k++) {\n    const idx = r[k];\n    let ptScore = 0,\n      tkScore = 0;\n    const featHalf = Math.max(1, Math.floor(featWin / 2));\n    if (wPT && wPT.length) {\n      const j = argmaxAbsInRange(\n        wPT,\n        Math.max(0, idx - featHalf),\n        Math.min(wPT.length - 1, idx + featHalf),\n        idx,\n      );\n      const z = localZAt(wPT, j, featHalf, false);\n      ptScore = zToScoreLinear(Math.abs(z), Z.z0, Z.zMax);\n    }\n    if (sTK && sTK.length) {\n      const j = argmaxAbsInRange(\n        sTK,\n        Math.max(0, idx - featHalf),\n        Math.min(sTK.length - 1, idx + featHalf),\n        idx,\n      );\n      const z = localZAt(sTK, j, featHalf, false);\n      tkScore = zToScoreLinear(Math.abs(z), Z.z0, Z.zMax);\n    }\n    const featScore = Math.max(ptScore, tkScore);\n    const ampHalf = Math.max(1, Math.floor(ampWin / 2));\n    const zAmp = localZAt(xRef, idx, ampHalf, true);\n    const ampScore = zToScoreLinear(Math.abs(zAmp), Z.z0, Z.zMax);\n    const energy = 0.7 * featScore + 0.3 * ampScore;\n\n    let votes = -1;\n    if (meta) {\n      const v = nearestMetaVotes(meta, idx, voteTol);\n      if (v >= 0) votes = v;\n    }\n    if (votes < 0) {\n      const half = Math.max(1, Math.floor(msToSamples(fs, 60) / 2));\n      let v = 0;\n      if (wPT) v += voteFromFeat(wPT, idx, half, kVote);\n      if (sTK) v += voteFromFeat(sTK, idx, half, kVote);\n      votes = Math.min(2, v);\n    }\n    const voteScore = votes / 2;\n    const rrPrev = k > 0 ? r[k] - r[k - 1] : NaN;\n    const rrNext = k < M - 1 ? r[k + 1] - r[k] : NaN;\n    const devPrev = isFinite(rrPrev) ? Math.abs(rrPrev - rrMed) / (rrMADs + eps) : Infinity;\n    const devNext = isFinite(rrNext) ? Math.abs(rrNext - rrMed) / (rrMADs + eps) : Infinity;\n    const devZ = Math.min(devPrev, devNext);\n    const rrScore = isFinite(devZ) ? devToScoreGaussian(devZ, Z.tauRR) : 0.7;\n    const conf = Math.max(0, Math.min(1, W.energy * energy + W.votes * voteScore + W.rr * rrScore));\n    out[k] = {\n      i: idx,\n      tMs: (idx * 1000) / fs,\n      conf,\n      parts: { energy, votes: voteScore, rr: rrScore },\n      votes,\n    };\n  }\n  return out;\n}\n\nexport function notch(ecg, fs, opts = {}) {\n  const f0 = opts.f0 != null ? opts.f0 : 50;\n  const Q = opts.Q != null ? opts.Q : 30;\n  const order = opts.order === 4 ? 4 : 2;\n  if (!(fs > 0)) throw new Error('notch: fs must be > 0');\n  if (!(f0 > 0 && f0 < fs * 0.5)) throw new Error('notch: f0 must be in (0, Nyquist)');\n  const x = toFloat32(ecg);\n  if (x.length < 4) return x.slice();\n  const sos = designNotch_SOS(f0, fs, Q, order);\n  return filtfiltBiquad(x, sos);\n}\n\nfunction designNotchBiquad(f0, fs, Q) {\n  const w0 = (2 * Math.PI * f0) / fs,\n    cosw0 = Math.cos(w0),\n    sinw0 = Math.sin(w0);\n  const alpha = sinw0 / (2 * Q);\n  let b0 = 1,\n    b1 = -2 * cosw0,\n    b2 = 1,\n    a0 = 1 + alpha,\n    a1 = -2 * cosw0,\n    a2 = 1 - alpha;\n  b0 /= a0;\n  b1 /= a0;\n  b2 /= a0;\n  a1 /= a0;\n  a2 /= a0;\n  return { b0, b1, b2, a1, a2 };\n}\nfunction designNotch_SOS(f0, fs, Q, order) {\n  if (order === 4) return [designNotchBiquad(f0, fs, Q), designNotchBiquad(f0, fs, Q)];\n  return [designNotchBiquad(f0, fs, Q)];\n}\n\nexport function keepHillsOnlyV2(xRefIn, rIdxIn, fs) {\n  const LOCAL_MS = 8,\n    PRE_MS = 40,\n    POST_MS = 40,\n    DER_MS = 12,\n    MAD_MS = 200;\n  const RISE_RATIO = 0.55,\n    FALL_RATIO = 0.55,\n    PROM_FLOOR = 0.03,\n    PROM_KMAD = 1.5;\n  const x = toFloat32(xRefIn);\n  const idx = sortUniqueInt32(rIdxIn);\n  const N = x.length;\n  if (!N || !idx.length) return new Int32Array(0);\n  const Wloc = Math.max(1, msToSamples(fs, LOCAL_MS));\n  const Lpre = Math.max(1, msToSamples(fs, PRE_MS));\n  const Rpost = Math.max(1, msToSamples(fs, POST_MS));\n  const Wder = Math.max(3, ensureOdd(msToSamples(fs, DER_MS)));\n  const Wmad = Math.max(21, ensureOdd(msToSamples(fs, MAD_MS)));\n  const d = smoothDiff(x, Wder);\n  const out = [];\n  for (let k = 0; k < idx.length; k++) {\n    const i = idx[k] | 0;\n    if (i <= 0 || i >= N - 1) continue;\n    const Lm = Math.max(0, i - Wloc),\n      Rm = Math.min(N - 1, i + Wloc);\n    if (!isLocalMax(x, i, Lm, Rm)) continue;\n    const Ll = Math.max(1, i - Lpre),\n      Rr = Math.min(N - 1, i + Rpost);\n    let upPos = 0,\n      upTot = 0;\n    for (let j = Ll; j <= i; j++) {\n      const dj = d[j];\n      if (dj !== 0) {\n        upTot++;\n        if (dj > 0) upPos++;\n      }\n    }\n    let dnNeg = 0,\n      dnTot = 0;\n    for (let j = i + 1; j <= Rr; j++) {\n      const dj = d[j];\n      if (dj !== 0) {\n        dnTot++;\n        if (dj < 0) dnNeg++;\n      }\n    }\n    const fracUp = upTot ? upPos / upTot : 0,\n      fracDn = dnTot ? dnNeg / dnTot : 0;\n    if (fracUp < RISE_RATIO || fracDn < FALL_RATIO) continue;\n    const Lm2 = Math.max(0, i - ((Wmad - 1) >> 1)),\n      Rm2 = Math.min(N - 1, i + ((Wmad - 1) >> 1));\n    const seg = x.subarray ? x.subarray(Lm2, Rm2 + 1) : x.slice(Lm2, Rm2 + 1);\n    const med = quantile(seg, 0.5);\n    const mad = quantile(absMinus(seg, med), 0.5);\n    const promThr = Math.max(PROM_FLOOR, PROM_KMAD * (mad || 0));\n    const mid = i - Lm2;\n    const leftMed = quantile(\n      seg.subarray ? seg.subarray(0, Math.max(1, mid)) : seg.slice(0, Math.max(1, mid)),\n      0.5,\n    );\n    const rightMed = quantile(\n      seg.subarray\n        ? seg.subarray(Math.min(seg.length - 1, mid + 1))\n        : seg.slice(Math.min(seg.length - 1, mid + 1)),\n      0.5,\n    );\n    const base = Math.max(leftMed, rightMed);\n    if (x[i] - base < promThr) continue;\n    out.push(i);\n  }\n  return Int32Array.from(out);\n\n  function isLocalMax(arr, i, L, R) {\n    const v = arr[i];\n    for (let j = L; j <= R; j++) if (arr[j] > v) return false;\n    return true;\n  }\n  function smoothDiff(x, W) {\n    const N = x.length,\n      L = (W - 1) >> 1,\n      xp = reflectPad(x, L),\n      out = new Float32Array(N);\n    for (let n = 0; n < N; n++) {\n      const i = n + L;\n      let s = 0;\n      for (let k = 1; k <= L; k++) s += xp[i + k] - xp[i - k];\n      out[n] = s / W;\n    }\n    return out;\n  }\n}\n","import {\n  adaptivePeakPick,\n  bandpassQRS,\n  fuseCandidates,\n  keepHillsOnlyV2,\n  ptFeature,\n  refineOnRaw,\n  removeBaseline,\n  robustNormalize,\n  rrPostprocess,\n  tkeoCandidatePeaks,\n  tkeoFeature,\n} from './signalConversionGPT';\nimport { toFloat32 } from './utils';\n\nexport function detectRPeaks(signal) {\n  const fs = 400;\n  const signalData = signal.map((item) => item[1]);\n  const signalTime = signal.map((item) => item[0]);\n  const x0 = toFloat32(signalData);\n  const xBaseRemoved = removeBaseline(x0, fs, { method: 'hp' });\n  const xBP = bandpassQRS(xBaseRemoved, fs, { hp: 8, lp: 40 });\n  const xNR = robustNormalize(xBP, {}).signal || robustNormalize(xBP, {});\n  const wPT = ptFeature(xNR, fs, {});\n  const sTKEO = tkeoFeature(xNR, fs, {});\n  const candPT = adaptivePeakPick(wPT, fs, {});\n  const candTK = tkeoCandidatePeaks(xNR, fs, Object.assign({ returnFeature: false }, {}));\n  const fusedMeta = fuseCandidates([candPT, candTK], fs, {\n    feats: [wPT, sTKEO],\n    xRef: xNR,\n    mergeTolMs: 100,\n    returnMeta: true,\n  });\n  const fusedIdx = fusedMeta.indices;\n  const refined = refineOnRaw(x0, fusedIdx, fs, { xBandpass: xBP, ...{} });\n  const rr = rrPostprocess(xNR, refined, fs, { feat: wPT, ...{} });\n  const rClean = keepHillsOnlyV2(xNR, rr, fs);\n  return {\n    series: signalTime.map((item, i) => [item, rClean.includes(i) ? 100 : 0]),\n    data: Array.from(rClean),\n  };\n}\n","export function zeros(n) {\n  return new Array(n).fill(0);\n}\n\nexport function sign(x) {\n  if (x === 0) return 0;\n  return x > 0 ? 1 : -1;\n}\n\nexport function find(arr, predicate) {\n  const idx = [];\n  if (typeof predicate === 'function') {\n    for (let i = 0; i < arr.length; i++) if (predicate(arr[i], i, arr)) idx.push(i);\n  } else {\n    for (let i = 0; i < arr.length; i++) if (arr[i]) idx.push(i);\n  }\n  return idx;\n}\n\nexport function diff(arr) {\n  if (!Array.isArray(arr) || arr.length === 0) return [];\n  const out = new Array(arr.length - 1);\n  for (let i = 0; i < arr.length - 1; i++) out[i] = arr[i + 1] - arr[i];\n  return out;\n}\n\nexport function conv(x, h) {\n  const N = x.length,\n    M = h.length;\n  const y = zeros(N + M - 1);\n  for (let n = 0; n < y.length; n++) {\n    let acc = 0;\n    const kmin = Math.max(0, n - (M - 1));\n    const kmax = Math.min(n, N - 1);\n    for (let k = kmin; k <= kmax; k++) {\n      acc += x[k] * h[n - k];\n    }\n    y[n] = acc;\n  }\n  return y;\n}\n\nfunction hamming(N) {\n  const win = new Array(N);\n  for (let n = 0; n < N; n++) {\n    win[n] = 0.54 - 0.46 * Math.cos((2 * Math.PI * n) / (N - 1));\n  }\n  return win;\n}\n\nfunction sinc(x) {\n  if (x === 0) return 1;\n  const pix = Math.PI * x;\n  return Math.sin(pix) / pix;\n}\n\nexport function fir1Bandpass(order, wl, wh, window = 'hamming') {\n  if (!Array.isArray(wl)) {\n    wh = arguments[2];\n    window = arguments[3] ?? 'hamming';\n  }\n  const Wl = Array.isArray(wl) ? wl[0] : wl;\n  const Wh = Array.isArray(wl) ? wl[1] : wh;\n\n  const N = order + 1;\n  const M = order / 2;\n  const win = window === 'hamming' ? hamming(N) : hamming(N);\n  const h = new Array(N);\n  for (let n = 0; n < N; n++) {\n    const k = n - M;\n    const ideal = 2 * Wh * sinc(2 * Wh * k) - 2 * Wl * sinc(2 * Wl * k);\n    h[n] = ideal * win[n];\n  }\n  return h;\n}\n\nexport function designBandpassForECG({ A = 26, fs = 400, f1 = 5, f2 = 30 } = {}) {\n  const nyq = fs / 2;\n  const wl = f1 / nyq;\n  const wh = f2 / nyq;\n  return fir1Bandpass(A, [wl, wh]);\n}\n\nconst A = 26;\nconst fs = 400;\nexport const bp = designBandpassForECG({ A, fs, f1: 5, f2: 30 });\n\nexport function removeGroupDelayAfterConv(fullConv, A_even_order) {\n  const delay = A_even_order / 2;\n  return fullConv.slice(delay, fullConv.length - delay);\n}\n","import { getTopValue } from '../../utils';\r\nimport { conv, designBandpassForECG, removeGroupDelayAfterConv, sign, zeros } from './utils';\r\n\r\nexport function processSignal(ecg, fs = 400) {\r\n  const A = 26;\r\n  const gain = 4;\r\n  const lambda = 0.99;\r\n  const bp = designBandpassForECG({ A, fs, f1: 5, f2: 30 });\r\n  const filter_signal_delay = conv(bp, ecg);\r\n  const filter_signal = removeGroupDelayAfterConv(filter_signal_delay, A);\r\n  const nonlinear = filter_signal.map((v) => sign(v) * v ** 2);\r\n  const K = zeros(nonlinear.length);\r\n  for (let j = 0; j < nonlinear.length - 1; j++) {\r\n    K[j + 1] = lambda * K[j] + (1 - lambda) * gain * Math.abs(nonlinear[j + 1]);\r\n  }\r\n  const b = K.map((v, j) => (j % 2 === 0 ? 1 : -1) * v);\r\n  const new_signal = nonlinear.map((v, i) => v + b[i]);\r\n  return {\r\n    filter_signal: filter_signal,\r\n    nonlinear: nonlinear,\r\n    new_signal: new_signal,\r\n  };\r\n}\r\n\r\nexport function getFinalResult(new_signal, nonlinear) {\r\n  const d = new Array(new_signal.length).fill(0);\r\n\r\n  for (let j = 0; j < new_signal.length - 1; j++) {\r\n    d[j + 1] = 0.5 * Math.abs(Math.sign(new_signal[j + 1]) - Math.sign(new_signal[j]));\r\n  }\r\n\r\n  const lambda2 = 0.99;\r\n  const D = new Array(new_signal.length).fill(0);\r\n\r\n  for (let j = 0; j < new_signal.length - 1; j++) {\r\n    D[j + 1] = lambda2 * D[j] + (1 - lambda2) * d[j + 1];\r\n  }\r\n\r\n  const lambda3 = 0.97;\r\n  const threshold = new Array(new_signal.length).fill(0);\r\n\r\n  for (let j = 0; j < new_signal.length - 1; j++) {\r\n    threshold[j + 1] = lambda3 * threshold[j] + (1 - lambda3) * D[j + 1];\r\n  }\r\n\r\n  const positive = new Array(D.length).fill(0);\r\n  const negative = new Array(D.length).fill(0);\r\n\r\n  for (let j = 0; j < d.length; j++) {\r\n    if (d[j] < threshold[j]) {\r\n      positive[j] = 1;\r\n    } else {\r\n      negative[j] = 1;\r\n    }\r\n  }\r\n  const locs_pos = [];\r\n  const locs_neg = [];\r\n  for (let j = 0; j < positive.length; j++) {\r\n    if (positive[j] === 1) locs_pos.push(j);\r\n    if (negative[j] === 1) locs_neg.push(j);\r\n  }\r\n\r\n  const difference_pos = [];\r\n  for (let i = 1; i < locs_pos.length; i++) {\r\n    difference_pos.push(locs_pos[i] - locs_pos[i - 1]);\r\n  }\r\n\r\n  const difference_neg = [];\r\n  for (let i = 1; i < locs_neg.length; i++) {\r\n    difference_neg.push(locs_neg[i] - locs_neg[i - 1]);\r\n  }\r\n\r\n  const ind_pos = [];\r\n  difference_pos.forEach((diff, i) => {\r\n    if (diff > 1) ind_pos.push(i);\r\n  });\r\n\r\n  const ind_neg = [];\r\n\r\n  difference_neg.forEach((diff, i) => {\r\n    if (diff > 1) ind_neg.push(i);\r\n  });\r\n\r\n  const upper_limit = ind_pos.map((i) => locs_pos[i + 1]);\r\n  const lower_limit = ind_neg.map((i) => locs_neg[i + 1]);\r\n\r\n  const event = [];\r\n\r\n  for (let j = 0; j < upper_limit.length; j++) {\r\n    event.push([lower_limit[j], upper_limit[j]]);\r\n  }\r\n  const new_event = [];\r\n  const dist_event = [];\r\n\r\n  for (let j = 0; j < event.length - 1; j++) {\r\n    dist_event.push(event[j + 1][0] - event[j][1]);\r\n\r\n    if (dist_event[j] <= 30) {\r\n      new_event.push([event[j][0], event[j + 1][1]]);\r\n    } else {\r\n      new_event.push(event[j]);\r\n      if (j === event.length - 2) {\r\n        new_event.push(event[event.length - 1]);\r\n      }\r\n    }\r\n  }\r\n\r\n  const new_new_event = [];\r\n  const new_dist_event = [];\r\n  for (let j = 0; j < new_event.length - 1; j++) {\r\n    new_dist_event.push(new_event[j + 1][0] - new_event[j][1]);\r\n\r\n    new_new_event.push(new_event[j]);\r\n    if (j === new_event.length - 2) {\r\n      new_new_event.push(new_event[new_event.length - 1]);\r\n    }\r\n  }\r\n  const new_new_event_filtered = new_new_event.filter((item) => item !== null);\r\n  for (let j = 0; j < new_new_event.length - 1; j++) {\r\n    if (new_new_event_filtered[j][1] === new_new_event_filtered[j + 1][1]) {\r\n      new_new_event[j + 1] = null;\r\n    }\r\n  }\r\n\r\n  const filtered_events = new_new_event.filter((e) => e !== null);\r\n\r\n  const final_event = [];\r\n  for (let j = 0; j < filtered_events.length; j++) {\r\n    const start = filtered_events[j][0];\r\n    const end = filtered_events[j][1];\r\n    const event_size = end - start;\r\n\r\n    if (event_size >= 30) {\r\n      final_event.push([start, end]);\r\n    }\r\n  }\r\n\r\n  const abs_max = [];\r\n  const abs_min = [];\r\n  for (let j = 0; j < final_event.length; j++) {\r\n    const [start, end] = final_event[j];\r\n    const segment = nonlinear.slice(start, end + 1).filter((item) => item > 0);\r\n    abs_max.push(getTopValue(segment, 'max'));\r\n    abs_min.push(getTopValue(segment, 'min'));\r\n  }\r\n\r\n  const RR_amp = [];\r\n  for (let j = 0; j < final_event.length; j++) {\r\n    if (abs_min[j] - abs_max[j] > 10) {\r\n      RR_amp.push(abs_min[j]);\r\n    } else {\r\n      RR_amp.push(abs_max[j]);\r\n    }\r\n  }\r\n\r\n  // const abs_nonlinear = nonlinear.map(Math.abs);  !!!!!!\r\n  const abs_nonlinear = nonlinear.map((item) => (item > 0 ? item : 0));\r\n  const RR_location = [];\r\n\r\n  for (let j = 0; j < final_event.length; j++) {\r\n    const [start, end] = final_event[j];\r\n    const segment = abs_nonlinear.slice(start, end + 1);\r\n    const idx = segment.findIndex((value) => value === RR_amp[j]);\r\n    RR_location.push(start + idx);\r\n  }\r\n\r\n  const RR_amp_values = RR_location.map((idx) => abs_nonlinear[idx]);\r\n\r\n  let RR_time = [...RR_location];\r\n\r\n  for (let j = 0; j < RR_time.length - 1; j++) {\r\n    const minDistance = 100;\r\n    if (RR_time[j + 1] - RR_time[j] < minDistance) {\r\n      if (RR_amp_values[j] < RR_amp_values[j + 1]) {\r\n        RR_time[j] = null;\r\n      } else {\r\n        RR_time[j + 1] = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  return { finalPeaks: (RR_time = RR_time.filter((v) => v !== null)), d, D, threshold };\r\n}\r\n","export const preprocessKHO = (signal) => {\n  const signalData = signal.map((obj) => obj[1]);\n  const MWMFiltered = mwmFilter(signalData);\n  return MWMFiltered;\n};\n\nfunction mwmFilter(signal, fs = 400) {\n  const L1 = Math.round(0.1 * fs);\n  const L2 = Math.round(0.4 * fs);\n  const flen1 = Math.floor(L1 / 2);\n  const flen2 = Math.floor(L2 / 2);\n  const N = signal.length;\n\n  const ch = Array.from(signal, Number);\n\n  const x1 = movingMedian(ch, flen1);\n  const x2 = movingMedian(x1, flen2);\n  const filtered = new Array(N);\n  for (let i = 0; i < N; i++) filtered[i] = ch[i] - x2[i];\n\n  return filtered;\n  function movingMedian(arr, half) {\n    const out = new Array(arr.length);\n    for (let j = 0; j < arr.length; j++) {\n      const start = Math.max(0, j - half);\n      const end = Math.min(arr.length - 1, j + half);\n      const win = arr.slice(start, end + 1).sort((a, b) => a - b);\n      const m = Math.floor(win.length / 2);\n      out[j] = win.length % 2 === 1 ? win[m] : 0.5 * (win[m - 1] + win[m]);\n    }\n    return out;\n  }\n}\n","import { getFinalResult, processSignal } from './SignalConversionKHO';\r\nimport { preprocessKHO } from './preprocessKHO';\r\n\r\nexport function analyzeECGKHO(signal) {\r\n  const fs = 400;\r\n  const signalTime = signal.map((obj) => obj[0]);\r\n  const signalData = signal.map((obj) => obj[1]);\r\n  const transformSignal = (filtered) => signalTime.map((item, i) => [item, filtered[i]]);\r\n  const preFiltered = preprocessKHO(signal);\r\n  const { filter_signal, nonlinear, new_signal } = processSignal(preFiltered, fs);\r\n  const { finalPeaks, D } = getFinalResult(new_signal, nonlinear, preFiltered);\r\n  return {\r\n    filteredSignal: transformSignal(filter_signal),\r\n    nonlinearizedSignal: transformSignal(nonlinear),\r\n    HFSignal: transformSignal(new_signal),\r\n    zeroCrossingSignal: transformSignal(D),\r\n    preFiltered: transformSignal(preFiltered),\r\n    peaks: {\r\n      series: signalTime.map((item, i) => [\r\n        item,\r\n        finalPeaks.includes(i) && signalData[i] > 0 ? 50 : 0,\r\n      ]),\r\n      data: finalPeaks,\r\n    },\r\n  };\r\n}\r\n","import { getTopValue } from '../../utils';\n\nfunction filter(b, a, x) {\n  const y = new Array(x.length).fill(0);\n  for (let n = 0; n < x.length; n++) {\n    for (let i = 0; i < b.length; i++) {\n      if (n - i >= 0) y[n] += b[i] * x[n - i];\n    }\n    for (let i = 1; i < a.length; i++) {\n      if (n - i >= 0) y[n] -= a[i] * y[n - i];\n    }\n    y[n] /= a[0];\n  }\n  return y;\n}\n\nfunction normalize(signal) {\n  const maxVal = getTopValue(signal, 'max') || 1;\n  const minVal = getTopValue(signal, 'min') || 1;\n  const correctVal = Math.abs(maxVal) > Math.abs(minVal) ? maxVal : minVal;\n  return signal.map((val) => val / correctVal);\n}\n\nexport function getLowPassFilterSignal(signal) {\n  const a1 = [1, -2, 1];\n  const b1 = [1, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, 0, 1];\n  let lowPassFilterSignal = filter(b1, a1, signal);\n  lowPassFilterSignal = normalize(lowPassFilterSignal);\n  return lowPassFilterSignal;\n}\n\nexport function getHighPassFilterSignal(signal) {\n  const a2 = [1, -1];\n  const b2 = [\n    -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, -32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 1,\n  ];\n\n  let highPassFilterSignal = filter(b2, a2, signal);\n  highPassFilterSignal = normalize(highPassFilterSignal);\n  return highPassFilterSignal;\n}\n\nexport function getDifferentiatedSignal(signal) {\n  const h = [-1, -2, 0, 2, 1].map((v) => v / 8);\n  const half = Math.floor(h.length / 2);\n  let differentiatedSignal = [];\n  for (let i = 0; i < signal.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < h.length; j++) {\n      const idx = i + j - half;\n      const x = idx >= 0 && idx < signal.length ? signal[idx] : 0;\n      sum += h[j] * x;\n    }\n    differentiatedSignal.push(sum);\n  }\n\n  differentiatedSignal = normalize(differentiatedSignal);\n  return differentiatedSignal;\n}\n\nexport function getSquaredSignal(signal) {\n  let squaredSignal = signal.map((x) => x * x);\n  squaredSignal = normalize(squaredSignal);\n  return squaredSignal;\n}\n\nexport function getMovingWindowSignal(signal) {\n  let movedWindowSignal = [];\n  const windowSize = 51;\n  let sum = 0;\n  for (let i = 0; i < signal.length; i++) {\n    sum += signal[i];\n    if (i >= windowSize) {\n      sum -= signal[i - windowSize];\n    }\n    if (i >= windowSize - 1) {\n      movedWindowSignal.push(sum / windowSize);\n    } else {\n      movedWindowSignal.push(0);\n    }\n  }\n  movedWindowSignal = normalize(movedWindowSignal);\n  return movedWindowSignal;\n}\n\nexport function getRPeaks(signal, dataSignal) {\n  const maxValue = getTopValue(signal, 'max');\n  const avgValue = signal.reduce((sum, val) => sum + val, 0) / signal.length;\n  const threshold = avgValue * maxValue;\n  const binary = signal.map((val) => (val > threshold ? 1 : 0));\n  const left = [];\n  const right = [];\n  for (let i = 1; i < binary.length; i++) {\n    if (binary[i - 1] === 0 && binary[i] === 1) {\n      left.push(i);\n    } else if (binary[i - 1] === 1 && binary[i] === 0) {\n      right.push(i);\n    }\n  }\n  const shift = 21;\n  for (let i = 0; i < left.length; i++) {\n    left[i] = Math.max(0, left[i] - shift);\n    right[i] = Math.min(dataSignal.length - 1, right[i] - shift);\n  }\n\n  const R_locs = [];\n\n  for (let i = 0; i < left.length; i++) {\n    const start = left[i];\n    const end = right[i];\n    let maxVal = -Infinity;\n    let maxIdx = start;\n\n    for (let j = start; j <= end; j++) {\n      if (dataSignal[j] > maxVal) {\n        maxVal = dataSignal[j];\n        maxIdx = j;\n      }\n    }\n\n    R_locs.push(maxIdx);\n  }\n\n  const fs = 400;\n  const minDistance = 0.25 * fs;\n\n  const filteredRLocs = [];\n\n  for (let i = 0; i < R_locs.length; i++) {\n    if (filteredRLocs.length === 0) {\n      filteredRLocs.push(R_locs[i]);\n    } else {\n      const lastAccepted = filteredRLocs[filteredRLocs.length - 1];\n      if (R_locs[i] - lastAccepted >= minDistance) {\n        filteredRLocs.push(R_locs[i]);\n      }\n    }\n  }\n  return filteredRLocs;\n}\n","const MIN_DIST_SEC = 0.1,\r\n  SEARCH_WIN_SEC = 0.15,\r\n  T_WAVE_SLOPE_RATIO = 0.6;\r\nconst RESCUE_SCALE = 0.5,\r\n  GAPFILL_LONG_SEC = 0.9,\r\n  GAPFILL_RR_FACTOR = 0.95,\r\n  GAPFILL_LOW_SCALE = 0.18,\r\n  DEDUP_SEC = 0.22;\r\nconst ABS_REFRACT_SEC = 0.2,\r\n  REL_REFRACT_FRAC = 0.4;\r\nconst RR_GUIDE_ENABLE = true,\r\n  RR_GUIDE_MIN_FRAC = 0.55,\r\n  RR_GUIDE_STRONG_MULT = 1.6;\r\nconst RS_DROP_WIN_SEC = 0.05,\r\n  RS_DROP_FRAC = 0.18;\r\nconst MICRO_R_ENABLE = false,\r\n  MICRO_R_LO_SEC = 0.28,\r\n  MICRO_R_HI_SEC = 0.52,\r\n  MICRO_R_PROM_FRAC = 0.33,\r\n  MICRO_R_MIN_POS_FRAC = 0.2,\r\n  MICRO_R_SIDE_SEC = 0.06;\r\nconst SHAPE_FILTER = true,\r\n  SHAPE_WIDTH_MAX_SEC = 0.12,\r\n  SHAPE_WIDTH_MIN_SEC = 0.012,\r\n  SHAPE_SLOPE_MIN_FRAC = 0.06,\r\n  SHAPE_PROM_FRAC = 0.12,\r\n  SHAPE_CURV_MIN_FRAC = 0.03;\r\n\r\nconst R = Math.round;\r\n\r\nfunction mean(a, start = 0, end = a.length) {\r\n  const n = Math.max(0, end - start);\r\n  if (!n) return 0;\r\n  let s = 0;\r\n  for (let i = start; i < end; i++) s += a[i];\r\n  return s / n;\r\n}\r\nfunction median(arr) {\r\n  const n = arr.length;\r\n  if (!n) return 0;\r\n  const s = new Float64Array(n);\r\n  for (let i = 0; i < n; i++) s[i] = arr[i];\r\n  s.sort();\r\n  const m = n >> 1;\r\n  return n & 1 ? s[m] : 0.5 * (s[m - 1] + s[m]);\r\n}\r\nfunction maxAbs(a) {\r\n  let m = 0;\r\n  for (let i = 0; i < a.length; i++) {\r\n    const v = Math.abs(a[i]);\r\n    if (v > m) m = v;\r\n  }\r\n  return m;\r\n}\r\nfunction minMax(a) {\r\n  let mn = Infinity,\r\n    mx = -Infinity;\r\n  for (let i = 0; i < a.length; i++) {\r\n    const v = a[i];\r\n    if (v < mn) mn = v;\r\n    if (v > mx) mx = v;\r\n  }\r\n  return [mn, mx];\r\n}\r\nfunction normalizeMaxAbsInPlace(x) {\r\n  const m = maxAbs(x);\r\n  if (!m) return;\r\n  const s = 1 / m;\r\n  for (let i = 0; i < x.length; i++) x[i] *= s;\r\n}\r\nfunction argmaxRange(x, s, e) {\r\n  s = s | 0;\r\n  e = Math.min(e | 0, x.length);\r\n  if (e <= s) return { idx: -1, val: -Infinity };\r\n  let im = s,\r\n    vm = x[s];\r\n  for (let i = s + 1; i < e; i++) {\r\n    const v = x[i];\r\n    if (v > vm) {\r\n      vm = v;\r\n      im = i;\r\n    }\r\n  }\r\n  return { idx: im, val: vm };\r\n}\r\nfunction dedupPeaks(idxs, minDist) {\r\n  if (idxs.length === 0) return [];\r\n  const out = [idxs[0]];\r\n  for (let i = 1; i < idxs.length; i++)\r\n    if (idxs[i] - out[out.length - 1] >= minDist) out.push(idxs[i]);\r\n  return out;\r\n}\r\nfunction isUphillPeak(sig, idx, pre = 4, post = 4) {\r\n  const i0 = Math.max(0, idx - pre);\r\n  const i1 = Math.min(sig.length - 1, idx + post);\r\n  if (i1 - i0 < 3) return true;\r\n  return sig[idx] - sig[i0] > 0 && sig[i1] - sig[idx] < 0;\r\n}\r\nfunction localProminence(sig, idx, side) {\r\n  const L = Math.max(0, idx - side);\r\n  const R1 = Math.min(sig.length - 1, idx + side);\r\n  let ml = Infinity,\r\n    mr = Infinity;\r\n  for (let i = L; i <= idx; i++) if (sig[i] < ml) ml = sig[i];\r\n  for (let i = idx; i <= R1; i++) if (sig[i] < mr) mr = sig[i];\r\n  return sig[idx] - Math.max(ml, mr);\r\n}\r\nfunction localRange(sig, idx, side) {\r\n  const L = Math.max(0, idx - side);\r\n  const R1 = Math.min(sig.length - 1, idx + side);\r\n  let mn = Infinity,\r\n    mx = -Infinity;\r\n  for (let i = L; i <= R1; i++) {\r\n    const v = sig[i];\r\n    if (v < mn) mn = v;\r\n    if (v > mx) mx = v;\r\n  }\r\n  const r = mx - mn;\r\n  return r > 1e-9 ? r : 1e-9;\r\n}\r\nfunction widthAtHalfProm(sig, idx, side) {\r\n  const thr = sig[idx] - 0.5 * localProminence(sig, idx, side);\r\n  const L0 = Math.max(0, idx - side);\r\n  const R0 = Math.min(sig.length - 1, idx + side);\r\n  let L = idx,\r\n    Ri = idx;\r\n  while (L > L0 && sig[L] >= thr) L--;\r\n  while (Ri < R0 && sig[Ri] >= thr) Ri++;\r\n  return Ri - L;\r\n}\r\nfunction maxSlopesAround(sig, idx, side) {\r\n  const L0 = Math.max(0, idx - side);\r\n  const R0 = Math.min(sig.length - 2, idx + side);\r\n  let up = 0,\r\n    down = 0;\r\n  for (let i = L0; i < idx; i++) {\r\n    const d = sig[i + 1] - sig[i];\r\n    if (d > up) up = d;\r\n  }\r\n  for (let i = idx; i <= R0; i++) {\r\n    const d = sig[i + 1] - sig[i];\r\n    if (d < down) down = d;\r\n  }\r\n  return { up, down };\r\n}\r\nfunction passesQRSShape(sig, idx, fs, SIG_LEV1, NOISE_LEV1) {\r\n  const side = R(0.12 * fs);\r\n  const sideSlope = R(0.02 * fs);\r\n  const prom = localProminence(sig, idx, side);\r\n  const rng = localRange(sig, idx, side);\r\n  const w = widthAtHalfProm(sig, idx, side);\r\n  const iL = Math.max(1, idx - 1),\r\n    iR = Math.min(sig.length - 2, idx + 1);\r\n  const curv = -(sig[iL] - 2 * sig[idx] + sig[iR]) / rng;\r\n  const { up, down } = maxSlopesAround(sig, idx, sideSlope);\r\n  const promThr = Math.max(\r\n    SHAPE_PROM_FRAC * Math.max(1e-9, SIG_LEV1 - NOISE_LEV1),\r\n    0.06 * Math.max(1e-9, SIG_LEV1),\r\n  );\r\n  const wMin = R(SHAPE_WIDTH_MIN_SEC * fs);\r\n  const wMax = R(SHAPE_WIDTH_MAX_SEC * fs);\r\n  const slopeThr = SHAPE_SLOPE_MIN_FRAC * rng;\r\n  return !(\r\n    prom < promThr ||\r\n    w < wMin ||\r\n    w > wMax ||\r\n    curv < SHAPE_CURV_MIN_FRAC ||\r\n    up < slopeThr ||\r\n    -down < slopeThr\r\n  );\r\n}\r\nfunction postPeakDropOK(sig, idx, fs) {\r\n  const win = R(RS_DROP_WIN_SEC * fs);\r\n  const Rb = Math.min(sig.length - 1, idx + win);\r\n  let mn = Infinity;\r\n  for (let i = idx; i <= Rb; i++) {\r\n    const v = sig[i];\r\n    if (v < mn) mn = v;\r\n  }\r\n  return sig[idx] - mn >= RS_DROP_FRAC * localRange(sig, idx, R(0.12 * fs));\r\n}\r\n\r\nfunction flattop(M) {\r\n  const a0 = 1,\r\n    a1 = 1.93,\r\n    a2 = 1.29,\r\n    a3 = 0.388,\r\n    a4 = 0.028;\r\n  const N = M - 1;\r\n  const w = new Float32Array(M);\r\n  for (let n = 0; n < M; n++) {\r\n    const p = (2 * Math.PI * n) / N;\r\n    w[n] =\r\n      a0 - a1 * Math.cos(p) + a2 * Math.cos(2 * p) - a3 * Math.cos(3 * p) + a4 * Math.cos(4 * p);\r\n  }\r\n\r\n  let s = 0;\r\n  for (let i = 0; i < M; i++) s += w[i];\r\n  const inv = 1 / s;\r\n  for (let i = 0; i < M; i++) w[i] *= inv;\r\n  return w;\r\n}\r\nfunction designFIRLowpass(numTaps, fc, fs) {\r\n  const M = numTaps - 1;\r\n  const w = new Float32Array(numTaps);\r\n  for (let n = 0; n < numTaps; n++) w[n] = 0.54 - 0.46 * Math.cos((2 * Math.PI * n) / M);\r\n  const h = new Float32Array(numTaps);\r\n  const norm = (2 * fc) / fs;\r\n  for (let n = 0; n < numTaps; n++) {\r\n    const m = n - M / 2;\r\n    const x = norm * m;\r\n    const sinc = x === 0 ? 1 : Math.sin(Math.PI * x) / (Math.PI * x);\r\n    h[n] = norm * sinc * w[n];\r\n  }\r\n  let s = 0;\r\n  for (let i = 0; i < numTaps; i++) s += h[i];\r\n  const inv = 1 / s;\r\n  for (let i = 0; i < numTaps; i++) h[i] *= inv;\r\n  return h;\r\n}\r\n\r\nconst BUTTER_200_LOW_12HZ = {\r\n  b: new Float32Array([0.00475052, 0.01425157, 0.01425157, 0.00475052]),\r\n  a: new Float32Array([1.0, -2.25008508, 1.75640138, -0.46831211]),\r\n};\r\nconst BUTTER_200_HIGH_5HZ = {\r\n  b: new Float32Array([0.85449723, -2.56349169, 2.56349169, -0.85449723]),\r\n  a: new Float32Array([1.0, -2.6861574, 2.41965511, -0.73016535]),\r\n};\r\n\r\nfunction lfilter3(b, a, x, y) {\r\n  const b0 = b[0],\r\n    b1 = b[1],\r\n    b2 = b[2],\r\n    b3 = b[3];\r\n  const a1 = a[1],\r\n    a2 = a[2],\r\n    a3 = a[3];\r\n  let x1 = 0,\r\n    x2 = 0,\r\n    x3 = 0,\r\n    y1 = 0,\r\n    y2 = 0,\r\n    y3 = 0;\r\n  for (let n = 0; n < x.length; n++) {\r\n    const xn = x[n];\r\n    const yn = b0 * xn + b1 * x1 + b2 * x2 + b3 * x3 - (a1 * y1 + a2 * y2 + a3 * y3);\r\n    y[n] = yn;\r\n    x3 = x2;\r\n    x2 = x1;\r\n    x1 = xn;\r\n    y3 = y2;\r\n    y2 = y1;\r\n    y1 = yn;\r\n  }\r\n}\r\nfunction lfilterFIR(b, x, y) {\r\n  const M = b.length;\r\n  for (let n = 0; n < x.length; n++) {\r\n    let acc = 0;\r\n    for (let k = 0; k < M; k++) {\r\n      const i = n - k;\r\n      if (i >= 0) acc += b[k] * x[i];\r\n      else break;\r\n    }\r\n    y[n] = acc;\r\n  }\r\n}\r\nfunction lfilterGeneric(b, a, x, y) {\r\n  const nb = b.length,\r\n    na = a.length;\r\n  const a0 = a[0];\r\n  for (let n = 0; n < x.length; n++) {\r\n    let acc = 0;\r\n    for (let i = 0; i < nb; i++) if (n - i >= 0) acc += b[i] * x[n - i];\r\n    for (let j = 1; j < na; j++) if (n - j >= 0) acc -= a[j] * y[n - j];\r\n    y[n] = acc / a0;\r\n  }\r\n}\r\nclass FilterRunner {\r\n  constructor() {\r\n    this.padBuf1 = new Float32Array(0);\r\n    this.padBuf2 = new Float32Array(0);\r\n  }\r\n  _ensurePad(len) {\r\n    if (this.padBuf1.length < len) {\r\n      this.padBuf1 = new Float32Array(len);\r\n      this.padBuf2 = new Float32Array(len);\r\n    }\r\n  }\r\n  filtfilt(b, a, x, padlen = null) {\r\n    const edge = Math.max(b.length, a.length) - 1;\r\n    const pl = padlen == null ? 3 * edge : padlen;\r\n    const n = x.length;\r\n    const L = pl + n + pl;\r\n    this._ensurePad(L);\r\n    const t1 = this.padBuf1,\r\n      t2 = this.padBuf2;\r\n    for (let i = 0; i < pl; i++) t1[i] = 2 * x[0] - x[Math.min(pl - i, n - 1)];\r\n    t1.set(x, pl);\r\n    for (let i = 0; i < pl; i++) t1[pl + n + i] = 2 * x[n - 1] - x[Math.max(n - 2 - i, 0)];\r\n    if (a.length === 1) lfilterFIR(b, t1.subarray(0, L), t2.subarray(0, L));\r\n    else if (a.length === 4 && b.length === 4) lfilter3(b, a, t1.subarray(0, L), t2.subarray(0, L));\r\n    else lfilterGeneric(b, a, t1.subarray(0, L), t2.subarray(0, L));\r\n    for (let i = 0; i < L; i++) t1[i] = t2[L - 1 - i];\r\n\r\n    if (a.length === 1) lfilterFIR(b, t1.subarray(0, L), t2.subarray(0, L));\r\n    else if (a.length === 4 && b.length === 4) lfilter3(b, a, t1.subarray(0, L), t2.subarray(0, L));\r\n    else lfilterGeneric(b, a, t1.subarray(0, L), t2.subarray(0, L));\r\n    for (let i = 0; i < n; i++) x[i] = t2[L - 1 - (pl + i)];\r\n    return x;\r\n  }\r\n}\r\nfunction smootherFlatTopSame(signal, size, out, winCache) {\r\n  const n = signal.length;\r\n  const m = Math.max(1, Math.min(size | 0, n - 1));\r\n  const wKey = m;\r\n  let w = winCache.get(wKey);\r\n  if (!w) {\r\n    w = flattop(m);\r\n    winCache.set(wKey, w);\r\n  }\r\n  const half = (m - 1) >> 1;\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    let acc = 0;\r\n    for (let k = 0; k < m; k++) {\r\n      let j = i + k - half;\r\n      if (j < 0) j = -j;\r\n      if (j >= n) j = 2 * n - 2 - j;\r\n      acc += signal[j] * w[k];\r\n    }\r\n    out[i] = acc;\r\n  }\r\n}\r\n\r\nfunction movingAvgSame(src, win, out) {\r\n  const n = src.length;\r\n  const m = Math.max(1, win | 0);\r\n  const left = (m - 1) >> 1;\r\n  const right = m - 1 - left;\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    let L = i - left,\r\n      R = i + right;\r\n    if (L < 0) L = 0;\r\n    if (R >= n) R = n - 1;\r\n    let acc = 0;\r\n    for (let j = L; j <= R; j++) acc += src[j];\r\n    out[i] = acc / (R - L + 1);\r\n  }\r\n}\r\n\r\nfunction peakIndexes(y, thres = 0, min_dist = 1) {\r\n  const n = y.length;\r\n  if (n < 3) return [];\r\n  const [ymin, ymax] = minMax(y);\r\n  const absThres = ymin + thres * (ymax - ymin);\r\n  const cand = [];\r\n  for (let i = 1; i < n - 1; i++) {\r\n    const yi = y[i];\r\n    if (yi > absThres && yi > y[i - 1] && yi > y[i + 1]) cand.push(i);\r\n  }\r\n  if (!cand.length) return [];\r\n  cand.sort((i, j) => y[j] - y[i]);\r\n  const taken = [];\r\n  const bad = new Uint8Array(n);\r\n  for (let t = 0; t < cand.length; t++) {\r\n    const idx = cand[t];\r\n    if (bad[idx]) continue;\r\n    taken.push(idx);\r\n    const s = Math.max(0, idx - min_dist);\r\n    const e = Math.min(n - 1, idx + min_dist);\r\n    for (let k = s; k <= e; k++) bad[k] = 1;\r\n  }\r\n  taken.sort((a, b) => a - b);\r\n  return taken;\r\n}\r\n\r\nclass Pan_Tompkins_Plus_Plus_Plus {\r\n  constructor() {\r\n    this.bufA = new Float32Array(0);\r\n    this.bufB = new Float32Array(0);\r\n    this.bufC = new Float32Array(0);\r\n    this.bufD = new Float32Array(0);\r\n    this.bufE = new Float32Array(0);\r\n\r\n    this.fr = new FilterRunner();\r\n\r\n    this.winCache = new Map();\r\n    this.boxWinCache = new Map();\r\n    this.diffByFs = new Map();\r\n\r\n    this.h129_400 = designFIRLowpass(129, 80, 400);\r\n\r\n    this.minRRsamples = null;\r\n    this.minRRsec = null;\r\n    this.minRRms = null;\r\n  }\r\n\r\n  get_name() {\r\n    return 'Pan_Tompkins_Plus_Plus_Plus';\r\n  }\r\n\r\n  _ensure(n) {\r\n    if (this.bufA.length < n) {\r\n      this.bufA = new Float32Array(n);\r\n      this.bufB = new Float32Array(n);\r\n      this.bufC = new Float32Array(n);\r\n      this.bufD = new Float32Array(n);\r\n      this.bufE = new Float32Array(n);\r\n    }\r\n  }\r\n\r\n  _getDiff(fs) {\r\n    let diff = this.diffByFs.get(fs);\r\n    if (!diff) {\r\n      diff = new Float32Array([1, 2, 0, -2, -1].map((v) => (v * fs) / 8));\r\n      this.diffByFs.set(fs, diff);\r\n    }\r\n    return diff;\r\n  }\r\n\r\n  _getBoxWinLen(fs, frac) {\r\n    const L = Math.max(1, R(frac * fs));\r\n    return L;\r\n  }\r\n\r\n  downsample400to200(x400) {\r\n    const n = x400.length;\r\n    this._ensure(n);\r\n    this.bufA.set(x400, 0);\r\n    const pad = 3 * (this.h129_400.length - 1);\r\n    this.fr.filtfilt(this.h129_400, new Float32Array([1]), this.bufA.subarray(0, n), pad);\r\n\r\n    const n2 = n >> 1;\r\n    const out = new Float32Array(n2);\r\n    for (let k = 0; k < n2; k++) out[k] = this.bufA[2 * k];\r\n    return out;\r\n  }\r\n\r\n  rpeak_detection_200_pos(ecg, fs) {\r\n    const n = ecg.length;\r\n    this._ensure(n);\r\n    const mu = mean(ecg);\r\n    for (let i = 0; i < n; i++) this.bufA[i] = ecg[i] - mu;\r\n    this.bufB.set(this.bufA.subarray(0, n), 0);\r\n    this.fr.filtfilt(BUTTER_200_LOW_12HZ.b, BUTTER_200_LOW_12HZ.a, this.bufB.subarray(0, n));\r\n    normalizeMaxAbsInPlace(this.bufB.subarray(0, n));\r\n    this.bufC.set(this.bufB.subarray(0, n), 0);\r\n    const padHP = 3 * (Math.max(BUTTER_200_HIGH_5HZ.b.length, BUTTER_200_HIGH_5HZ.a.length) - 1);\r\n    this.fr.filtfilt(BUTTER_200_HIGH_5HZ.b, BUTTER_200_HIGH_5HZ.a, this.bufC.subarray(0, n), padHP);\r\n    normalizeMaxAbsInPlace(this.bufC.subarray(0, n));\r\n    const b_diff = this._getDiff(fs);\r\n    const padD = 3 * (Math.max(b_diff.length, 1) - 1);\r\n    this.bufD.set(this.bufC.subarray(0, n), 0);\r\n    this.fr.filtfilt(b_diff, new Float32Array([1]), this.bufD.subarray(0, n), padD);\r\n    normalizeMaxAbsInPlace(this.bufD.subarray(0, n));\r\n    for (let i = 0; i < n; i++) this.bufE[i] = this.bufD[i] * this.bufD[i];\r\n    smootherFlatTopSame(\r\n      this.bufE.subarray(0, n),\r\n      R(0.06 * fs),\r\n      this.bufA.subarray(0, n),\r\n      this.winCache,\r\n    );\r\n    const boxLen = this._getBoxWinLen(fs, 0.15);\r\n    movingAvgSame(this.bufA.subarray(0, n), boxLen, this.bufB.subarray(0, n));\r\n    const locs = peakIndexes(this.bufB.subarray(0, n), 0, R(MIN_DIST_SEC * fs));\r\n    const pks = new Float32Array(locs.length);\r\n    for (let i = 0; i < locs.length; i++) pks[i] = this.bufB[locs[i]];\r\n\r\n    const qrs_i = [];\r\n    let qrs_i_raw = [];\r\n    const twoSec = 2 * fs + 1;\r\n    let max_m = -Infinity;\r\n    for (let i = 0; i < Math.min(twoSec, n); i++) if (this.bufB[i] > max_m) max_m = this.bufB[i];\r\n    let THR_SIG = max_m / 3;\r\n    let SIG_LEV = THR_SIG;\r\n    let NOISE_LEV = mean(this.bufB, 0, Math.min(twoSec, n)) / 2;\r\n\r\n    let max_h = -Infinity;\r\n    for (let i = 0; i < Math.min(twoSec, n); i++) if (this.bufC[i] > max_h) max_h = this.bufC[i];\r\n    let THR_SIG1 = max_h / 3;\r\n    let SIG_LEV1 = THR_SIG1;\r\n    let NOISE_LEV1 = mean(this.bufC, 0, Math.min(twoSec, n)) / 2;\r\n\r\n    let Beat_C = 0,\r\n      Check_Flag = 0,\r\n      lastAccepted = -1e9;\r\n\r\n    const avgDiffSegment = (arr, s, e) => {\r\n      if (e <= s) return 0;\r\n      let sum = 0;\r\n      for (let i = s + 1; i <= e; i++) sum += arr[i] - arr[i - 1];\r\n      return sum / (e - s);\r\n    };\r\n\r\n    const isTWaveLike = (locIdx) => {\r\n      if (Beat_C < 1) return false;\r\n      const seg = R(0.07 * fs);\r\n      const s1 = Math.max(0, locIdx - seg),\r\n        e1 = locIdx;\r\n      const prev = qrs_i[Beat_C - 1];\r\n      const s2 = Math.max(0, prev - seg - 1),\r\n        e2 = prev;\r\n      const slope1 = avgDiffSegment(this.bufB, s1, e1);\r\n      const slope2 = avgDiffSegment(this.bufB, s2, e2);\r\n      return Math.abs(slope1) <= Math.abs(T_WAVE_SLOPE_RATIO * slope2);\r\n    };\r\n\r\n    for (let i = 0; i < pks.length; i++) {\r\n      const half = R(SEARCH_WIN_SEC * fs);\r\n      const s = Math.max(0, locs[i] - half);\r\n      const e = Math.min(n, locs[i] + half + 1);\r\n      const { idx: x_i_abs, val: y_i } = argmaxRange(this.bufC, s, e);\r\n      const sinceLastAccepted = locs[i] - lastAccepted;\r\n      if (sinceLastAccepted < R(ABS_REFRACT_SEC * fs)) continue;\r\n\r\n      let mean_RR = 0,\r\n        m_selected_RR = 0;\r\n      if (Beat_C >= 9) {\r\n        const diffs = [];\r\n        for (let k = Beat_C - 9; k < Beat_C - 1; k++) diffs.push(qrs_i[k + 1] - qrs_i[k]);\r\n        mean_RR = mean(diffs);\r\n        m_selected_RR = mean_RR;\r\n      }\r\n      const test_m = m_selected_RR || mean_RR || 0;\r\n\r\n      let rrMedRecent = null;\r\n      if (Beat_C >= 3) {\r\n        const diffs = [];\r\n        const st = Math.max(1, Beat_C - 8);\r\n        for (let k = st; k < Beat_C; k++) diffs.push(qrs_i[k] - qrs_i[k - 1]);\r\n        rrMedRecent = median(diffs.filter((d) => d > 0));\r\n      }\r\n      const sinceLast = Beat_C > 0 ? locs[i] - qrs_i[Beat_C - 1] : 1e9;\r\n      let rrGateOK = true;\r\n      if (RR_GUIDE_ENABLE && rrMedRecent && isFinite(rrMedRecent)) {\r\n        const early = R(RR_GUIDE_MIN_FRAC * rrMedRecent);\r\n        if (sinceLast < early)\r\n          rrGateOK =\r\n            pks[i] >= RR_GUIDE_STRONG_MULT * THR_SIG && y_i >= RR_GUIDE_STRONG_MULT * THR_SIG1;\r\n      }\r\n\r\n      if (Beat_C >= 2) {\r\n        const prevRR = qrs_i[Beat_C - 1] - qrs_i[Beat_C - 2];\r\n        if (sinceLastAccepted < R(REL_REFRACT_FRAC * prevRR)) {\r\n          const veryStrong = pks[i] >= 1.4 * THR_SIG && y_i >= 1.4 * THR_SIG1;\r\n          if (!veryStrong) continue;\r\n        }\r\n      }\r\n\r\n      let accepted = false;\r\n      const acceptQRS = (locIdx, amp_m, absIdx_h, amp_h) => {\r\n        if (amp_h <= 0) return;\r\n        if (!isUphillPeak(this.bufC, absIdx_h, 4, 4)) return;\r\n        if (SHAPE_FILTER && !passesQRSShape(this.bufC, absIdx_h, fs, SIG_LEV1, NOISE_LEV1)) return;\r\n        if (!postPeakDropOK(this.bufC, absIdx_h, fs)) return;\r\n        Beat_C++;\r\n        qrs_i.push(locIdx);\r\n        lastAccepted = locIdx;\r\n        if (amp_h >= THR_SIG1) {\r\n          qrs_i_raw.push(absIdx_h);\r\n          SIG_LEV1 = 0.125 * amp_h + 0.875 * SIG_LEV1;\r\n        }\r\n        SIG_LEV = 0.125 * amp_m + 0.875 * SIG_LEV;\r\n        accepted = true;\r\n      };\r\n\r\n      if (pks[i] >= THR_SIG && rrGateOK) {\r\n        let veto = false;\r\n        if (\r\n          Beat_C >= 1 &&\r\n          (locs[i] - qrs_i[Beat_C - 1] <= R(0.36 * fs) ||\r\n            (test_m && locs[i] - qrs_i[Beat_C - 1] <= R(0.5 * test_m)))\r\n        ) {\r\n          veto = isTWaveLike(locs[i]);\r\n        }\r\n        if (!veto) acceptQRS(locs[i], pks[i], x_i_abs, y_i);\r\n      }\r\n\r\n      if (MICRO_R_ENABLE && !accepted && rrGateOK) {\r\n        const inWin = sinceLast >= R(MICRO_R_LO_SEC * fs) && sinceLast <= R(MICRO_R_HI_SEC * fs);\r\n        if (inWin && y_i > 0 && !isTWaveLike(locs[i])) {\r\n          const side = R(MICRO_R_SIDE_SEC * fs);\r\n          const prom = localProminence(this.bufC, x_i_abs, side);\r\n          const promThr = Math.max(\r\n            MICRO_R_PROM_FRAC * Math.max(1e-9, SIG_LEV1 - NOISE_LEV1),\r\n            MICRO_R_MIN_POS_FRAC * Math.max(1e-9, SIG_LEV1),\r\n          );\r\n          if (\r\n            prom > promThr &&\r\n            isUphillPeak(this.bufC, x_i_abs, 4, 4) &&\r\n            postPeakDropOK(this.bufC, x_i_abs, fs)\r\n          ) {\r\n            acceptQRS(locs[i], pks[i], x_i_abs, y_i);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!accepted && rrGateOK && !isTWaveLike(locs[i])) {\r\n        const okShortRR = sinceLast >= R(0.2 * fs) && sinceLast <= R(0.6 * fs);\r\n        if (pks[i] >= RESCUE_SCALE * THR_SIG && okShortRR && y_i >= RESCUE_SCALE * THR_SIG1)\r\n          acceptQRS(locs[i], pks[i], x_i_abs, y_i);\r\n      }\r\n\r\n      if (!accepted) {\r\n        NOISE_LEV1 = 0.125 * Math.max(0, y_i) + 0.875 * NOISE_LEV1;\r\n        NOISE_LEV = 0.125 * pks[i] + 0.875 * NOISE_LEV;\r\n      }\r\n      if (NOISE_LEV || SIG_LEV) THR_SIG = NOISE_LEV + 0.25 * Math.abs(SIG_LEV - NOISE_LEV);\r\n      if (NOISE_LEV1 || SIG_LEV1) THR_SIG1 = NOISE_LEV1 + 0.25 * Math.abs(SIG_LEV1 - NOISE_LEV1);\r\n      Check_Flag = 0;\r\n    }\r\n\r\n    (function gapFill(self) {\r\n      let peaks = qrs_i_raw.slice();\r\n      if (peaks.length < 2) {\r\n        qrs_i_raw = peaks;\r\n        return;\r\n      }\r\n      const rrs = [];\r\n      for (let k = 1; k < peaks.length; k++) rrs.push(peaks[k] - peaks[k - 1]);\r\n      let RRexp = median(rrs) || R(0.8 * fs);\r\n      const added = [];\r\n      for (let k = 1; k < peaks.length; k++) {\r\n        const prev = peaks[k - 1],\r\n          next = peaks[k],\r\n          gap = next - prev;\r\n        if (gap > Math.max(GAPFILL_LONG_SEC * fs, GAPFILL_RR_FACTOR * RRexp)) {\r\n          const candM = argmaxRange(self.bufB, prev + R(0.25 * gap), prev + R(0.75 * gap));\r\n          if (candM.idx >= 0) {\r\n            const half = R(SEARCH_WIN_SEC * fs);\r\n            const locH = argmaxRange(self.bufC, candM.idx - half, candM.idx + half + 1);\r\n            const okM = candM.val >= GAPFILL_LOW_SCALE * THR_SIG;\r\n            const okH = locH.val >= GAPFILL_LOW_SCALE * THR_SIG1;\r\n\r\n            const seg = R(0.07 * fs);\r\n            const s1 = Math.max(0, candM.idx - seg),\r\n              e1 = candM.idx;\r\n            const s2 = Math.max(0, prev - seg - 1),\r\n              e2 = prev;\r\n            const slope1 = avgDiffSegment(self.bufB, s1, e1);\r\n            const slope2 = avgDiffSegment(self.bufB, s2, e2);\r\n            const vetoTW = Math.abs(slope1) <= Math.abs(T_WAVE_SLOPE_RATIO * slope2);\r\n\r\n            if (\r\n              !vetoTW &&\r\n              okM &&\r\n              okH &&\r\n              locH.val > 0 &&\r\n              isUphillPeak(self.bufC, locH.idx, 4, 4) &&\r\n              postPeakDropOK(self.bufC, locH.idx, fs)\r\n            ) {\r\n              added.push(locH.idx);\r\n            }\r\n\r\n            if (\r\n              okM &&\r\n              okH &&\r\n              locH.val > 0 &&\r\n              isUphillPeak(self.bufC, locH.idx, 4, 4) &&\r\n              postPeakDropOK(self.bufC, locH.idx, fs)\r\n            ) {\r\n              added.push(locH.idx);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (added.length) {\r\n        peaks = peaks.concat(added).sort((a, b) => a - b);\r\n        peaks = dedupPeaks(peaks, R(DEDUP_SEC * fs));\r\n      }\r\n      qrs_i_raw = peaks;\r\n    })(this);\r\n\r\n    const out = new Array(qrs_i_raw.length);\r\n    for (let i = 0; i < qrs_i_raw.length; i++) {\r\n      const v = R(qrs_i_raw[i]);\r\n      out[i] = Math.max(0, Math.min(n - 1, v));\r\n    }\r\n    return out;\r\n  }\r\n\r\n  rpeak_detection(ecg400Input) {\r\n    const ecg400 =\r\n      ecg400Input instanceof Float32Array ? ecg400Input : new Float32Array(ecg400Input);\r\n    const ecg200 = this.downsample400to200(ecg400);\r\n    const r200 = this.rpeak_detection_200_pos(ecg200, 200);\r\n    const refined = r200\r\n      .map((i200) => {\r\n        const guess = i200 * 2;\r\n        const s = Math.max(0, guess - 2);\r\n        const e = Math.min(ecg400.length, guess + 3);\r\n        const loc = argmaxRange(ecg400, s, e);\r\n        return loc.idx >= 0 && loc.val > 0 && isUphillPeak(ecg400, loc.idx, 4, 4) ? loc.idx : guess;\r\n      })\r\n      .sort((a, b) => a - b);\r\n\r\n    const out = dedupPeaks(refined, R(DEDUP_SEC * 400));\r\n    if (out.length >= 2) {\r\n      let minSamp = Infinity;\r\n      for (let i = 1; i < out.length; i++) {\r\n        const d = out[i] - out[i - 1];\r\n        if (d < minSamp) minSamp = d;\r\n      }\r\n      this.minRRsamples = minSamp;\r\n      this.minRRsec = minSamp / 400;\r\n      this.minRRms = this.minRRsec * 1000;\r\n    } else {\r\n      this.minRRsamples = this.minRRsec = this.minRRms = null;\r\n    }\r\n\r\n    return out;\r\n  }\r\n}\r\n\r\nexport { Pan_Tompkins_Plus_Plus_Plus };\r\n","import {\n  getDifferentiatedSignal,\n  getMovingWindowSignal,\n  getRPeaks,\n  getSquaredSignal,\n} from './signalConversionPT';\nimport { Pan_Tompkins_Plus_Plus_Plus } from './signalConversionPT+++';\n\nexport const analyzePT = (signal, type) => {\n  const signalTime = signal.map((obj) => obj[0]);\n  const signalData = signal.map((obj) => obj[1]);\n\n  let peaks;\n  if (type === 1) {\n    const differentiatedSignal = getDifferentiatedSignal(signalData);\n    const squaredSignal = getSquaredSignal(differentiatedSignal);\n    const movingWindowSignal = getMovingWindowSignal(squaredSignal);\n    peaks = getRPeaks(movingWindowSignal, signalData);\n  } else if (type === 2) {\n    const newDetector = new Pan_Tompkins_Plus_Plus_Plus();\n    peaks = newDetector.rpeak_detection(signalData);\n  }\n  return {\n    peaks: {\n      series: signalTime.map((item, i) => [item, peaks.includes(i) ? 50 : 0]),\n      data: peaks,\n    },\n  };\n};\n","/* eslint-env worker */\n/* eslint-disable no-restricted-globals */\n\nimport { analyzeATN } from '../algorithms/ATNAlgorithm/mainSignalConversion.js';\nimport { analyzeCMD } from '../algorithms/CMDAlgorithm/mainConversionCMD.js';\nimport { detectRPeaks } from '../algorithms/GPTAlgorithm/mainConversionGPT.js';\nimport { analyzeECGKHO } from '../algorithms/KHOAlgorithm/mainSignalConversion.js';\nimport { analyzePT } from '../algorithms/PTAlgorithm/mainConversionPT.js';\n\nconst registry = {\n  PT: (series) => analyzePT(series.newPreprocess.newFourth, 1).peaks.data,\n  PTPlus: (series) => analyzePT(series.biggestPreprocess.detrended, 2).peaks.data,\n  KHO: (series) => analyzeECGKHO(series.mvmFiltered).peaks.data,\n  ATN: (series) => analyzeATN(series.mvmFiltered).peaks.data,\n  CMD1: (series) => analyzeCMD(series.newPreprocess.newSecond, 1).data,\n  CMD2: (series) => analyzeCMD(series.notchFilteredML, 2).data,\n  GPT: (series) => detectRPeaks(series.biggestPreprocess.bp).data,\n};\n\naddEventListener('message', (e) => {\n  const { name, input } = e.data;\n  try {\n    const fn = registry[name];\n    if (!fn) throw new Error(`Unknown task name: ${name}`);\n    const result = fn(input);\n    postMessage({ ok: true, name, result });\n  } catch (err) {\n    postMessage({ ok: false, name, error: String(err), stack: err?.stack });\n  }\n});\n"],"names":["getTopValue","data","condition","max","Infinity","min","i","length","BANDS","clamp","x","lo","hi","Math","sinc","sin","PI","firLowpass","wc","M","w","L","Array","n","cos","hamming","h","k","firBandpass","f1","f2","fs","arguments","undefined","w1","w2","h2","h1","runFilterBank","signal","filtered","map","_ref","band","_ref2","y","m","pad","floor","acc","xi","convSame","decimated","out","ceil","j","downsample","analyzeATN","signalTime","obj","signalData","signalTransform","item","filteredSignal1","filteredSignal2","filteredSignal3","filteredSignal4","newPeaks","filteredSignal","threshold1","eps","a","b","v","o","push","history","ynm1","median","arr","s","sort","mad","abs","bandEnergyAt","w3","w4","positiveMaximaIndex","raw","best","bestI","aa","bb","slopeAround","rad","round","c","w1i","w2i","w3i","w4i","Number","isNaN","mean","from","_","s1","s2","s3","s4","y2","slice","y3","y4","y5","Ld","P1","P2","P4","a2","a3","a4","a5","neighborAvg","P","FL1","FL2","FL4","allEvents","idx","findPeaks","fineRad","EventsL1","p","base","meanL1","reduce","NL","SL","detectionBlock","mwi","Events","NL0","SL0","thr","sumSig","sumNoi","Signal","Noise","VDs","Class","Ds","B1","B2","ClassL3","C1","C2","SignalL3","NoiseL3","SL4","NL4","SignalL4","NoiseL4","SignalL5","periods","meanperiod","movingAverage","fill","peaks0","eIdx","eBest","ev","posI","peaks","Set","refr","refractoryMs","keep","filter","dsVal","weakDs","bins","total","mT","bestT","bestVar","t","w0","m0","m1","vb","otsuThreshold","ampsStrong","medAmpStrong","slopesStrong","slopeCut","localAmpBaseline","pos","mid","to","neigh","extra","dsOk","baseAmp","ampOk","slopeOk","nearest","d","concat","newDetectRPeaksATN","series","includes","filtfiltFIR","nPad","xPad","N","Float64Array","_x","_x2","reflectPad","y1","convFIR","reverse","subarray","detectECGPeaksStages","opts","firTaps","mwiSec","refractorySec","refineSec","indices","stages","bpArr","dArr","sArr","mArr","thArr","NaN","taps","win","f","sum","designFIRBandpass","yBP","set","W","dBuf","dpos","dCount","mwiBuf","mpos","msum","mCount","mRingLen","mRing","SPKI","NPKI","TH1","initialized","initMax","initCount","initNeeded","lastR","rrHist","mPrev2","mPrev1","mCurr","mValid","i1","i3","i4","mShow","idxM","meanRR","missRR","start","end","accept","bandpass","differentiated","squared","mVal","_opts$refineSec","delay","refine","guess","R","bestIdx","bestVal","denom","delta","cand","shift","detectQRS_JS","inputSignal","X","variance","medianOf","reflectIndex","movingMedianMirror","sig","half","cubicSplineEval","xk","yk","xs","x0","x1","y0","dy","alpha","l","mu","z","ii","dx","findExtrema","maxima","minima","unshift","emd","_maxImfs","_maxSiftings","imfs","residue","tol","sqrt","ex","it","ex2","upper","lower","hNext","exA","gaussianRandomArray","u1","random","u2","mag","log","z0","z1","X1","Xmean","maxabs","yy_pre","idxs","thrIdx","yy","modes","noiseStd","ensembleSize","runs","maxCount","e","noise","noisy","avg","r","ensembleEMD","K","y_signal","y_pos","posVals","peakObjs","minH","minD","minProm","promWin","val","kept","some","leftMin","rightMin","prom","findPositivePeaks","minPeakDistanceSec","locs","analyzeCMD","type","transformPeaks","result","tempResult","MIN_GAP","Float32Array","newF32","countZeroCrossings","prev","countExtrema","c0","buildEnvelope","outEnv","firstIdx","firstVal","i2","v1","v2","slope","lastIdx","lastVal","siftOnce","upperEnv","lowerEnv","meanEnv","maxIdx","minIdx","sdChange","curr","num","extractIMF","work","okSift","sd","ext","zc","isIMFshape","imf","newResidue","useStart","useEndExclusive","used","candIdx","candAmp","maxAmp","tmp","u","med","fIdx","fAmp","keepIdx","keepAmp","curIdx","curAmp","amp","k2","center","bestV","i0","dedup","detectRPeaks","toFloat32","ensureOdd","designHPBiquad","fc","Q","cosw0","b0","b1","b2","a0","a1","designButterworthHP_SOS","order","SQRT2","biquadCascade","sos","z2","xn","yn","filtfiltBiquad","designLPBiquad","mapAbsMinus","quantile","q","minOf","maxOf","frac","vK","selectKthInPlace","left","right","swap","pivot","makeSampleView","maxSample","stride","centeredMovingAverage","xp","ps","msToSamples","ms","rrMedian","rrBuf","rrBufPush","rr","preSlopeMag","preW","maxd","sortUniqueInt32","last","Int32Array","absMinus","argmaxInRange","bi","bv","snapToHillZeroCross","bestD","dL","dR","D","positiveProminence","seg","leftMed","rightMed","sidedSlopeCheck","postW","up","nL","dj","dn","nR","centeredSlidingMedian","nOut","Heap","cmp","this","prototype","size","peek","pop","top","delayed","Map","loSize","hiSize","prune","heap","cnt","get","delete","rebalance","add","remove","outIdx","slidingMedianCausal","bandpassQRS","ecg","hp","lp","orderHP","orderLP","sosHP","sosLP","designButterworthLP_SOS","robustNormalize","returnStats","stats","centerMode","scaleMode","scale","sample","stdDev","q1","q3","p95","p95abs","invS","clipNsigma","isFinite","C","ptFeature","xIn","deriv","diff1Central","diff5Symmetric","mwiMs","refineOnRaw","xRaw","idxIn","toInt32Array","HALF","winMs","MICRO","microWin","PRE","POST","MADW","ZC_WIN","ref","xBandpass","rough","tkeoFeature","next","xBaseRemoved","method","returnBaseline","baseline","win1","win1Ms","win2","win2Ms","base1","base2","hpHz","removeBaseline","xBP","xNR","wPT","sTKEO","candPT","wIn","refrSamp","initLen","initWinSec","thrAlpha","sbFactor","searchBackFactor","initSeg","THR","peakVals","subMaxIdx","subMaxVal","pIdx","pVal","rrMed","adaptivePeakPick","candTK","returnFeature","feature","tkeoCandidatePeaks","Object","assign","fusedMeta","lists","mergeTolMs","feats","isArray","xRef","all","score","src","returnMeta","meta","group","cur","flushGroup","g","sources","votes","fuseCandidates","rIdxIn","feat","minRR","minRRMs","tWin","tSuppressMs","preSlopeMs","tSlopeFrac","sbF","sbK","sPrev","ins","rrPostprocess","rClean","xRefIn","Wloc","Lpre","Rpost","Wder","Wmad","smoothDiff","isLocalMax","Ll","Rr","upPos","upTot","dnNeg","dnTot","Lm2","Rm2","promThr","keepHillsOnlyV2","zeros","pix","designBandpassForECG","A","nyq","wl","wh","window","_arguments$","Wl","Wh","ideal","fir1Bandpass","processSignal","filter_signal","fullConv","A_even_order","removeGroupDelayAfterConv","kmin","kmax","conv","nonlinear","sign","new_signal","preprocessKHO","MWMFiltered","L1","L2","flen1","flen2","ch","movingMedian","x2","mwmFilter","analyzeECGKHO","transformSignal","preFiltered","finalPeaks","threshold","positive","negative","locs_pos","locs_neg","difference_pos","difference_neg","ind_pos","forEach","diff","ind_neg","upper_limit","lower_limit","event","new_event","dist_event","new_new_event","new_dist_event","new_new_event_filtered","filtered_events","final_event","abs_max","abs_min","segment","RR_amp","abs_nonlinear","RR_location","findIndex","value","RR_amp_values","RR_time","minDistance","getFinalResult","nonlinearizedSignal","HFSignal","zeroCrossingSignal","normalize","maxVal","minVal","correctVal","normalizeMaxAbsInPlace","maxAbs","argmaxRange","im","vm","dedupPeaks","minDist","isUphillPeak","pre","post","localProminence","side","R1","ml","mr","localRange","mn","mx","passesQRSShape","SIG_LEV1","NOISE_LEV1","sideSlope","rng","L0","R0","Ri","widthAtHalfProm","iL","iR","curv","down","maxSlopesAround","wMin","wMax","slopeThr","postPeakDropOK","Rb","BUTTER_200_LOW_12HZ","BUTTER_200_HIGH_5HZ","lfilter3","b3","x3","lfilterFIR","lfilterGeneric","nb","na","FilterRunner","constructor","padBuf1","padBuf2","_ensurePad","len","filtfilt","padlen","edge","pl","t1","t2","smootherFlatTopSame","winCache","wKey","inv","flattop","Pan_Tompkins_Plus_Plus_Plus","bufA","bufB","bufC","bufD","bufE","fr","boxWinCache","diffByFs","h129_400","numTaps","norm","designFIRLowpass","minRRsamples","minRRsec","minRRms","get_name","_ensure","_getDiff","_getBoxWinLen","downsample400to200","x400","n2","rpeak_detection_200_pos","padHP","b_diff","padD","boxLen","movingAvgSame","thres","min_dist","ymin","ymax","minMax","absThres","yi","taken","bad","Uint8Array","peakIndexes","pks","qrs_i","qrs_i_raw","twoSec","max_m","THR_SIG","SIG_LEV","NOISE_LEV","max_h","THR_SIG1","Beat_C","Check_Flag","lastAccepted","avgDiffSegment","isTWaveLike","locIdx","e1","e2","slope1","slope2","x_i_abs","y_i","sinceLastAccepted","mean_RR","m_selected_RR","diffs","test_m","rrMedRecent","sinceLast","rrGateOK","prevRR","accepted","acceptQRS","amp_m","absIdx_h","amp_h","veto","okShortRR","self","rrs","RRexp","added","gap","candM","locH","okM","okH","rpeak_detection","ecg400Input","ecg400","ecg200","i200","loc","DEDUP_SEC","minSamp","analyzePT","differentiatedSignal","getDifferentiatedSignal","squaredSignal","getSquaredSignal","movingWindowSignal","movedWindowSignal","windowSize","getMovingWindowSignal","dataSignal","maxValue","binary","R_locs","filteredRLocs","getRPeaks","newDetector","registry","PT","newPreprocess","newFourth","PTPlus","biggestPreprocess","detrended","KHO","mvmFiltered","ATN","CMD1","newSecond","CMD2","notchFilteredML","GPT","bp","addEventListener","name","input","fn","Error","postMessage","ok","err","error","String","stack"],"sourceRoot":""}